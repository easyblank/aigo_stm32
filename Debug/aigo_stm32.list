
aigo_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c614  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800c7a0  0800c7a0  0001c7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb24  0800cb24  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb24  0800cb24  0001cb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb2c  0800cb2c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb2c  0800cb2c  0001cb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb30  0800cb30  0001cb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800cb34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000864  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000176fd  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff3  00000000  00000000  000377b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0003a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001118  00000000  00000000  0003b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022df4  00000000  00000000  0003cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001673d  00000000  00000000  0005f8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd66  00000000  00000000  00076009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00143d6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005084  00000000  00000000  00143dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c784 	.word	0x0800c784

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	0800c784 	.word	0x0800c784

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool  MPU9250_IsConnected()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 8000e8c:	21d0      	movs	r1, #208	; 0xd0
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	2201      	movs	r2, #1
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MPU9250_IsConnected+0x24>)
 8000e96:	f004 ff81 	bl	8005d9c <HAL_I2C_IsDeviceReady>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d101      	bne.n	8000ea4 <MPU9250_IsConnected+0x1c>
    return true;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <MPU9250_IsConnected+0x1e>
  else
    return false;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200004f8 	.word	0x200004f8

08000eb0 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af04      	add	r7, sp, #16
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	803b      	strh	r3, [r7, #0]
  HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 8000ec0:	21d0      	movs	r1, #208	; 0xd0
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	883b      	ldrh	r3, [r7, #0]
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MPU_I2C_Write+0x34>)
 8000ed8:	f004 fe66 	bl	8005ba8 <HAL_I2C_Mem_Write>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200004f8 	.word	0x200004f8

08000ee8 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	803b      	strh	r3, [r7, #0]
  uint8_t data = ReadAddr | READWRITE_CMD;
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 8000f02:	21d0      	movs	r1, #208	; 0xd0
 8000f04:	f107 020f 	add.w	r2, r7, #15
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <MPU_I2C_Read+0x48>)
 8000f12:	f004 fb25 	bl	8005560 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 8000f16:	21d0      	movs	r1, #208	; 0xd0
 8000f18:	883b      	ldrh	r3, [r7, #0]
 8000f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1e:	9200      	str	r2, [sp, #0]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <MPU_I2C_Read+0x48>)
 8000f24:	f004 fc1a 	bl	800575c <HAL_I2C_Master_Receive>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200004f8 	.word	0x200004f8

08000f34 <writeRegister>:
  MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
  #ifdef USE_SPI
  MPU_SPI_Write(&data, subAddress, 1);
  #else
  MPU_I2C_Write(&data, subAddress, 1);
 8000f44:	79f9      	ldrb	r1, [r7, #7]
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffb0 	bl	8000eb0 <MPU_I2C_Write>
  #endif
  HAL_Delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f003 fac5 	bl	80044e0 <HAL_Delay>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	603a      	str	r2, [r7, #0]
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	71bb      	strb	r3, [r7, #6]
  #ifdef USE_SPI
  MPU_SPI_Read(dest, subAddress, count);
  #else
  MPU_I2C_Read(dest, subAddress, count);
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4619      	mov	r1, r3
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f7ff ffb6 	bl	8000ee8 <MPU_I2C_Read>
  #endif
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for write
  writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8000f94:	2325      	movs	r3, #37	; 0x25
 8000f96:	220c      	movs	r2, #12
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ffca 	bl	8000f34 <writeRegister>

  // set the register to the desired AK8963 sub address
  writeRegister(I2C_SLV0_REG,subAddress);
 8000fa0:	2226      	movs	r2, #38	; 0x26
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	f7ff ffc4 	bl	8000f34 <writeRegister>

  // store the data for write
  writeRegister(I2C_SLV0_DO,data);
 8000fac:	2263      	movs	r2, #99	; 0x63
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f7ff ffbe 	bl	8000f34 <writeRegister>

  // enable I2C and send 1 byte
  writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8000fb8:	2227      	movs	r2, #39	; 0x27
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	f7ff ffb5 	bl	8000f34 <writeRegister>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	603a      	str	r2, [r7, #0]
 8000fdc:	71fb      	strb	r3, [r7, #7]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for read
  writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8000fe2:	2025      	movs	r0, #37	; 0x25
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff ffa1 	bl	8000f34 <writeRegister>

  // set the register to the desired AK8963 sub address
  writeRegister(I2C_SLV0_REG,subAddress);
 8000ff2:	2226      	movs	r2, #38	; 0x26
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f7ff ff9b 	bl	8000f34 <writeRegister>

  // enable I2C and request the bytes
  writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8000ffe:	2027      	movs	r0, #39	; 0x27
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	4313      	orrs	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff ff93 	bl	8000f34 <writeRegister>

  // takes some time for these registers to fill
  HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f003 fa66 	bl	80044e0 <HAL_Delay>

  // read the bytes off the MPU9250 EXT_SENS_DATA registers
  readRegisters(EXT_SENS_DATA_00,count,dest);
 8001014:	2049      	movs	r0, #73	; 0x49
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff ff9f 	bl	8000f5e <readRegisters>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  readRegisters(WHO_AM_I,1,_buffer);
 800102c:	2375      	movs	r3, #117	; 0x75
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <whoAmI+0x18>)
 8001030:	2101      	movs	r1, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff93 	bl	8000f5e <readRegisters>

  // return the register value
  return _buffer[0];
 8001038:	4b01      	ldr	r3, [pc, #4]	; (8001040 <whoAmI+0x18>)
 800103a:	781b      	ldrb	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200000a8 	.word	0x200000a8

08001044 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8001048:	2300      	movs	r3, #0
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <whoAmIAK8963+0x18>)
 800104c:	2101      	movs	r1, #1
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ffbf 	bl	8000fd2 <readAK8963Registers>
  // return the register value
  return _buffer[0];
 8001054:	4b01      	ldr	r3, [pc, #4]	; (800105c <whoAmIAK8963+0x18>)
 8001056:	781b      	ldrb	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200000a8 	.word	0x200000a8

08001060 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  #ifndef USE_SPI
  while(MPU9250_IsConnected() == false)
 8001066:	e002      	b.n	800106e <MPU9250_Init+0xe>
  {
    HAL_Delay(100);
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f003 fa39 	bl	80044e0 <HAL_Delay>
  while(MPU9250_IsConnected() == false)
 800106e:	f7ff ff0b 	bl	8000e88 <MPU9250_IsConnected>
 8001072:	4603      	mov	r3, r0
 8001074:	f083 0301 	eor.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f4      	bne.n	8001068 <MPU9250_Init+0x8>
  }
  #endif
  // select clock source to gyro
  writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800107e:	236b      	movs	r3, #107	; 0x6b
 8001080:	2201      	movs	r2, #1
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff55 	bl	8000f34 <writeRegister>
  // enable I2C master mode
  writeRegister(USER_CTRL, I2C_MST_EN);
 800108a:	236a      	movs	r3, #106	; 0x6a
 800108c:	2220      	movs	r2, #32
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff4f 	bl	8000f34 <writeRegister>
  // set the I2C bus speed to 400 kHz
  writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8001096:	2324      	movs	r3, #36	; 0x24
 8001098:	220d      	movs	r2, #13
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff49 	bl	8000f34 <writeRegister>

  // set AK8963 to Power Down
  writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80010a2:	230a      	movs	r3, #10
 80010a4:	2200      	movs	r2, #0
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff6b 	bl	8000f84 <writeAK8963Register>
  // reset the MPU9250
  writeRegister(PWR_MGMNT_1,PWR_RESET);
 80010ae:	236b      	movs	r3, #107	; 0x6b
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff3d 	bl	8000f34 <writeRegister>
  // wait for MPU-9250 to come back up
  HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f003 fa10 	bl	80044e0 <HAL_Delay>
  // reset the AK8963
  writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80010c0:	230b      	movs	r3, #11
 80010c2:	2201      	movs	r2, #1
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff5c 	bl	8000f84 <writeAK8963Register>
  // select clock source to gyro
  writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80010cc:	236b      	movs	r3, #107	; 0x6b
 80010ce:	2201      	movs	r2, #1
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff2e 	bl	8000f34 <writeRegister>

  // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
  uint8_t who = whoAmI();
 80010d8:	f7ff ffa6 	bl	8001028 <whoAmI>
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  if((who != 0x71) && ( who != 0x73))
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b71      	cmp	r3, #113	; 0x71
 80010e4:	d004      	beq.n	80010f0 <MPU9250_Init+0x90>
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b73      	cmp	r3, #115	; 0x73
 80010ea:	d001      	beq.n	80010f0 <MPU9250_Init+0x90>
  {
    return 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e06c      	b.n	80011ca <MPU9250_Init+0x16a>
  }

  // enable accelerometer and gyro
  writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 80010f0:	236c      	movs	r3, #108	; 0x6c
 80010f2:	2200      	movs	r2, #0
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff1c 	bl	8000f34 <writeRegister>

  // setting accel range to 16G as default
  writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 80010fc:	231c      	movs	r3, #28
 80010fe:	2218      	movs	r2, #24
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff16 	bl	8000f34 <writeRegister>

  // setting the gyro range to 2000DPS as default
  writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8001108:	231b      	movs	r3, #27
 800110a:	2200      	movs	r2, #0
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff10 	bl	8000f34 <writeRegister>

  // setting bandwidth to 184Hz as default
  writeRegister(ACCEL_CONFIG2,DLPF_184);
 8001114:	231d      	movs	r3, #29
 8001116:	2201      	movs	r2, #1
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff0a 	bl	8000f34 <writeRegister>

  // setting gyro bandwidth to 184Hz
  writeRegister(CONFIG,DLPF_184);
 8001120:	231a      	movs	r3, #26
 8001122:	2201      	movs	r2, #1
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff04 	bl	8000f34 <writeRegister>

  // setting the sample rate divider to 0 as default
  writeRegister(SMPDIV,0x00);
 800112c:	2319      	movs	r3, #25
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff feff 	bl	8000f34 <writeRegister>

  // enable I2C master mode
  writeRegister(USER_CTRL,I2C_MST_EN);
 8001136:	236a      	movs	r3, #106	; 0x6a
 8001138:	2220      	movs	r2, #32
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fef9 	bl	8000f34 <writeRegister>

  // set the I2C bus speed to 400 kHz
  writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8001142:	2324      	movs	r3, #36	; 0x24
 8001144:	220d      	movs	r2, #13
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fef3 	bl	8000f34 <writeRegister>

  // check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
  if( whoAmIAK8963() != 0x48 )
 800114e:	f7ff ff79 	bl	8001044 <whoAmIAK8963>
 8001152:	4603      	mov	r3, r0
 8001154:	2b48      	cmp	r3, #72	; 0x48
 8001156:	d001      	beq.n	800115c <MPU9250_Init+0xfc>
  {
    return 1;
 8001158:	2301      	movs	r3, #1
 800115a:	e036      	b.n	80011ca <MPU9250_Init+0x16a>
  }

  /* get the magnetometer calibration */
  // set AK8963 to Power Down
  writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800115c:	230a      	movs	r3, #10
 800115e:	2200      	movs	r2, #0
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff0e 	bl	8000f84 <writeAK8963Register>

  HAL_Delay(100); // long wait between AK8963 mode changes
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	f003 f9b9 	bl	80044e0 <HAL_Delay>

  // set AK8963 to FUSE ROM access
  writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 800116e:	230a      	movs	r3, #10
 8001170:	220f      	movs	r2, #15
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff05 	bl	8000f84 <writeAK8963Register>

  // long wait between AK8963 mode changes
  HAL_Delay(100);
 800117a:	2064      	movs	r0, #100	; 0x64
 800117c:	f003 f9b0 	bl	80044e0 <HAL_Delay>

  // read the AK8963 ASA registers and compute magnetometer scale factors
  readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8001180:	2310      	movs	r3, #16
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <MPU9250_Init+0x174>)
 8001184:	2103      	movs	r1, #3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff23 	bl	8000fd2 <readAK8963Registers>

  // set AK8963 to Power Down
  writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800118c:	230a      	movs	r3, #10
 800118e:	2200      	movs	r2, #0
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fef6 	bl	8000f84 <writeAK8963Register>

  // long wait between AK8963 mode changes
  HAL_Delay(100);
 8001198:	2064      	movs	r0, #100	; 0x64
 800119a:	f003 f9a1 	bl	80044e0 <HAL_Delay>

  // set AK8963 to 16 bit resolution, 100 Hz update rate
  writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 800119e:	230a      	movs	r3, #10
 80011a0:	2216      	movs	r2, #22
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff feed 	bl	8000f84 <writeAK8963Register>

  // long wait between AK8963 mode changes
  HAL_Delay(100);
 80011aa:	2064      	movs	r0, #100	; 0x64
 80011ac:	f003 f998 	bl	80044e0 <HAL_Delay>

  // select clock source to gyro
  writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80011b0:	236b      	movs	r3, #107	; 0x6b
 80011b2:	2201      	movs	r2, #1
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff febc 	bl	8000f34 <writeRegister>

  // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
  readAK8963Registers(AK8963_HXL,7,_buffer);
 80011bc:	2303      	movs	r3, #3
 80011be:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <MPU9250_Init+0x178>)
 80011c0:	2107      	movs	r1, #7
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff05 	bl	8000fd2 <readAK8963Registers>

  // successful init, return 0
  return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000c0 	.word	0x200000c0
 80011d8:	200000a8 	.word	0x200000a8

080011dc <MPU9250_GetData>:
  writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  // grab the data from the MPU9250
  readRegisters(ACCEL_OUT, 21, _buffer);
 80011e8:	233b      	movs	r3, #59	; 0x3b
 80011ea:	4a63      	ldr	r2, [pc, #396]	; (8001378 <MPU9250_GetData+0x19c>)
 80011ec:	2115      	movs	r1, #21
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff feb5 	bl	8000f5e <readRegisters>

  // combine into 16 bit values
  AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 80011f4:	4b60      	ldr	r3, [pc, #384]	; (8001378 <MPU9250_GetData+0x19c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <MPU9250_GetData+0x19c>)
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21a      	sxth	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	801a      	strh	r2, [r3, #0]
  AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800120a:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <MPU9250_GetData+0x19c>)
 800120c:	789b      	ldrb	r3, [r3, #2]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b219      	sxth	r1, r3
 8001212:	4b59      	ldr	r3, [pc, #356]	; (8001378 <MPU9250_GetData+0x19c>)
 8001214:	78db      	ldrb	r3, [r3, #3]
 8001216:	b21a      	sxth	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	430a      	orrs	r2, r1
 800121e:	b212      	sxth	r2, r2
 8001220:	801a      	strh	r2, [r3, #0]
  AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001222:	4b55      	ldr	r3, [pc, #340]	; (8001378 <MPU9250_GetData+0x19c>)
 8001224:	791b      	ldrb	r3, [r3, #4]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b219      	sxth	r1, r3
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <MPU9250_GetData+0x19c>)
 800122c:	795b      	ldrb	r3, [r3, #5]
 800122e:	b21a      	sxth	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3304      	adds	r3, #4
 8001234:	430a      	orrs	r2, r1
 8001236:	b212      	sxth	r2, r2
 8001238:	801a      	strh	r2, [r3, #0]
  GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 800123a:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <MPU9250_GetData+0x19c>)
 800123c:	7a1b      	ldrb	r3, [r3, #8]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <MPU9250_GetData+0x19c>)
 8001244:	7a5b      	ldrb	r3, [r3, #9]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	801a      	strh	r2, [r3, #0]
  GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001250:	4b49      	ldr	r3, [pc, #292]	; (8001378 <MPU9250_GetData+0x19c>)
 8001252:	7a9b      	ldrb	r3, [r3, #10]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b219      	sxth	r1, r3
 8001258:	4b47      	ldr	r3, [pc, #284]	; (8001378 <MPU9250_GetData+0x19c>)
 800125a:	7adb      	ldrb	r3, [r3, #11]
 800125c:	b21a      	sxth	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3302      	adds	r3, #2
 8001262:	430a      	orrs	r2, r1
 8001264:	b212      	sxth	r2, r2
 8001266:	801a      	strh	r2, [r3, #0]
  GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <MPU9250_GetData+0x19c>)
 800126a:	7b1b      	ldrb	r3, [r3, #12]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b219      	sxth	r1, r3
 8001270:	4b41      	ldr	r3, [pc, #260]	; (8001378 <MPU9250_GetData+0x19c>)
 8001272:	7b5b      	ldrb	r3, [r3, #13]
 8001274:	b21a      	sxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3304      	adds	r3, #4
 800127a:	430a      	orrs	r2, r1
 800127c:	b212      	sxth	r2, r2
 800127e:	801a      	strh	r2, [r3, #0]

  int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8001280:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <MPU9250_GetData+0x19c>)
 8001282:	7bdb      	ldrb	r3, [r3, #15]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <MPU9250_GetData+0x19c>)
 800128a:	7b9b      	ldrb	r3, [r3, #14]
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	82fb      	strh	r3, [r7, #22]
  int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8001292:	4b39      	ldr	r3, [pc, #228]	; (8001378 <MPU9250_GetData+0x19c>)
 8001294:	7c5b      	ldrb	r3, [r3, #17]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <MPU9250_GetData+0x19c>)
 800129c:	7c1b      	ldrb	r3, [r3, #16]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	82bb      	strh	r3, [r7, #20]
  int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MPU9250_GetData+0x19c>)
 80012a6:	7cdb      	ldrb	r3, [r3, #19]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <MPU9250_GetData+0x19c>)
 80012ae:	7c9b      	ldrb	r3, [r3, #18]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	827b      	strh	r3, [r7, #18]

  MagData[0] = (int16_t)((float_t)magx * ((float_t)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80012b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c2:	4b2e      	ldr	r3, [pc, #184]	; (800137c <MPU9250_GetData+0x1a0>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	3b80      	subs	r3, #128	; 0x80
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012d0:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8001380 <MPU9250_GetData+0x1a4>
 80012d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80012d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e8:	ee17 3a90 	vmov	r3, s15
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	801a      	strh	r2, [r3, #0]
  MagData[1] = (int16_t)((float_t)magy * ((float_t)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 80012f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MPU9250_GetData+0x1a0>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	3b80      	subs	r3, #128	; 0x80
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800130c:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001380 <MPU9250_GetData+0x1a4>
 8001310:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3302      	adds	r3, #2
 8001324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001328:	ee17 2a90 	vmov	r2, s15
 800132c:	b212      	sxth	r2, r2
 800132e:	801a      	strh	r2, [r3, #0]
  MagData[2] = (int16_t)((float_t)magz * ((float_t)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8001330:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MPU9250_GetData+0x1a0>)
 800133e:	789b      	ldrb	r3, [r3, #2]
 8001340:	3b80      	subs	r3, #128	; 0x80
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800134a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8001380 <MPU9250_GetData+0x1a4>
 800134e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800135a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3304      	adds	r3, #4
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	ee17 2a90 	vmov	r2, s15
 800136a:	b212      	sxth	r2, r2
 800136c:	801a      	strh	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000a8 	.word	0x200000a8
 800137c:	200000c0 	.word	0x200000c0
 8001380:	43800000 	.word	0x43800000

08001384 <calibrateMPU9250>:

void calibrateMPU9250(float_t * dest1, float_t * dest2)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b098      	sub	sp, #96	; 0x60
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800138e:	2300      	movs	r3, #0
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
 8001392:	2300      	movs	r3, #0
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001396:	2300      	movs	r3, #0
 8001398:	643b      	str	r3, [r7, #64]	; 0x40
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34

// reset device, reset all registers, clear gyro and accelerometer bias registers
  writeRegister(PWR_MGMNT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80013a6:	236b      	movs	r3, #107	; 0x6b
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fdc2 	bl	8000f34 <writeRegister>
  HAL_Delay(100);
 80013b0:	2064      	movs	r0, #100	; 0x64
 80013b2:	f003 f895 	bl	80044e0 <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  writeRegister(PWR_MGMNT_1, 0x01);
 80013b6:	236b      	movs	r3, #107	; 0x6b
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fdba 	bl	8000f34 <writeRegister>
  writeRegister(PWR_MGMNT_2, 0x00);
 80013c0:	236c      	movs	r3, #108	; 0x6c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fdb5 	bl	8000f34 <writeRegister>
  HAL_Delay(200);
 80013ca:	20c8      	movs	r0, #200	; 0xc8
 80013cc:	f003 f888 	bl	80044e0 <HAL_Delay>

// Configure device for bias calculation
  writeRegister(INT_ENABLE, 0x00);   // Disable all interrupts
 80013d0:	2338      	movs	r3, #56	; 0x38
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fdad 	bl	8000f34 <writeRegister>
  writeRegister(FIFO_EN, 0x00);      // Disable FIFO
 80013da:	2323      	movs	r3, #35	; 0x23
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fda8 	bl	8000f34 <writeRegister>
  writeRegister(PWR_MGMNT_1, 0x00);   // Turn on internal clock source
 80013e4:	236b      	movs	r3, #107	; 0x6b
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fda3 	bl	8000f34 <writeRegister>
  writeRegister(I2C_MST_CTRL, 0x00); // Disable I2C master
 80013ee:	2324      	movs	r3, #36	; 0x24
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fd9e 	bl	8000f34 <writeRegister>
  writeRegister(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80013f8:	236a      	movs	r3, #106	; 0x6a
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd99 	bl	8000f34 <writeRegister>
  writeRegister(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001402:	236a      	movs	r3, #106	; 0x6a
 8001404:	210c      	movs	r1, #12
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fd94 	bl	8000f34 <writeRegister>
  HAL_Delay(15);
 800140c:	200f      	movs	r0, #15
 800140e:	f003 f867 	bl	80044e0 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  writeRegister(CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001412:	231a      	movs	r3, #26
 8001414:	2101      	movs	r1, #1
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fd8c 	bl	8000f34 <writeRegister>
  writeRegister(SMPDIV, 0x00);  // Set sample rate to 1 kHz
 800141c:	2319      	movs	r3, #25
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fd87 	bl	8000f34 <writeRegister>
  writeRegister(GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001426:	231b      	movs	r3, #27
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fd82 	bl	8000f34 <writeRegister>
  writeRegister(ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001430:	231c      	movs	r3, #28
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd7d 	bl	8000f34 <writeRegister>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 800143a:	2383      	movs	r3, #131	; 0x83
 800143c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001444:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  writeRegister(USER_CTRL, 0x40);   // Enable FIFO
 8001448:	236a      	movs	r3, #106	; 0x6a
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fd71 	bl	8000f34 <writeRegister>
  writeRegister(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001452:	2323      	movs	r3, #35	; 0x23
 8001454:	2178      	movs	r1, #120	; 0x78
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fd6c 	bl	8000f34 <writeRegister>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 800145c:	2028      	movs	r0, #40	; 0x28
 800145e:	f003 f83f 	bl	80044e0 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  writeRegister(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001462:	2323      	movs	r3, #35	; 0x23
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fd64 	bl	8000f34 <writeRegister>
  readRegisters(FIFO_COUNT, 2, &data[0]); // read FIFO sample count
 800146c:	2072      	movs	r0, #114	; 0x72
 800146e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001472:	461a      	mov	r2, r3
 8001474:	2102      	movs	r1, #2
 8001476:	f7ff fd72 	bl	8000f5e <readRegisters>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 800147a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21b      	sxth	r3, r3
 800148c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001490:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001494:	4ab1      	ldr	r2, [pc, #708]	; (800175c <calibrateMPU9250+0x3d8>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80014a6:	e071      	b.n	800158c <calibrateMPU9250+0x208>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80014a8:	2300      	movs	r3, #0
 80014aa:	82bb      	strh	r3, [r7, #20]
 80014ac:	2300      	movs	r3, #0
 80014ae:	82fb      	strh	r3, [r7, #22]
 80014b0:	2300      	movs	r3, #0
 80014b2:	833b      	strh	r3, [r7, #24]
 80014b4:	2300      	movs	r3, #0
 80014b6:	81bb      	strh	r3, [r7, #12]
 80014b8:	2300      	movs	r3, #0
 80014ba:	81fb      	strh	r3, [r7, #14]
 80014bc:	2300      	movs	r3, #0
 80014be:	823b      	strh	r3, [r7, #16]
    readRegisters(FIFO_READ, 12, &data[0]); // read data for averaging
 80014c0:	2074      	movs	r0, #116	; 0x74
 80014c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014c6:	461a      	mov	r2, r3
 80014c8:	210c      	movs	r1, #12
 80014ca:	f7ff fd48 	bl	8000f5e <readRegisters>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80014ce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21b      	sxth	r3, r3
 80014e0:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80014e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80014f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001502:	b21b      	sxth	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b21b      	sxth	r3, r3
 8001508:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800150a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800151e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21b      	sxth	r3, r3
 8001530:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001532:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21b      	sxth	r3, r3
 8001544:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800154c:	4413      	add	r3, r2
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 8001550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001552:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001556:	4413      	add	r3, r2
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001560:	4413      	add	r3, r2
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001566:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 800156e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001570:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001574:	4413      	add	r3, r2
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800157a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 8001582:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001586:	3301      	adds	r3, #1
 8001588:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800158c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001590:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001594:	429a      	cmp	r2, r3
 8001596:	d387      	bcc.n	80014a8 <calibrateMPU9250+0x124>

}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800159a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800159e:	fb92 f3f3 	sdiv	r3, r2, r3
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 80015a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 80015b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 80015bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 80015c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 80015d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015da:	fb92 f3f3 	sdiv	r3, r2, r3
 80015de:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd05      	ble.n	80015f2 <calibrateMPU9250+0x26e>
 80015e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015e8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
 80015f0:	e004      	b.n	80015fc <calibrateMPU9250+0x278>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80015f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80015f8:	4413      	add	r3, r2
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80015fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015fe:	425b      	negs	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	da00      	bge.n	8001606 <calibrateMPU9250+0x282>
 8001604:	3303      	adds	r3, #3
 8001606:	109b      	asrs	r3, r3, #2
 8001608:	121b      	asrs	r3, r3, #8
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001612:	425b      	negs	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	da00      	bge.n	800161a <calibrateMPU9250+0x296>
 8001618:	3303      	adds	r3, #3
 800161a:	109b      	asrs	r3, r3, #2
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001624:	425b      	negs	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	da00      	bge.n	800162c <calibrateMPU9250+0x2a8>
 800162a:	3303      	adds	r3, #3
 800162c:	109b      	asrs	r3, r3, #2
 800162e:	121b      	asrs	r3, r3, #8
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8001636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001638:	425b      	negs	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	da00      	bge.n	8001640 <calibrateMPU9250+0x2bc>
 800163e:	3303      	adds	r3, #3
 8001640:	109b      	asrs	r3, r3, #2
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800164a:	425b      	negs	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	da00      	bge.n	8001652 <calibrateMPU9250+0x2ce>
 8001650:	3303      	adds	r3, #3
 8001652:	109b      	asrs	r3, r3, #2
 8001654:	121b      	asrs	r3, r3, #8
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 800165c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800165e:	425b      	negs	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	da00      	bge.n	8001666 <calibrateMPU9250+0x2e2>
 8001664:	3303      	adds	r3, #3
 8001666:	109b      	asrs	r3, r3, #2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  writeRegister(YG_OFFSET_H, data[2]);
  writeRegister(YG_OFFSET_L, data[3]);
  writeRegister(ZG_OFFSET_H, data[4]);
  writeRegister(ZG_OFFSET_L, data[5]);
*/
  dest1[0] = (float_t) gyro_bias[0]/(float_t) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 800166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001678:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float_t) gyro_bias[1]/(float_t) gyrosensitivity;
 800168e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001698:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ac:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float_t) gyro_bias[2]/(float_t) gyrosensitivity;
 80016b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ba:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3308      	adds	r3, #8
 80016ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ce:	edc3 7a00 	vstr	s15, [r3]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  readRegisters(XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80016de:	2077      	movs	r0, #119	; 0x77
 80016e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e4:	461a      	mov	r2, r3
 80016e6:	2102      	movs	r1, #2
 80016e8:	f7ff fc39 	bl	8000f5e <readRegisters>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80016ec:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80016fa:	4313      	orrs	r3, r2
 80016fc:	623b      	str	r3, [r7, #32]
  readRegisters(YA_OFFSET_H, 2, &data[0]);
 80016fe:	207a      	movs	r0, #122	; 0x7a
 8001700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001704:	461a      	mov	r2, r3
 8001706:	2102      	movs	r1, #2
 8001708:	f7ff fc29 	bl	8000f5e <readRegisters>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800170c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21b      	sxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800171a:	4313      	orrs	r3, r2
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  readRegisters(ZA_OFFSET_H, 2, &data[0]);
 800171e:	207d      	movs	r0, #125	; 0x7d
 8001720:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001724:	461a      	mov	r2, r3
 8001726:	2102      	movs	r1, #2
 8001728:	f7ff fc19 	bl	8000f5e <readRegisters>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800172c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21b      	sxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800173a:	4313      	orrs	r3, r2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800173e:	2301      	movs	r3, #1
 8001740:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001742:	4a07      	ldr	r2, [pc, #28]	; (8001760 <calibrateMPU9250+0x3dc>)
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	4611      	mov	r1, r2
 800174c:	8019      	strh	r1, [r3, #0]
 800174e:	3302      	adds	r3, #2
 8001750:	0c12      	lsrs	r2, r2, #16
 8001752:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 8001754:	2300      	movs	r3, #0
 8001756:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800175a:	e01d      	b.n	8001798 <calibrateMPU9250+0x414>
 800175c:	aaaaaaab 	.word	0xaaaaaaab
 8001760:	0800c7a0 	.word	0x0800c7a0
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001764:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800176e:	4413      	add	r3, r2
 8001770:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001774:	461a      	mov	r2, r3
 8001776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <calibrateMPU9250+0x40a>
 800177e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001782:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001786:	4413      	add	r3, r2
 8001788:	2201      	movs	r2, #1
 800178a:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 800178e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001792:	3301      	adds	r3, #1
 8001794:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001798:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800179c:	2b02      	cmp	r3, #2
 800179e:	d9e1      	bls.n	8001764 <calibrateMPU9250+0x3e0>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da00      	bge.n	80017aa <calibrateMPU9250+0x426>
 80017a8:	3307      	adds	r3, #7
 80017aa:	10db      	asrs	r3, r3, #3
 80017ac:	425b      	negs	r3, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da00      	bge.n	80017bc <calibrateMPU9250+0x438>
 80017ba:	3307      	adds	r3, #7
 80017bc:	10db      	asrs	r3, r3, #3
 80017be:	425b      	negs	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 80017c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da00      	bge.n	80017ce <calibrateMPU9250+0x44a>
 80017cc:	3307      	adds	r3, #7
 80017ce:	10db      	asrs	r3, r3, #3
 80017d0:	425b      	negs	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	121b      	asrs	r3, r3, #8
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80017e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80017ec:	7f3b      	ldrb	r3, [r7, #28]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	121b      	asrs	r3, r3, #8
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001808:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800180c:	7f7b      	ldrb	r3, [r7, #29]
 800180e:	4313      	orrs	r3, r2
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	121b      	asrs	r3, r3, #8
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001828:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800182c:	7fbb      	ldrb	r3, [r7, #30]
 800182e:	4313      	orrs	r3, r2
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  writeRegister(YA_OFFSET_L, data[3]);
  writeRegister(ZA_OFFSET_H, data[4]);
  writeRegister(ZA_OFFSET_L, data[5]);
*/
// Output scaled accelerometer biases for manual subtraction in the main program
   dest2[0] = (float_t)accel_bias[0]/(float_t)accelsensitivity;
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001840:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800184c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float_t)accel_bias[1]/(float_t)accelsensitivity;
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001860:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	3304      	adds	r3, #4
 8001870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001874:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float_t)accel_bias[2]/(float_t)accelsensitivity;
 8001878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	3308      	adds	r3, #8
 8001892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001896:	edc3 7a00 	vstr	s15, [r3]
}
 800189a:	bf00      	nop
 800189c:	3760      	adds	r7, #96	; 0x60
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop

080018a4 <millis>:
#define TWO_PI M_PI*2
#define sq(n) (n*n)
#define radians(angleDegrees) (angleDegrees * M_PI / 180.0)
#define degrees(angleRadians) (angleRadians * 180.0 / M_PI)

uint32_t millis() {return 0;}
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	2300      	movs	r3, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <gpsisdigit>:
  // internal utilities
  int16_t from_hex(uint8_t a);
  uint32_t parse_decimal();
  uint32_t parse_degrees();
  bool term_complete();
  bool gpsisdigit(uint8_t c) { return c >= '0' && c <= '9'; }
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b2f      	cmp	r3, #47	; 0x2f
 80018c2:	d904      	bls.n	80018ce <gpsisdigit+0x1a>
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b39      	cmp	r3, #57	; 0x39
 80018c8:	d801      	bhi.n	80018ce <gpsisdigit+0x1a>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <gpsisdigit+0x1c>
 80018ce:	2300      	movs	r3, #0
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <encode>:
//
// public methods
//

bool encode(uint8_t c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  bool valid_sentence = false;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]

#ifndef _GPS_NO_STATS
  ++_encoded_characters;
 80018f2:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <encode+0x170>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	4a56      	ldr	r2, [pc, #344]	; (8001a54 <encode+0x170>)
 80018fa:	6013      	str	r3, [r2, #0]
#endif
  switch(c)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	3b0a      	subs	r3, #10
 8001900:	2b22      	cmp	r3, #34	; 0x22
 8001902:	f200 8086 	bhi.w	8001a12 <encode+0x12e>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <encode+0x28>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	080019a7 	.word	0x080019a7
 8001910:	08001a13 	.word	0x08001a13
 8001914:	08001a13 	.word	0x08001a13
 8001918:	080019a7 	.word	0x080019a7
 800191c:	08001a13 	.word	0x08001a13
 8001920:	08001a13 	.word	0x08001a13
 8001924:	08001a13 	.word	0x08001a13
 8001928:	08001a13 	.word	0x08001a13
 800192c:	08001a13 	.word	0x08001a13
 8001930:	08001a13 	.word	0x08001a13
 8001934:	08001a13 	.word	0x08001a13
 8001938:	08001a13 	.word	0x08001a13
 800193c:	08001a13 	.word	0x08001a13
 8001940:	08001a13 	.word	0x08001a13
 8001944:	08001a13 	.word	0x08001a13
 8001948:	08001a13 	.word	0x08001a13
 800194c:	08001a13 	.word	0x08001a13
 8001950:	08001a13 	.word	0x08001a13
 8001954:	08001a13 	.word	0x08001a13
 8001958:	08001a13 	.word	0x08001a13
 800195c:	08001a13 	.word	0x08001a13
 8001960:	08001a13 	.word	0x08001a13
 8001964:	08001a13 	.word	0x08001a13
 8001968:	08001a13 	.word	0x08001a13
 800196c:	08001a13 	.word	0x08001a13
 8001970:	08001a13 	.word	0x08001a13
 8001974:	080019e9 	.word	0x080019e9
 8001978:	08001a13 	.word	0x08001a13
 800197c:	08001a13 	.word	0x08001a13
 8001980:	08001a13 	.word	0x08001a13
 8001984:	08001a13 	.word	0x08001a13
 8001988:	08001a13 	.word	0x08001a13
 800198c:	080019a7 	.word	0x080019a7
 8001990:	08001a13 	.word	0x08001a13
 8001994:	08001999 	.word	0x08001999
  {
  case ',': // term terminators
    _parity ^= c;
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <encode+0x174>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4053      	eors	r3, r2
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <encode+0x174>)
 80019a4:	701a      	strb	r2, [r3, #0]
  case '\r':
  case '\n':
  case '*':
    if (_term_offset < sizeof(_term))
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <encode+0x178>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b0e      	cmp	r3, #14
 80019ac:	d809      	bhi.n	80019c2 <encode+0xde>
    {
      _term[_term_offset] = 0;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <encode+0x178>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <encode+0x17c>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	5499      	strb	r1, [r3, r2]
      valid_sentence = term_complete();
 80019ba:	f000 f949 	bl	8001c50 <term_complete>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
    }
    ++_term_number;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <encode+0x180>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <encode+0x180>)
 80019cc:	701a      	strb	r2, [r3, #0]
    _term_offset = 0;
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <encode+0x178>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
    _is_checksum_term = c == '*';
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b2a      	cmp	r3, #42	; 0x2a
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <encode+0x184>)
 80019e2:	701a      	strb	r2, [r3, #0]
    return valid_sentence;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	e031      	b.n	8001a4c <encode+0x168>

  case '$': // sentence begin
    _term_number = _term_offset = 0;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <encode+0x178>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <encode+0x178>)
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <encode+0x180>)
 80019f4:	701a      	strb	r2, [r3, #0]
    _parity = 0;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <encode+0x174>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
    _sentence_type = _GPS_SENTENCE_OTHER;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <encode+0x188>)
 80019fe:	2202      	movs	r2, #2
 8001a00:	701a      	strb	r2, [r3, #0]
    _is_checksum_term = false;
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <encode+0x184>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
    _gps_data_good = false;
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <encode+0x18c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
    return valid_sentence;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	e01c      	b.n	8001a4c <encode+0x168>
  }

  // ordinary characters
  if (_term_offset < sizeof(_term) - 1)
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <encode+0x178>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b0d      	cmp	r3, #13
 8001a18:	d809      	bhi.n	8001a2e <encode+0x14a>
    _term[_term_offset++] = c;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <encode+0x178>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	b2d1      	uxtb	r1, r2
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <encode+0x178>)
 8001a24:	7011      	strb	r1, [r2, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <encode+0x17c>)
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	5453      	strb	r3, [r2, r1]
  if (!_is_checksum_term)
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <encode+0x184>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	f083 0301 	eor.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <encode+0x166>
    _parity ^= c;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <encode+0x174>)
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4053      	eors	r3, r2
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <encode+0x174>)
 8001a48:	701a      	strb	r2, [r3, #0]

  return valid_sentence;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000460 	.word	0x20000460
 8001a58:	20000497 	.word	0x20000497
 8001a5c:	20000454 	.word	0x20000454
 8001a60:	20000424 	.word	0x20000424
 8001a64:	20000496 	.word	0x20000496
 8001a68:	20000470 	.word	0x20000470
 8001a6c:	20000420 	.word	0x20000420
 8001a70:	20000455 	.word	0x20000455

08001a74 <from_hex>:

//
// internal utilities
//
int16_t from_hex(uint8_t a)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if (a >= 'A' && a <= 'F')
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b40      	cmp	r3, #64	; 0x40
 8001a82:	d908      	bls.n	8001a96 <from_hex+0x22>
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b46      	cmp	r3, #70	; 0x46
 8001a88:	d805      	bhi.n	8001a96 <from_hex+0x22>
    return a - 'A' + 10;
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b37      	subs	r3, #55	; 0x37
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	e010      	b.n	8001ab8 <from_hex+0x44>
  else if (a >= 'a' && a <= 'f')
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b60      	cmp	r3, #96	; 0x60
 8001a9a:	d908      	bls.n	8001aae <from_hex+0x3a>
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b66      	cmp	r3, #102	; 0x66
 8001aa0:	d805      	bhi.n	8001aae <from_hex+0x3a>
    return a - 'a' + 10;
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b57      	subs	r3, #87	; 0x57
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	e004      	b.n	8001ab8 <from_hex+0x44>
  else
    return a - '0';
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3b30      	subs	r3, #48	; 0x30
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <parse_decimal>:

uint32_t parse_decimal()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
  uint8_t *p = _term;
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <parse_decimal+0xbc>)
 8001acc:	60fb      	str	r3, [r7, #12]
  bool isneg = *p == '-';
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b2d      	cmp	r3, #45	; 0x2d
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2301      	moveq	r3, #1
 8001ad8:	2300      	movne	r3, #0
 8001ada:	71fb      	strb	r3, [r7, #7]
  if (isneg) ++p;
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <parse_decimal+0x24>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
  uint32_t ret = 100u * gpsatol(p);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fa75 	bl	8001fd8 <gpsatol>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	fb03 f302 	mul.w	r3, r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
  while (gpsisdigit(*p)) ++p;
 8001afa:	e002      	b.n	8001b02 <parse_decimal+0x3e>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fed4 	bl	80018b4 <gpsisdigit>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f4      	bne.n	8001afc <parse_decimal+0x38>
  if (*p == '.')
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b2e      	cmp	r3, #46	; 0x2e
 8001b18:	d126      	bne.n	8001b68 <parse_decimal+0xa4>
  {
    if (gpsisdigit(p[1]))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fec7 	bl	80018b4 <gpsisdigit>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01d      	beq.n	8001b68 <parse_decimal+0xa4>
    {
      ret += 10 * (p[1] - '0');
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4413      	add	r3, r2
 8001b44:	60bb      	str	r3, [r7, #8]
      if (gpsisdigit(p[2]))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff feb1 	bl	80018b4 <gpsisdigit>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <parse_decimal+0xa4>
        ret += p[2] - '0';
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4413      	add	r3, r2
 8001b64:	3b30      	subs	r3, #48	; 0x30
 8001b66:	60bb      	str	r3, [r7, #8]
    }
  }
  return isneg ? -ret : ret;
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <parse_decimal+0xb0>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	425b      	negs	r3, r3
 8001b72:	e000      	b.n	8001b76 <parse_decimal+0xb2>
 8001b74:	68bb      	ldr	r3, [r7, #8]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000424 	.word	0x20000424

08001b84 <parse_degrees>:

// Parse a string in the form ddmm.mmmmmmm...
uint32_t parse_degrees()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
  uint8_t *p;
  uint32_t left_of_decimal = gpsatol(_term);
 8001b8a:	482b      	ldr	r0, [pc, #172]	; (8001c38 <parse_degrees+0xb4>)
 8001b8c:	f000 fa24 	bl	8001fd8 <gpsatol>
 8001b90:	4603      	mov	r3, r0
 8001b92:	603b      	str	r3, [r7, #0]
  uint32_t hundred1000ths_of_minute = (left_of_decimal % 100u) * 100000u;
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <parse_degrees+0xb8>)
 8001b98:	fba3 1302 	umull	r1, r3, r3, r2
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	2164      	movs	r1, #100	; 0x64
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <parse_degrees+0xbc>)
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	60bb      	str	r3, [r7, #8]
  for (p=_term; gpsisdigit(*p); ++p);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <parse_degrees+0xb4>)
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	e002      	b.n	8001bba <parse_degrees+0x36>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fe78 	bl	80018b4 <gpsisdigit>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f4      	bne.n	8001bb4 <parse_degrees+0x30>
  if (*p == '.')
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b2e      	cmp	r3, #46	; 0x2e
 8001bd0:	d11e      	bne.n	8001c10 <parse_degrees+0x8c>
  {
    uint32_t mult = 10000;
 8001bd2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001bd6:	607b      	str	r3, [r7, #4]
    while (gpsisdigit(*++p))
 8001bd8:	e00f      	b.n	8001bfa <parse_degrees+0x76>
    {
      hundred1000ths_of_minute += mult * (*p - '0');
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	3b30      	subs	r3, #48	; 0x30
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	fb03 f302 	mul.w	r3, r3, r2
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	4413      	add	r3, r2
 8001bec:	60bb      	str	r3, [r7, #8]
      mult /= 10;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <parse_degrees+0xc0>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	08db      	lsrs	r3, r3, #3
 8001bf8:	607b      	str	r3, [r7, #4]
    while (gpsisdigit(*++p))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe55 	bl	80018b4 <gpsisdigit>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e4      	bne.n	8001bda <parse_degrees+0x56>
    }
  }
  return (left_of_decimal / 100) * 1000000 + (hundred1000ths_of_minute + 3) / 6;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <parse_degrees+0xb8>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	095b      	lsrs	r3, r3, #5
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <parse_degrees+0xc4>)
 8001c1c:	fb02 f203 	mul.w	r2, r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	3303      	adds	r3, #3
 8001c24:	4909      	ldr	r1, [pc, #36]	; (8001c4c <parse_degrees+0xc8>)
 8001c26:	fba1 1303 	umull	r1, r3, r1, r3
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000424 	.word	0x20000424
 8001c3c:	51eb851f 	.word	0x51eb851f
 8001c40:	000186a0 	.word	0x000186a0
 8001c44:	cccccccd 	.word	0xcccccccd
 8001c48:	000f4240 	.word	0x000f4240
 8001c4c:	aaaaaaab 	.word	0xaaaaaaab

08001c50 <term_complete>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool term_complete()
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  if (_is_checksum_term)
 8001c56:	4ba6      	ldr	r3, [pc, #664]	; (8001ef0 <term_complete+0x2a0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d06a      	beq.n	8001d34 <term_complete+0xe4>
  {
    uint8_t checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
 8001c5e:	4ba5      	ldr	r3, [pc, #660]	; (8001ef4 <term_complete+0x2a4>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff06 	bl	8001a74 <from_hex>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	b2dc      	uxtb	r4, r3
 8001c70:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <term_complete+0x2a4>)
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fefd 	bl	8001a74 <from_hex>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4423      	add	r3, r4
 8001c80:	71fb      	strb	r3, [r7, #7]
    if (checksum == _parity)
 8001c82:	4b9d      	ldr	r3, [pc, #628]	; (8001ef8 <term_complete+0x2a8>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d14b      	bne.n	8001d24 <term_complete+0xd4>
    {
      if (_gps_data_good)
 8001c8c:	4b9b      	ldr	r3, [pc, #620]	; (8001efc <term_complete+0x2ac>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d04d      	beq.n	8001d30 <term_complete+0xe0>
      {
#ifndef _GPS_NO_STATS
        ++_good_sentences;
 8001c94:	4b9a      	ldr	r3, [pc, #616]	; (8001f00 <term_complete+0x2b0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b98      	ldr	r3, [pc, #608]	; (8001f00 <term_complete+0x2b0>)
 8001c9e:	701a      	strb	r2, [r3, #0]
#endif
        _last_time_fix = _new_time_fix;
 8001ca0:	4b98      	ldr	r3, [pc, #608]	; (8001f04 <term_complete+0x2b4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a98      	ldr	r2, [pc, #608]	; (8001f08 <term_complete+0x2b8>)
 8001ca6:	6013      	str	r3, [r2, #0]
        _last_position_fix = _new_position_fix;
 8001ca8:	4b98      	ldr	r3, [pc, #608]	; (8001f0c <term_complete+0x2bc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a98      	ldr	r2, [pc, #608]	; (8001f10 <term_complete+0x2c0>)
 8001cae:	6013      	str	r3, [r2, #0]

        switch(_sentence_type)
 8001cb0:	4b98      	ldr	r3, [pc, #608]	; (8001f14 <term_complete+0x2c4>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01a      	beq.n	8001cee <term_complete+0x9e>
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d131      	bne.n	8001d20 <term_complete+0xd0>
        {
        case _GPS_SENTENCE_GPRMC:
          _time      = _new_time;
 8001cbc:	4b96      	ldr	r3, [pc, #600]	; (8001f18 <term_complete+0x2c8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a96      	ldr	r2, [pc, #600]	; (8001f1c <term_complete+0x2cc>)
 8001cc2:	6013      	str	r3, [r2, #0]
          _date      = _new_date;
 8001cc4:	4b96      	ldr	r3, [pc, #600]	; (8001f20 <term_complete+0x2d0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a96      	ldr	r2, [pc, #600]	; (8001f24 <term_complete+0x2d4>)
 8001cca:	6013      	str	r3, [r2, #0]
          _latitude  = _new_latitude;
 8001ccc:	4b96      	ldr	r3, [pc, #600]	; (8001f28 <term_complete+0x2d8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a96      	ldr	r2, [pc, #600]	; (8001f2c <term_complete+0x2dc>)
 8001cd2:	6013      	str	r3, [r2, #0]
          _longitude = _new_longitude;
 8001cd4:	4b96      	ldr	r3, [pc, #600]	; (8001f30 <term_complete+0x2e0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a96      	ldr	r2, [pc, #600]	; (8001f34 <term_complete+0x2e4>)
 8001cda:	6013      	str	r3, [r2, #0]
          _speed     = _new_speed;
 8001cdc:	4b96      	ldr	r3, [pc, #600]	; (8001f38 <term_complete+0x2e8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a96      	ldr	r2, [pc, #600]	; (8001f3c <term_complete+0x2ec>)
 8001ce2:	6013      	str	r3, [r2, #0]
          _course    = _new_course;
 8001ce4:	4b96      	ldr	r3, [pc, #600]	; (8001f40 <term_complete+0x2f0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a96      	ldr	r2, [pc, #600]	; (8001f44 <term_complete+0x2f4>)
 8001cea:	6013      	str	r3, [r2, #0]
          break;
 8001cec:	e018      	b.n	8001d20 <term_complete+0xd0>
        case _GPS_SENTENCE_GPGGA:
          _altitude  = _new_altitude;
 8001cee:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <term_complete+0x2f8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a96      	ldr	r2, [pc, #600]	; (8001f4c <term_complete+0x2fc>)
 8001cf4:	6013      	str	r3, [r2, #0]
          _time      = _new_time;
 8001cf6:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <term_complete+0x2c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a88      	ldr	r2, [pc, #544]	; (8001f1c <term_complete+0x2cc>)
 8001cfc:	6013      	str	r3, [r2, #0]
          _latitude  = _new_latitude;
 8001cfe:	4b8a      	ldr	r3, [pc, #552]	; (8001f28 <term_complete+0x2d8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a8a      	ldr	r2, [pc, #552]	; (8001f2c <term_complete+0x2dc>)
 8001d04:	6013      	str	r3, [r2, #0]
          _longitude = _new_longitude;
 8001d06:	4b8a      	ldr	r3, [pc, #552]	; (8001f30 <term_complete+0x2e0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a8a      	ldr	r2, [pc, #552]	; (8001f34 <term_complete+0x2e4>)
 8001d0c:	6013      	str	r3, [r2, #0]
          _numsats   = _new_numsats;
 8001d0e:	4b90      	ldr	r3, [pc, #576]	; (8001f50 <term_complete+0x300>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	4b90      	ldr	r3, [pc, #576]	; (8001f54 <term_complete+0x304>)
 8001d14:	701a      	strb	r2, [r3, #0]
          _hdop      = _new_hdop;
 8001d16:	4b90      	ldr	r3, [pc, #576]	; (8001f58 <term_complete+0x308>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a90      	ldr	r2, [pc, #576]	; (8001f5c <term_complete+0x30c>)
 8001d1c:	6013      	str	r3, [r2, #0]
          break;
 8001d1e:	bf00      	nop
        }

        return true;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e14a      	b.n	8001fba <term_complete+0x36a>
      }
    }

#ifndef _GPS_NO_STATS
    else
      ++_failed_checksum;
 8001d24:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <term_complete+0x310>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <term_complete+0x310>)
 8001d2e:	701a      	strb	r2, [r3, #0]
#endif
    return false;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e142      	b.n	8001fba <term_complete+0x36a>
  }

  // the first term determines the sentence type
  if (_term_number == 0)
 8001d34:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <term_complete+0x314>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11e      	bne.n	8001d7a <term_complete+0x12a>
  {
    if (!gpsstrcmp(_term, _GPRMC_TERM))
 8001d3c:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <term_complete+0x318>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	486c      	ldr	r0, [pc, #432]	; (8001ef4 <term_complete+0x2a4>)
 8001d44:	f000 f969 	bl	800201a <gpsstrcmp>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <term_complete+0x106>
      _sentence_type = _GPS_SENTENCE_GPRMC;
 8001d4e:	4b71      	ldr	r3, [pc, #452]	; (8001f14 <term_complete+0x2c4>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	e00f      	b.n	8001d76 <term_complete+0x126>
    else if (!gpsstrcmp(_term, _GPGGA_TERM))
 8001d56:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <term_complete+0x31c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4865      	ldr	r0, [pc, #404]	; (8001ef4 <term_complete+0x2a4>)
 8001d5e:	f000 f95c 	bl	800201a <gpsstrcmp>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <term_complete+0x120>
      _sentence_type = _GPS_SENTENCE_GPGGA;
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <term_complete+0x2c4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e002      	b.n	8001d76 <term_complete+0x126>
    else
      _sentence_type = _GPS_SENTENCE_OTHER;
 8001d70:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <term_complete+0x2c4>)
 8001d72:	2202      	movs	r2, #2
 8001d74:	701a      	strb	r2, [r3, #0]
    return false;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e11f      	b.n	8001fba <term_complete+0x36a>
  }

  if (_sentence_type != _GPS_SENTENCE_OTHER && _term[0])
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <term_complete+0x2c4>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	f000 8115 	beq.w	8001fae <term_complete+0x35e>
 8001d84:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <term_complete+0x2a4>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8110 	beq.w	8001fae <term_complete+0x35e>
    switch(COMBINE(_sentence_type, _term_number))
 8001d8e:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <term_complete+0x2c4>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	015b      	lsls	r3, r3, #5
 8001d94:	4a73      	ldr	r2, [pc, #460]	; (8001f64 <term_complete+0x314>)
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	2b28      	cmp	r3, #40	; 0x28
 8001d9e:	f200 810b 	bhi.w	8001fb8 <term_complete+0x368>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <term_complete+0x158>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001e4d 	.word	0x08001e4d
 8001dac:	08001e77 	.word	0x08001e77
 8001db0:	08001e8f 	.word	0x08001e8f
 8001db4:	08001ea5 	.word	0x08001ea5
 8001db8:	08001eb3 	.word	0x08001eb3
 8001dbc:	08001f71 	.word	0x08001f71
 8001dc0:	08001f85 	.word	0x08001f85
 8001dc4:	08001f95 	.word	0x08001f95
 8001dc8:	08001fa1 	.word	0x08001fa1
 8001dcc:	08001fb9 	.word	0x08001fb9
 8001dd0:	08001fb9 	.word	0x08001fb9
 8001dd4:	08001fb9 	.word	0x08001fb9
 8001dd8:	08001fb9 	.word	0x08001fb9
 8001ddc:	08001fb9 	.word	0x08001fb9
 8001de0:	08001fb9 	.word	0x08001fb9
 8001de4:	08001fb9 	.word	0x08001fb9
 8001de8:	08001fb9 	.word	0x08001fb9
 8001dec:	08001fb9 	.word	0x08001fb9
 8001df0:	08001fb9 	.word	0x08001fb9
 8001df4:	08001fb9 	.word	0x08001fb9
 8001df8:	08001fb9 	.word	0x08001fb9
 8001dfc:	08001fb9 	.word	0x08001fb9
 8001e00:	08001fb9 	.word	0x08001fb9
 8001e04:	08001fb9 	.word	0x08001fb9
 8001e08:	08001fb9 	.word	0x08001fb9
 8001e0c:	08001fb9 	.word	0x08001fb9
 8001e10:	08001fb9 	.word	0x08001fb9
 8001e14:	08001fb9 	.word	0x08001fb9
 8001e18:	08001fb9 	.word	0x08001fb9
 8001e1c:	08001fb9 	.word	0x08001fb9
 8001e20:	08001fb9 	.word	0x08001fb9
 8001e24:	08001fb9 	.word	0x08001fb9
 8001e28:	08001e4d 	.word	0x08001e4d
 8001e2c:	08001e63 	.word	0x08001e63
 8001e30:	08001e77 	.word	0x08001e77
 8001e34:	08001e8f 	.word	0x08001e8f
 8001e38:	08001ea5 	.word	0x08001ea5
 8001e3c:	08001eb3 	.word	0x08001eb3
 8001e40:	08001ec7 	.word	0x08001ec7
 8001e44:	08001ed3 	.word	0x08001ed3
 8001e48:	08001edf 	.word	0x08001edf
  {
    case COMBINE(_GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(_GPS_SENTENCE_GPGGA, 1):
      _new_time = parse_decimal();
 8001e4c:	f7ff fe3a 	bl	8001ac4 <parse_decimal>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <term_complete+0x2c8>)
 8001e54:	6013      	str	r3, [r2, #0]
      _new_time_fix = millis();
 8001e56:	f7ff fd25 	bl	80018a4 <millis>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <term_complete+0x2b4>)
 8001e5e:	6013      	str	r3, [r2, #0]
      break;
 8001e60:	e0aa      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      _gps_data_good = _term[0] == 'A';
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <term_complete+0x2a4>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b41      	cmp	r3, #65	; 0x41
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <term_complete+0x2ac>)
 8001e72:	701a      	strb	r2, [r3, #0]
      break;
 8001e74:	e0a0      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPRMC, 3): // Latitude
    case COMBINE(_GPS_SENTENCE_GPGGA, 2):
      _new_latitude = parse_degrees();
 8001e76:	f7ff fe85 	bl	8001b84 <parse_degrees>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <term_complete+0x2d8>)
 8001e80:	601a      	str	r2, [r3, #0]
      _new_position_fix = millis();
 8001e82:	f7ff fd0f 	bl	80018a4 <millis>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <term_complete+0x2bc>)
 8001e8a:	6013      	str	r3, [r2, #0]
      break;
 8001e8c:	e094      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(_GPS_SENTENCE_GPGGA, 3):
      if (_term[0] == 'S')
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <term_complete+0x2a4>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b53      	cmp	r3, #83	; 0x53
 8001e94:	f040 808d 	bne.w	8001fb2 <term_complete+0x362>
        _new_latitude = -_new_latitude;
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <term_complete+0x2d8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	425b      	negs	r3, r3
 8001e9e:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <term_complete+0x2d8>)
 8001ea0:	6013      	str	r3, [r2, #0]
      break;
 8001ea2:	e086      	b.n	8001fb2 <term_complete+0x362>
    case COMBINE(_GPS_SENTENCE_GPRMC, 5): // Longitude
    case COMBINE(_GPS_SENTENCE_GPGGA, 4):
      _new_longitude = parse_degrees();
 8001ea4:	f7ff fe6e 	bl	8001b84 <parse_degrees>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <term_complete+0x2e0>)
 8001eae:	601a      	str	r2, [r3, #0]
      break;
 8001eb0:	e082      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(_GPS_SENTENCE_GPGGA, 5):
      if (_term[0] == 'W')
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <term_complete+0x2a4>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b57      	cmp	r3, #87	; 0x57
 8001eb8:	d17d      	bne.n	8001fb6 <term_complete+0x366>
        _new_longitude = -_new_longitude;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <term_complete+0x2e0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	425b      	negs	r3, r3
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <term_complete+0x2e0>)
 8001ec2:	6013      	str	r3, [r2, #0]
      break;
 8001ec4:	e077      	b.n	8001fb6 <term_complete+0x366>
    case COMBINE(_GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      _new_speed = parse_decimal();
 8001ec6:	f7ff fdfd 	bl	8001ac4 <parse_decimal>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <term_complete+0x2e8>)
 8001ece:	6013      	str	r3, [r2, #0]
      break;
 8001ed0:	e072      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      _new_course = parse_decimal();
 8001ed2:	f7ff fdf7 	bl	8001ac4 <parse_decimal>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <term_complete+0x2f0>)
 8001eda:	6013      	str	r3, [r2, #0]
      break;
 8001edc:	e06c      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      _new_date = gpsatol(_term);
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <term_complete+0x2a4>)
 8001ee0:	f000 f87a 	bl	8001fd8 <gpsatol>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <term_complete+0x2d0>)
 8001eea:	601a      	str	r2, [r3, #0]
      break;
 8001eec:	e064      	b.n	8001fb8 <term_complete+0x368>
 8001eee:	bf00      	nop
 8001ef0:	20000470 	.word	0x20000470
 8001ef4:	20000424 	.word	0x20000424
 8001ef8:	20000497 	.word	0x20000497
 8001efc:	20000455 	.word	0x20000455
 8001f00:	2000045c 	.word	0x2000045c
 8001f04:	20000448 	.word	0x20000448
 8001f08:	20000444 	.word	0x20000444
 8001f0c:	20000478 	.word	0x20000478
 8001f10:	2000047c 	.word	0x2000047c
 8001f14:	20000420 	.word	0x20000420
 8001f18:	20000464 	.word	0x20000464
 8001f1c:	2000046c 	.word	0x2000046c
 8001f20:	20000474 	.word	0x20000474
 8001f24:	2000041c 	.word	0x2000041c
 8001f28:	2000043c 	.word	0x2000043c
 8001f2c:	2000048c 	.word	0x2000048c
 8001f30:	20000468 	.word	0x20000468
 8001f34:	20000488 	.word	0x20000488
 8001f38:	20000480 	.word	0x20000480
 8001f3c:	20000440 	.word	0x20000440
 8001f40:	20000438 	.word	0x20000438
 8001f44:	20000450 	.word	0x20000450
 8001f48:	20000490 	.word	0x20000490
 8001f4c:	20000434 	.word	0x20000434
 8001f50:	20000494 	.word	0x20000494
 8001f54:	20000495 	.word	0x20000495
 8001f58:	20000458 	.word	0x20000458
 8001f5c:	20000484 	.word	0x20000484
 8001f60:	20000471 	.word	0x20000471
 8001f64:	20000496 	.word	0x20000496
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004
    case COMBINE(_GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      _gps_data_good = _term[0] > '0';
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <term_complete+0x374>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b30      	cmp	r3, #48	; 0x30
 8001f76:	bf8c      	ite	hi
 8001f78:	2301      	movhi	r3, #1
 8001f7a:	2300      	movls	r3, #0
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <term_complete+0x378>)
 8001f80:	701a      	strb	r2, [r3, #0]
      break;
 8001f82:	e019      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      _new_numsats = (uint8_t)atoi(_term);
 8001f84:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <term_complete+0x374>)
 8001f86:	f00a fb39 	bl	800c5fc <atoi>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <term_complete+0x37c>)
 8001f90:	701a      	strb	r2, [r3, #0]
      break;
 8001f92:	e011      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPGGA, 8): // HDOP
      _new_hdop = parse_decimal();
 8001f94:	f7ff fd96 	bl	8001ac4 <parse_decimal>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <term_complete+0x380>)
 8001f9c:	6013      	str	r3, [r2, #0]
      break;
 8001f9e:	e00b      	b.n	8001fb8 <term_complete+0x368>
    case COMBINE(_GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      _new_altitude = parse_decimal();
 8001fa0:	f7ff fd90 	bl	8001ac4 <parse_decimal>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <term_complete+0x384>)
 8001faa:	601a      	str	r2, [r3, #0]
      break;
 8001fac:	e004      	b.n	8001fb8 <term_complete+0x368>
  }

  return false;
 8001fae:	bf00      	nop
 8001fb0:	e002      	b.n	8001fb8 <term_complete+0x368>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e000      	b.n	8001fb8 <term_complete+0x368>
      break;
 8001fb6:	bf00      	nop
  return false;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000424 	.word	0x20000424
 8001fc8:	20000455 	.word	0x20000455
 8001fcc:	20000494 	.word	0x20000494
 8001fd0:	20000458 	.word	0x20000458
 8001fd4:	20000490 	.word	0x20000490

08001fd8 <gpsatol>:

int32_t gpsatol(const uint8_t *str)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*str))
 8001fe4:	e00c      	b.n	8002000 <gpsatol+0x28>
    ret = 10 * ret + *str++ - '0';
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3b30      	subs	r3, #48	; 0x30
 8001ffe:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*str))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fc55 	bl	80018b4 <gpsisdigit>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ea      	bne.n	8001fe6 <gpsatol+0xe>
  return ret;
 8002010:	68fb      	ldr	r3, [r7, #12]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <gpsstrcmp>:

int16_t gpsstrcmp(const uint8_t *str1, const uint8_t *str2)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  while (*str1 && *str1 == *str2)
 8002024:	e005      	b.n	8002032 <gpsstrcmp+0x18>
    ++str1, ++str2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3301      	adds	r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	603b      	str	r3, [r7, #0]
  while (*str1 && *str1 == *str2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <gpsstrcmp+0x2c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d0ef      	beq.n	8002026 <gpsstrcmp+0xc>
  return *str1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b21b      	sxth	r3, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <distance_between>:

/* static */
float_t distance_between (float_t lat1, float_t long1, float_t lat2, float_t long2)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b08c      	sub	sp, #48	; 0x30
 800205c:	af00      	add	r7, sp, #0
 800205e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002062:	edc7 0a02 	vstr	s1, [r7, #8]
 8002066:	ed87 1a01 	vstr	s2, [r7, #4]
 800206a:	edc7 1a00 	vstr	s3, [r7]
  // returns distance in meters between two positions, both specified
  // as signed decimal-degrees latitude and longitude. Uses great-circle
  // distance computation for hypothetical sphere of radius 6372795 meters.
  // Because Earth is no exact sphere, rounding errors may be up to 0.5%.
  // Courtesy of Maarten Lamers
  float_t delta = radians(long1-long2);
 800206e:	68b8      	ldr	r0, [r7, #8]
 8002070:	f7fe fa0e 	bl	8000490 <__aeabi_f2d>
 8002074:	4604      	mov	r4, r0
 8002076:	460d      	mov	r5, r1
 8002078:	6838      	ldr	r0, [r7, #0]
 800207a:	f7fe fa09 	bl	8000490 <__aeabi_f2d>
 800207e:	a396      	add	r3, pc, #600	; (adr r3, 80022d8 <distance_between+0x280>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fa5c 	bl	8000540 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b92      	ldr	r3, [pc, #584]	; (80022e0 <distance_between+0x288>)
 8002096:	f7fe fb7d 	bl	8000794 <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	f7fe f895 	bl	80001d0 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fd1f 	bl	8000af0 <__aeabi_d2f>
 80020b2:	4603      	mov	r3, r0
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t sdlong = sin(delta);
 80020b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020b8:	f7fe f9ea 	bl	8000490 <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	ec43 2b10 	vmov	d0, r2, r3
 80020c4:	f008 ff08 	bl	800aed8 <sin>
 80020c8:	ec53 2b10 	vmov	r2, r3, d0
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7fe fd0e 	bl	8000af0 <__aeabi_d2f>
 80020d4:	4603      	mov	r3, r0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
  float_t cdlong = cos(delta);
 80020d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020da:	f7fe f9d9 	bl	8000490 <__aeabi_f2d>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	ec43 2b10 	vmov	d0, r2, r3
 80020e6:	f008 fea7 	bl	800ae38 <cos>
 80020ea:	ec53 2b10 	vmov	r2, r3, d0
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fcfd 	bl	8000af0 <__aeabi_d2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  lat1 = radians(lat1);
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f7fe f9c8 	bl	8000490 <__aeabi_f2d>
 8002100:	a375      	add	r3, pc, #468	; (adr r3, 80022d8 <distance_between+0x280>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fa1b 	bl	8000540 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	4b72      	ldr	r3, [pc, #456]	; (80022e0 <distance_between+0x288>)
 8002118:	f7fe fb3c 	bl	8000794 <__aeabi_ddiv>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	f7fe fce4 	bl	8000af0 <__aeabi_d2f>
 8002128:	4603      	mov	r3, r0
 800212a:	60fb      	str	r3, [r7, #12]
  lat2 = radians(lat2);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe f9af 	bl	8000490 <__aeabi_f2d>
 8002132:	a369      	add	r3, pc, #420	; (adr r3, 80022d8 <distance_between+0x280>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe fa02 	bl	8000540 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4b65      	ldr	r3, [pc, #404]	; (80022e0 <distance_between+0x288>)
 800214a:	f7fe fb23 	bl	8000794 <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f7fe fccb 	bl	8000af0 <__aeabi_d2f>
 800215a:	4603      	mov	r3, r0
 800215c:	607b      	str	r3, [r7, #4]
  float_t slat1 = sin(lat1);
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7fe f996 	bl	8000490 <__aeabi_f2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	ec43 2b10 	vmov	d0, r2, r3
 800216c:	f008 feb4 	bl	800aed8 <sin>
 8002170:	ec53 2b10 	vmov	r2, r3, d0
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fcba 	bl	8000af0 <__aeabi_d2f>
 800217c:	4603      	mov	r3, r0
 800217e:	623b      	str	r3, [r7, #32]
  float_t clat1 = cos(lat1);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7fe f985 	bl	8000490 <__aeabi_f2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	ec43 2b10 	vmov	d0, r2, r3
 800218e:	f008 fe53 	bl	800ae38 <cos>
 8002192:	ec53 2b10 	vmov	r2, r3, d0
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fca9 	bl	8000af0 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	61fb      	str	r3, [r7, #28]
  float_t slat2 = sin(lat2);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe f974 	bl	8000490 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	ec43 2b10 	vmov	d0, r2, r3
 80021b0:	f008 fe92 	bl	800aed8 <sin>
 80021b4:	ec53 2b10 	vmov	r2, r3, d0
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7fe fc98 	bl	8000af0 <__aeabi_d2f>
 80021c0:	4603      	mov	r3, r0
 80021c2:	61bb      	str	r3, [r7, #24]
  float_t clat2 = cos(lat2);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe f963 	bl	8000490 <__aeabi_f2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	ec43 2b10 	vmov	d0, r2, r3
 80021d2:	f008 fe31 	bl	800ae38 <cos>
 80021d6:	ec53 2b10 	vmov	r2, r3, d0
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fc87 	bl	8000af0 <__aeabi_d2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	617b      	str	r3, [r7, #20]
  delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
 80021e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80021ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80021ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f2:	edd7 6a08 	vldr	s13, [r7, #32]
 80021f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  delta = sq(delta);
 800220e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002212:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002216:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  delta += sq(clat2 * sdlong);
 800221a:	ed97 7a05 	vldr	s14, [r7, #20]
 800221e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002226:	edd7 7a05 	vldr	s15, [r7, #20]
 800222a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  delta = sqrt(delta);
 8002242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002244:	f7fe f924 	bl	8000490 <__aeabi_f2d>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	ec43 2b10 	vmov	d0, r2, r3
 8002250:	f008 fe98 	bl	800af84 <sqrt>
 8002254:	ec53 2b10 	vmov	r2, r3, d0
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fc48 	bl	8000af0 <__aeabi_d2f>
 8002260:	4603      	mov	r3, r0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
 8002264:	ed97 7a08 	vldr	s14, [r7, #32]
 8002268:	edd7 7a06 	vldr	s15, [r7, #24]
 800226c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002270:	edd7 6a07 	vldr	s13, [r7, #28]
 8002274:	edd7 7a05 	vldr	s15, [r7, #20]
 8002278:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800227c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002288:	edc7 7a04 	vstr	s15, [r7, #16]
  delta = atan2(delta, denom);
 800228c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800228e:	f7fe f8ff 	bl	8000490 <__aeabi_f2d>
 8002292:	4604      	mov	r4, r0
 8002294:	460d      	mov	r5, r1
 8002296:	6938      	ldr	r0, [r7, #16]
 8002298:	f7fe f8fa 	bl	8000490 <__aeabi_f2d>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	ec43 2b11 	vmov	d1, r2, r3
 80022a4:	ec45 4b10 	vmov	d0, r4, r5
 80022a8:	f008 fe6a 	bl	800af80 <atan2>
 80022ac:	ec53 2b10 	vmov	r2, r3, d0
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f7fe fc1c 	bl	8000af0 <__aeabi_d2f>
 80022b8:	4603      	mov	r3, r0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return delta * 6372795;
 80022bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80022e4 <distance_between+0x28c>
 80022c4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80022c8:	eeb0 0a67 	vmov.f32	s0, s15
 80022cc:	3730      	adds	r7, #48	; 0x30
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bdb0      	pop	{r4, r5, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	f3af 8000 	nop.w
 80022d8:	54442d18 	.word	0x54442d18
 80022dc:	400921fb 	.word	0x400921fb
 80022e0:	40668000 	.word	0x40668000
 80022e4:	4ac27b76 	.word	0x4ac27b76

080022e8 <course_to>:

float_t course_to (float_t lat1, float_t long1, float_t lat2, float_t long2)
{
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80022f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80022f6:	ed87 1a01 	vstr	s2, [r7, #4]
 80022fa:	edc7 1a00 	vstr	s3, [r7]
  // returns course in degrees (North=0, West=270) from position 1 to position 2,
  // both specified as signed decimal-degrees latitude and longitude.
  // Because Earth is no exact sphere, calculated course may be off by a tiny fraction.
  // Courtesy of Maarten Lamers
  float_t dlon = radians(long2-long1);
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f7fe f8c6 	bl	8000490 <__aeabi_f2d>
 8002304:	4604      	mov	r4, r0
 8002306:	460d      	mov	r5, r1
 8002308:	68b8      	ldr	r0, [r7, #8]
 800230a:	f7fe f8c1 	bl	8000490 <__aeabi_f2d>
 800230e:	a392      	add	r3, pc, #584	; (adr r3, 8002558 <course_to+0x270>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe f914 	bl	8000540 <__aeabi_dmul>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b90      	ldr	r3, [pc, #576]	; (8002568 <course_to+0x280>)
 8002326:	f7fe fa35 	bl	8000794 <__aeabi_ddiv>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fd ff4d 	bl	80001d0 <__aeabi_dsub>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f7fe fbd7 	bl	8000af0 <__aeabi_d2f>
 8002342:	4603      	mov	r3, r0
 8002344:	61bb      	str	r3, [r7, #24]
  lat1 = radians(lat1);
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7fe f8a2 	bl	8000490 <__aeabi_f2d>
 800234c:	a382      	add	r3, pc, #520	; (adr r3, 8002558 <course_to+0x270>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe f8f5 	bl	8000540 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	4b81      	ldr	r3, [pc, #516]	; (8002568 <course_to+0x280>)
 8002364:	f7fe fa16 	bl	8000794 <__aeabi_ddiv>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fbbe 	bl	8000af0 <__aeabi_d2f>
 8002374:	4603      	mov	r3, r0
 8002376:	60fb      	str	r3, [r7, #12]
  lat2 = radians(lat2);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7fe f889 	bl	8000490 <__aeabi_f2d>
 800237e:	a376      	add	r3, pc, #472	; (adr r3, 8002558 <course_to+0x270>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f7fe f8dc 	bl	8000540 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	4b74      	ldr	r3, [pc, #464]	; (8002568 <course_to+0x280>)
 8002396:	f7fe f9fd 	bl	8000794 <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fba5 	bl	8000af0 <__aeabi_d2f>
 80023a6:	4603      	mov	r3, r0
 80023a8:	607b      	str	r3, [r7, #4]
  float_t a1 = sin(dlon) * cos(lat2);
 80023aa:	69b8      	ldr	r0, [r7, #24]
 80023ac:	f7fe f870 	bl	8000490 <__aeabi_f2d>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	ec43 2b10 	vmov	d0, r2, r3
 80023b8:	f008 fd8e 	bl	800aed8 <sin>
 80023bc:	ec55 4b10 	vmov	r4, r5, d0
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe f865 	bl	8000490 <__aeabi_f2d>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	ec43 2b10 	vmov	d0, r2, r3
 80023ce:	f008 fd33 	bl	800ae38 <cos>
 80023d2:	ec53 2b10 	vmov	r2, r3, d0
 80023d6:	4620      	mov	r0, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	f7fe f8b1 	bl	8000540 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe fb83 	bl	8000af0 <__aeabi_d2f>
 80023ea:	4603      	mov	r3, r0
 80023ec:	617b      	str	r3, [r7, #20]
  float_t a2 = sin(lat1) * cos(lat2) * cos(dlon);
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7fe f84e 	bl	8000490 <__aeabi_f2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	ec43 2b10 	vmov	d0, r2, r3
 80023fc:	f008 fd6c 	bl	800aed8 <sin>
 8002400:	ec55 4b10 	vmov	r4, r5, d0
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7fe f843 	bl	8000490 <__aeabi_f2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	ec43 2b10 	vmov	d0, r2, r3
 8002412:	f008 fd11 	bl	800ae38 <cos>
 8002416:	ec53 2b10 	vmov	r2, r3, d0
 800241a:	4620      	mov	r0, r4
 800241c:	4629      	mov	r1, r5
 800241e:	f7fe f88f 	bl	8000540 <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4614      	mov	r4, r2
 8002428:	461d      	mov	r5, r3
 800242a:	69b8      	ldr	r0, [r7, #24]
 800242c:	f7fe f830 	bl	8000490 <__aeabi_f2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	ec43 2b10 	vmov	d0, r2, r3
 8002438:	f008 fcfe 	bl	800ae38 <cos>
 800243c:	ec53 2b10 	vmov	r2, r3, d0
 8002440:	4620      	mov	r0, r4
 8002442:	4629      	mov	r1, r5
 8002444:	f7fe f87c 	bl	8000540 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7fe fb4e 	bl	8000af0 <__aeabi_d2f>
 8002454:	4603      	mov	r3, r0
 8002456:	61fb      	str	r3, [r7, #28]
  a2 = cos(lat1) * sin(lat2) - a2;
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7fe f819 	bl	8000490 <__aeabi_f2d>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	ec43 2b10 	vmov	d0, r2, r3
 8002466:	f008 fce7 	bl	800ae38 <cos>
 800246a:	ec55 4b10 	vmov	r4, r5, d0
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f80e 	bl	8000490 <__aeabi_f2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	ec43 2b10 	vmov	d0, r2, r3
 800247c:	f008 fd2c 	bl	800aed8 <sin>
 8002480:	ec53 2b10 	vmov	r2, r3, d0
 8002484:	4620      	mov	r0, r4
 8002486:	4629      	mov	r1, r5
 8002488:	f7fe f85a 	bl	8000540 <__aeabi_dmul>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4614      	mov	r4, r2
 8002492:	461d      	mov	r5, r3
 8002494:	69f8      	ldr	r0, [r7, #28]
 8002496:	f7fd fffb 	bl	8000490 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fd fe95 	bl	80001d0 <__aeabi_dsub>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb1f 	bl	8000af0 <__aeabi_d2f>
 80024b2:	4603      	mov	r3, r0
 80024b4:	61fb      	str	r3, [r7, #28]
  a2 = atan2(a1, a2);
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7fd ffea 	bl	8000490 <__aeabi_f2d>
 80024bc:	4604      	mov	r4, r0
 80024be:	460d      	mov	r5, r1
 80024c0:	69f8      	ldr	r0, [r7, #28]
 80024c2:	f7fd ffe5 	bl	8000490 <__aeabi_f2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	ec43 2b11 	vmov	d1, r2, r3
 80024ce:	ec45 4b10 	vmov	d0, r4, r5
 80024d2:	f008 fd55 	bl	800af80 <atan2>
 80024d6:	ec53 2b10 	vmov	r2, r3, d0
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f7fe fb07 	bl	8000af0 <__aeabi_d2f>
 80024e2:	4603      	mov	r3, r0
 80024e4:	61fb      	str	r3, [r7, #28]
  if (a2 < 0.0)
 80024e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80024ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	d50f      	bpl.n	8002514 <course_to+0x22c>
  {
    a2 += TWO_PI;
 80024f4:	69f8      	ldr	r0, [r7, #28]
 80024f6:	f7fd ffcb 	bl	8000490 <__aeabi_f2d>
 80024fa:	a319      	add	r3, pc, #100	; (adr r3, 8002560 <course_to+0x278>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fd fe68 	bl	80001d4 <__adddf3>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe faf0 	bl	8000af0 <__aeabi_d2f>
 8002510:	4603      	mov	r3, r0
 8002512:	61fb      	str	r3, [r7, #28]
  }
  return degrees(a2);
 8002514:	69f8      	ldr	r0, [r7, #28]
 8002516:	f7fd ffbb 	bl	8000490 <__aeabi_f2d>
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <course_to+0x280>)
 8002520:	f7fe f80e 	bl	8000540 <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	a30a      	add	r3, pc, #40	; (adr r3, 8002558 <course_to+0x270>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f7fe f92f 	bl	8000794 <__aeabi_ddiv>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f7fe fad7 	bl	8000af0 <__aeabi_d2f>
 8002542:	4603      	mov	r3, r0
 8002544:	ee07 3a90 	vmov	s15, r3
}
 8002548:	eeb0 0a67 	vmov.f32	s0, s15
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bdb0      	pop	{r4, r5, r7, pc}
 8002552:	bf00      	nop
 8002554:	f3af 8000 	nop.w
 8002558:	54442d18 	.word	0x54442d18
 800255c:	400921fb 	.word	0x400921fb
 8002560:	54442d18 	.word	0x54442d18
 8002564:	401921fb 	.word	0x401921fb
 8002568:	40668000 	.word	0x40668000

0800256c <get_position>:


// lat/int32_t in MILLIONTHs of a degree and age of fix in milliseconds
// (note: versions 12 and earlier gave this value in 100,000ths of a degree.
void get_position(int32_t *latitude, int32_t *longitude, uint32_t *fix_age)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  if (latitude) *latitude = _latitude;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <get_position+0x1a>
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <get_position+0x58>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]
  if (longitude) *longitude = _longitude;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <get_position+0x28>
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <get_position+0x5c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	601a      	str	r2, [r3, #0]
  if (fix_age) *fix_age = _last_position_fix == GPS_INVALID_FIX_TIME ?
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00f      	beq.n	80025ba <get_position+0x4e>
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <get_position+0x60>)
 800259c:	681b      	ldr	r3, [r3, #0]
   GPS_INVALID_AGE : millis() - _last_position_fix;
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d006      	beq.n	80025b2 <get_position+0x46>
 80025a4:	f7ff f97e 	bl	80018a4 <millis>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <get_position+0x60>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	e001      	b.n	80025b6 <get_position+0x4a>
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
  if (fix_age) *fix_age = _last_position_fix == GPS_INVALID_FIX_TIME ?
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000048c 	.word	0x2000048c
 80025c8:	20000488 	.word	0x20000488
 80025cc:	2000047c 	.word	0x2000047c

080025d0 <f_get_position>:
  if (age) *age = _last_time_fix == GPS_INVALID_FIX_TIME ?
   GPS_INVALID_AGE : millis() - _last_time_fix;
}

void f_get_position(float_t *latitude, float_t *longitude, uint32_t *fix_age)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  int32_t lat, lon;
  get_position(&lat, &lon, fix_age);
 80025dc:	f107 0110 	add.w	r1, r7, #16
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ffc0 	bl	800256c <get_position>
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <f_get_position+0x90>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d010      	beq.n	8002616 <f_get_position+0x46>
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff38 	bl	800046c <__aeabi_i2d>
 80025fc:	a316      	add	r3, pc, #88	; (adr r3, 8002658 <f_get_position+0x88>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fe f8c7 	bl	8000794 <__aeabi_ddiv>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fa6f 	bl	8000af0 <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
 8002614:	e000      	b.n	8002618 <f_get_position+0x48>
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <f_get_position+0x94>)
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	6013      	str	r3, [r2, #0]
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	4a10      	ldr	r2, [pc, #64]	; (8002660 <f_get_position+0x90>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d010      	beq.n	8002646 <f_get_position+0x76>
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff20 	bl	800046c <__aeabi_i2d>
 800262c:	a30a      	add	r3, pc, #40	; (adr r3, 8002658 <f_get_position+0x88>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fe f8af 	bl	8000794 <__aeabi_ddiv>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fa57 	bl	8000af0 <__aeabi_d2f>
 8002642:	4603      	mov	r3, r0
 8002644:	e000      	b.n	8002648 <f_get_position+0x78>
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <f_get_position+0x94>)
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	f3af 8000 	nop.w
 8002658:	00000000 	.word	0x00000000
 800265c:	412e8480 	.word	0x412e8480
 8002660:	3b9ac9ff 	.word	0x3b9ac9ff
 8002664:	447a0000 	.word	0x447a0000

08002668 <satellites>:

  // speed in last full GPRMC sentence in 100ths of a knot
uint32_t speed() { return _speed; }

  // satellites used in last full GPGGA sentence
uint8_t satellites() { return _numsats; }
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <satellites+0x14>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000495 	.word	0x20000495

08002680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_DMA_Init+0x6c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <MX_DMA_Init+0x6c>)
 8002690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_DMA_Init+0x6c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	200b      	movs	r0, #11
 80026a8:	f002 f819 	bl	80046de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026ac:	200b      	movs	r0, #11
 80026ae:	f002 f832 	bl	8004716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	200c      	movs	r0, #12
 80026b8:	f002 f811 	bl	80046de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026bc:	200c      	movs	r0, #12
 80026be:	f002 f82a 	bl	8004716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2010      	movs	r0, #16
 80026c8:	f002 f809 	bl	80046de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026cc:	2010      	movs	r0, #16
 80026ce:	f002 f822 	bl	8004716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	2011      	movs	r0, #17
 80026d8:	f002 f801 	bl	80046de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026dc:	2011      	movs	r0, #17
 80026de:	f002 f81a 	bl	8004716 <HAL_NVIC_EnableIRQ>

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08c      	sub	sp, #48	; 0x30
 80026f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f6:	f107 031c 	add.w	r3, r7, #28
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b68      	ldr	r3, [pc, #416]	; (80028ac <MX_GPIO_Init+0x1bc>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a67      	ldr	r2, [pc, #412]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002710:	f043 0310 	orr.w	r3, r3, #16
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b65      	ldr	r3, [pc, #404]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	4b61      	ldr	r3, [pc, #388]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a60      	ldr	r2, [pc, #384]	; (80028ac <MX_GPIO_Init+0x1bc>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a59      	ldr	r2, [pc, #356]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b57      	ldr	r3, [pc, #348]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b53      	ldr	r3, [pc, #332]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a52      	ldr	r2, [pc, #328]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b50      	ldr	r3, [pc, #320]	; (80028ac <MX_GPIO_Init+0x1bc>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <MX_GPIO_Init+0x1bc>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b49      	ldr	r3, [pc, #292]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	4b45      	ldr	r3, [pc, #276]	; (80028ac <MX_GPIO_Init+0x1bc>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a44      	ldr	r2, [pc, #272]	; (80028ac <MX_GPIO_Init+0x1bc>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b42      	ldr	r3, [pc, #264]	; (80028ac <MX_GPIO_Init+0x1bc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2138      	movs	r1, #56	; 0x38
 80027b2:	483f      	ldr	r0, [pc, #252]	; (80028b0 <MX_GPIO_Init+0x1c0>)
 80027b4:	f002 fd76 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027be:	483d      	ldr	r0, [pc, #244]	; (80028b4 <MX_GPIO_Init+0x1c4>)
 80027c0:	f002 fd70 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	2101      	movs	r1, #1
 80027c8:	483a      	ldr	r0, [pc, #232]	; (80028b4 <MX_GPIO_Init+0x1c4>)
 80027ca:	f002 fd6b 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80027ce:	2200      	movs	r2, #0
 80027d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80027d4:	4838      	ldr	r0, [pc, #224]	; (80028b8 <MX_GPIO_Init+0x1c8>)
 80027d6:	f002 fd65 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80027da:	2200      	movs	r2, #0
 80027dc:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 80027e0:	4836      	ldr	r0, [pc, #216]	; (80028bc <MX_GPIO_Init+0x1cc>)
 80027e2:	f002 fd5f 	bl	80052a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80027e6:	2338      	movs	r3, #56	; 0x38
 80027e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	4619      	mov	r1, r3
 80027fc:	482c      	ldr	r0, [pc, #176]	; (80028b0 <MX_GPIO_Init+0x1c0>)
 80027fe:	f002 fbb5 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 8002802:	f242 0301 	movw	r3, #8193	; 0x2001
 8002806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	4826      	ldr	r0, [pc, #152]	; (80028b4 <MX_GPIO_Init+0x1c4>)
 800281c:	f002 fba6 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002820:	2304      	movs	r3, #4
 8002822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4619      	mov	r1, r3
 8002832:	4821      	ldr	r0, [pc, #132]	; (80028b8 <MX_GPIO_Init+0x1c8>)
 8002834:	f002 fb9a 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002838:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800283c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283e:	2301      	movs	r3, #1
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	4819      	ldr	r0, [pc, #100]	; (80028b8 <MX_GPIO_Init+0x1c8>)
 8002852:	f002 fb8b 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002856:	f44f 6371 	mov.w	r3, #3856	; 0xf10
 800285a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285c:	2301      	movs	r3, #1
 800285e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	4813      	ldr	r0, [pc, #76]	; (80028bc <MX_GPIO_Init+0x1cc>)
 8002870:	f002 fb7c 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002874:	2320      	movs	r3, #32
 8002876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	4619      	mov	r1, r3
 8002886:	480d      	ldr	r0, [pc, #52]	; (80028bc <MX_GPIO_Init+0x1cc>)
 8002888:	f002 fb70 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800288c:	2302      	movs	r3, #2
 800288e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_GPIO_Init+0x1d0>)
 8002892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	4619      	mov	r1, r3
 800289e:	4804      	ldr	r0, [pc, #16]	; (80028b0 <MX_GPIO_Init+0x1c0>)
 80028a0:	f002 fb64 	bl	8004f6c <HAL_GPIO_Init>

}
 80028a4:	bf00      	nop
 80028a6:	3730      	adds	r7, #48	; 0x30
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020400 	.word	0x40020400
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	10120000 	.word	0x10120000

080028c4 <getGPS>:
int16_t compass_heading = 0;
int16_t desired_heading = 0;
int16_t heading_A = 0, heading_B = 0;
float_t waypoint_lat = 0;
float_t waypoint_lon = 0;
void getGPS(){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  while(HAL_UART_Receive(&huart2, &byte_gps, 1, 100)==HAL_OK){
 80028c8:	e004      	b.n	80028d4 <getGPS+0x10>
    encode(byte_gps);
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <getGPS+0x28>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f808 	bl	80018e4 <encode>
  while(HAL_UART_Receive(&huart2, &byte_gps, 1, 100)==HAL_OK){
 80028d4:	2364      	movs	r3, #100	; 0x64
 80028d6:	2201      	movs	r2, #1
 80028d8:	4904      	ldr	r1, [pc, #16]	; (80028ec <getGPS+0x28>)
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <getGPS+0x2c>)
 80028dc:	f007 fb1b 	bl	8009f16 <HAL_UART_Receive>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f1      	beq.n	80028ca <getGPS+0x6>
  }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200000dc 	.word	0x200000dc
 80028f0:	200008a8 	.word	0x200008a8

080028f4 <setWaypoint>:
void setWaypoint(){
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  //may be used to set Waypoint From Raspberry pi
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	0000      	movs	r0, r0
 8002904:	0000      	movs	r0, r0
	...

08002908 <getCompass>:
void clearWaypoint(){

}
void getCompass(){
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  MPU9250_GetData(Acc, Mag, Gyr);
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <getCompass+0xc8>)
 8002910:	4930      	ldr	r1, [pc, #192]	; (80029d4 <getCompass+0xcc>)
 8002912:	4831      	ldr	r0, [pc, #196]	; (80029d8 <getCompass+0xd0>)
 8002914:	f7fe fc62 	bl	80011dc <MPU9250_GetData>
  float_t heading = atan2(Mag[2], Mag[1]);
 8002918:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <getCompass+0xcc>)
 800291a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fda4 	bl	800046c <__aeabi_i2d>
 8002924:	4604      	mov	r4, r0
 8002926:	460d      	mov	r5, r1
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <getCompass+0xcc>)
 800292a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fd9c 	bl	800046c <__aeabi_i2d>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	ec43 2b11 	vmov	d1, r2, r3
 800293c:	ec45 4b10 	vmov	d0, r4, r5
 8002940:	f008 fb1e 	bl	800af80 <atan2>
 8002944:	ec53 2b10 	vmov	r2, r3, d0
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7fe f8d0 	bl	8000af0 <__aeabi_d2f>
 8002950:	4603      	mov	r3, r0
 8002952:	607b      	str	r3, [r7, #4]
  if(heading < 0)
 8002954:	edd7 7a01 	vldr	s15, [r7, #4]
 8002958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002960:	d50f      	bpl.n	8002982 <getCompass+0x7a>
    heading += 2 * M_PI;
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fd fd94 	bl	8000490 <__aeabi_f2d>
 8002968:	a315      	add	r3, pc, #84	; (adr r3, 80029c0 <getCompass+0xb8>)
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f7fd fc31 	bl	80001d4 <__adddf3>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f7fe f8b9 	bl	8000af0 <__aeabi_d2f>
 800297e:	4603      	mov	r3, r0
 8002980:	607b      	str	r3, [r7, #4]
  compass_heading = (int16_t)(heading * 180/M_PI);
 8002982:	edd7 7a01 	vldr	s15, [r7, #4]
 8002986:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80029dc <getCompass+0xd4>
 800298a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298e:	ee17 0a90 	vmov	r0, s15
 8002992:	f7fd fd7d 	bl	8000490 <__aeabi_f2d>
 8002996:	a30c      	add	r3, pc, #48	; (adr r3, 80029c8 <getCompass+0xc0>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fd fefa 	bl	8000794 <__aeabi_ddiv>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f87a 	bl	8000aa0 <__aeabi_d2iz>
 80029ac:	4603      	mov	r3, r0
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <getCompass+0xd8>)
 80029b2:	801a      	strh	r2, [r3, #0]
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdb0      	pop	{r4, r5, r7, pc}
 80029bc:	f3af 8000 	nop.w
 80029c0:	54442d18 	.word	0x54442d18
 80029c4:	401921fb 	.word	0x401921fb
 80029c8:	54442d18 	.word	0x54442d18
 80029cc:	400921fb 	.word	0x400921fb
 80029d0:	200000f0 	.word	0x200000f0
 80029d4:	200000e8 	.word	0x200000e8
 80029d8:	200000e0 	.word	0x200000e0
 80029dc:	43340000 	.word	0x43340000
 80029e0:	200000f6 	.word	0x200000f6
 80029e4:	00000000 	.word	0x00000000

080029e8 <goWaypoint>:

}
void gpsInfo(){

}
void goWaypoint(){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
  float_t cur_lat = 0, cur_lon = 0;
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
  uint32_t cur_age = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  getCompass();
 80029fe:	f7ff ff83 	bl	8002908 <getCompass>
  getGPS();
 8002a02:	f7ff ff5f 	bl	80028c4 <getGPS>
  f_get_position(&cur_lat, &cur_lon, &cur_age);
 8002a06:	1d3a      	adds	r2, r7, #4
 8002a08:	f107 0108 	add.w	r1, r7, #8
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fddd 	bl	80025d0 <f_get_position>
  cur_lat /= 0.0001;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fd39 	bl	8000490 <__aeabi_f2d>
 8002a1e:	a372      	add	r3, pc, #456	; (adr r3, 8002be8 <goWaypoint+0x200>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd feb6 	bl	8000794 <__aeabi_ddiv>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f7fe f85e 	bl	8000af0 <__aeabi_d2f>
 8002a34:	4603      	mov	r3, r0
 8002a36:	60fb      	str	r3, [r7, #12]
  cur_lat /= 10000;
 8002a38:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a3c:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002bf0 <goWaypoint+0x208>
 8002a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a44:	edc7 7a03 	vstr	s15, [r7, #12]
  cur_lon /= 0.0001;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd20 	bl	8000490 <__aeabi_f2d>
 8002a50:	a365      	add	r3, pc, #404	; (adr r3, 8002be8 <goWaypoint+0x200>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fe9d 	bl	8000794 <__aeabi_ddiv>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fe f845 	bl	8000af0 <__aeabi_d2f>
 8002a66:	4603      	mov	r3, r0
 8002a68:	60bb      	str	r3, [r7, #8]
  cur_lon /= 10000;
 8002a6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a6e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002bf0 <goWaypoint+0x208>
 8002a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a76:	edc7 7a02 	vstr	s15, [r7, #8]
  waypoint_lat /= 0.0001;
 8002a7a:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <goWaypoint+0x20c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd06 	bl	8000490 <__aeabi_f2d>
 8002a84:	a358      	add	r3, pc, #352	; (adr r3, 8002be8 <goWaypoint+0x200>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fe83 	bl	8000794 <__aeabi_ddiv>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f82b 	bl	8000af0 <__aeabi_d2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a55      	ldr	r2, [pc, #340]	; (8002bf4 <goWaypoint+0x20c>)
 8002a9e:	6013      	str	r3, [r2, #0]
  waypoint_lon /= 0.0001;
 8002aa0:	4b55      	ldr	r3, [pc, #340]	; (8002bf8 <goWaypoint+0x210>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fcf3 	bl	8000490 <__aeabi_f2d>
 8002aaa:	a34f      	add	r3, pc, #316	; (adr r3, 8002be8 <goWaypoint+0x200>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fe70 	bl	8000794 <__aeabi_ddiv>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f818 	bl	8000af0 <__aeabi_d2f>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4a4d      	ldr	r2, [pc, #308]	; (8002bf8 <goWaypoint+0x210>)
 8002ac4:	6013      	str	r3, [r2, #0]
  waypoint_lat /= 10000;
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <goWaypoint+0x20c>)
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002bf0 <goWaypoint+0x208>
 8002ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad4:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <goWaypoint+0x20c>)
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
  waypoint_lon /= 10000;
 8002ada:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <goWaypoint+0x210>)
 8002adc:	ed93 7a00 	vldr	s14, [r3]
 8002ae0:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002bf0 <goWaypoint+0x208>
 8002ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae8:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <goWaypoint+0x210>)
 8002aea:	edc3 7a00 	vstr	s15, [r3]
  float_t Distance_To_Home = distance_between(cur_lat, cur_lon, waypoint_lat, waypoint_lon);
 8002aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002af6:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <goWaypoint+0x20c>)
 8002af8:	edd3 6a00 	vldr	s13, [r3]
 8002afc:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <goWaypoint+0x210>)
 8002afe:	ed93 6a00 	vldr	s12, [r3]
 8002b02:	eef0 1a46 	vmov.f32	s3, s12
 8002b06:	eeb0 1a66 	vmov.f32	s2, s13
 8002b0a:	eef0 0a47 	vmov.f32	s1, s14
 8002b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b12:	f7ff faa1 	bl	8002058 <distance_between>
 8002b16:	ed87 0a07 	vstr	s0, [r7, #28]
  if(Distance_To_Home == 0){
 8002b1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b26:	d101      	bne.n	8002b2c <goWaypoint+0x144>
    Stop();
 8002b28:	f000 fdfe 	bl	8003728 <Stop>
  }
  float_t GPS_Course = course_to(cur_lat, cur_lon, waypoint_lat, waypoint_lon);
 8002b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b30:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <goWaypoint+0x20c>)
 8002b36:	edd3 6a00 	vldr	s13, [r3]
 8002b3a:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <goWaypoint+0x210>)
 8002b3c:	ed93 6a00 	vldr	s12, [r3]
 8002b40:	eef0 1a46 	vmov.f32	s3, s12
 8002b44:	eeb0 1a66 	vmov.f32	s2, s13
 8002b48:	eef0 0a47 	vmov.f32	s1, s14
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	f7ff fbca 	bl	80022e8 <course_to>
 8002b54:	ed87 0a06 	vstr	s0, [r7, #24]
  if(abs(GPS_Course - compass_heading) <= 15 ){
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <goWaypoint+0x214>)
 8002b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b66:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b72:	ee17 3a90 	vmov	r3, s15
 8002b76:	f113 0f0f 	cmn.w	r3, #15
 8002b7a:	db13      	blt.n	8002ba4 <goWaypoint+0x1bc>
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <goWaypoint+0x214>)
 8002b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b96:	ee17 3a90 	vmov	r3, s15
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	dc02      	bgt.n	8002ba4 <goWaypoint+0x1bc>
    mvForward();
 8002b9e:	f000 fd01 	bl	80035a4 <mvForward>
    if (z <= 180 && z >= 0){
      mvLeft();
    }
    else mvRight();
  }
}
 8002ba2:	e01d      	b.n	8002be0 <goWaypoint+0x1f8>
    uint16_t x = (GPS_Course - 360);
 8002ba4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ba8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002c00 <goWaypoint+0x218>
 8002bac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb4:	ee17 3a90 	vmov	r3, s15
 8002bb8:	82fb      	strh	r3, [r7, #22]
    uint16_t y = (compass_heading - (x));
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <goWaypoint+0x214>)
 8002bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	8afb      	ldrh	r3, [r7, #22]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	82bb      	strh	r3, [r7, #20]
    uint16_t z = (y - 360);
 8002bc8:	8abb      	ldrh	r3, [r7, #20]
 8002bca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bce:	827b      	strh	r3, [r7, #18]
    if (z <= 180 && z >= 0){
 8002bd0:	8a7b      	ldrh	r3, [r7, #18]
 8002bd2:	2bb4      	cmp	r3, #180	; 0xb4
 8002bd4:	d802      	bhi.n	8002bdc <goWaypoint+0x1f4>
      mvLeft();
 8002bd6:	f000 fd3b 	bl	8003650 <mvLeft>
}
 8002bda:	e001      	b.n	8002be0 <goWaypoint+0x1f8>
    else mvRight();
 8002bdc:	f000 fd6e 	bl	80036bc <mvRight>
}
 8002be0:	bf00      	nop
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	eb1c432d 	.word	0xeb1c432d
 8002bec:	3f1a36e2 	.word	0x3f1a36e2
 8002bf0:	461c4000 	.word	0x461c4000
 8002bf4:	200000f8 	.word	0x200000f8
 8002bf8:	200000fc 	.word	0x200000fc
 8002bfc:	200000f6 	.word	0x200000f6
 8002c00:	43b40000 	.word	0x43b40000

08002c04 <Startup>:
void Startup(){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  uint8_t Number_of_SATS = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  while (Number_of_SATS <=4){
 8002c0e:	e005      	b.n	8002c1c <Startup+0x18>
    getGPS();
 8002c10:	f7ff fe58 	bl	80028c4 <getGPS>
    Number_of_SATS = satellites();
 8002c14:	f7ff fd28 	bl	8002668 <satellites>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	71fb      	strb	r3, [r7, #7]
  while (Number_of_SATS <=4){
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d9f6      	bls.n	8002c10 <Startup+0xc>
  }
  setWaypoint();
 8002c22:	f7ff fe67 	bl	80028f4 <setWaypoint>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <MX_I2C1_Init+0x54>)
 8002c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c3c:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <MX_I2C1_Init+0x58>)
 8002c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <MX_I2C1_Init+0x50>)
 8002c6e:	f002 fb33 	bl	80052d8 <HAL_I2C_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c78:	f000 fbbc 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200004f8 	.word	0x200004f8
 8002c84:	40005400 	.word	0x40005400
 8002c88:	00061a80 	.word	0x00061a80

08002c8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <HAL_I2C_MspInit+0x180>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f040 80aa 	bne.w	8002e04 <HAL_I2C_MspInit+0x178>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <HAL_I2C_MspInit+0x184>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_I2C_MspInit+0x184>)
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_I2C_MspInit+0x184>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ccc:	23c0      	movs	r3, #192	; 0xc0
 8002cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	484b      	ldr	r0, [pc, #300]	; (8002e14 <HAL_I2C_MspInit+0x188>)
 8002ce8:	f002 f940 	bl	8004f6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_I2C_MspInit+0x184>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	4a46      	ldr	r2, [pc, #280]	; (8002e10 <HAL_I2C_MspInit+0x184>)
 8002cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfc:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <HAL_I2C_MspInit+0x184>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d0a:	4a44      	ldr	r2, [pc, #272]	; (8002e1c <HAL_I2C_MspInit+0x190>)
 8002d0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002d0e:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d14:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d16:	4b40      	ldr	r3, [pc, #256]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d28:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002d36:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002d42:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d44:	2204      	movs	r2, #4
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002d4e:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002d54:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d5a:	482f      	ldr	r0, [pc, #188]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d5c:	f001 fcf6 	bl	800474c <HAL_DMA_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_MspInit+0xde>
    {
      Error_Handler();
 8002d66:	f000 fb45 	bl	80033f4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8002d70:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <HAL_I2C_MspInit+0x18c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002d78:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <HAL_I2C_MspInit+0x198>)
 8002d7a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d82:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002d86:	2240      	movs	r2, #64	; 0x40
 8002d88:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d90:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d96:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002db2:	2204      	movs	r2, #4
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002db8:	2203      	movs	r2, #3
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002dc8:	4815      	ldr	r0, [pc, #84]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002dca:	f001 fcbf 	bl	800474c <HAL_DMA_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_MspInit+0x14c>
    {
      Error_Handler();
 8002dd4:	f000 fb0e 	bl	80033f4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <HAL_I2C_MspInit+0x194>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	201f      	movs	r0, #31
 8002dea:	f001 fc78 	bl	80046de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002dee:	201f      	movs	r0, #31
 8002df0:	f001 fc91 	bl	8004716 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	2020      	movs	r0, #32
 8002dfa:	f001 fc70 	bl	80046de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002dfe:	2020      	movs	r0, #32
 8002e00:	f001 fc89 	bl	8004716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40005400 	.word	0x40005400
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020400 	.word	0x40020400
 8002e18:	2000054c 	.word	0x2000054c
 8002e1c:	40026010 	.word	0x40026010
 8002e20:	20000498 	.word	0x20000498
 8002e24:	400260a0 	.word	0x400260a0

08002e28 <HAL_UART_RxCpltCallback>:
void Initialize_AIGO(void);
void AIGO_Bluetooth(void);

void AvoidCollision(void);
void ReceiveLidar(void);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1){
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <HAL_UART_RxCpltCallback+0xb0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d132      	bne.n	8002ea0 <HAL_UART_RxCpltCallback+0x78>
    switch(byte_serial){
 8002e3a:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_UART_RxCpltCallback+0xb4>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	3b31      	subs	r3, #49	; 0x31
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d828      	bhi.n	8002e96 <HAL_UART_RxCpltCallback+0x6e>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_UART_RxCpltCallback+0x24>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e61 	.word	0x08002e61
 8002e50:	08002e6d 	.word	0x08002e6d
 8002e54:	08002e79 	.word	0x08002e79
 8002e58:	08002e85 	.word	0x08002e85
 8002e5c:	08002e91 	.word	0x08002e91
    case '1':
      mvForward(motor_speed);
 8002e60:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <HAL_UART_RxCpltCallback+0xb8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fb9d 	bl	80035a4 <mvForward>
      break;
 8002e6a:	e014      	b.n	8002e96 <HAL_UART_RxCpltCallback+0x6e>
    case '2':
      mvBackward(motor_speed);
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_UART_RxCpltCallback+0xb8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fbcb 	bl	800360c <mvBackward>
      break;
 8002e76:	e00e      	b.n	8002e96 <HAL_UART_RxCpltCallback+0x6e>
    case '3':
      mvLeft(motor_speed);
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_UART_RxCpltCallback+0xb8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fbe7 	bl	8003650 <mvLeft>
      break;
 8002e82:	e008      	b.n	8002e96 <HAL_UART_RxCpltCallback+0x6e>
    case '4':
      mvRight(motor_speed);
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <HAL_UART_RxCpltCallback+0xb8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fc17 	bl	80036bc <mvRight>
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_UART_RxCpltCallback+0x6e>
    case '5':
      Stop();
 8002e90:	f000 fc4a 	bl	8003728 <Stop>
      break;
 8002e94:	bf00      	nop
    }
    HAL_UART_Receive_IT(&huart1, &byte_serial, 1);
 8002e96:	2201      	movs	r2, #1
 8002e98:	4910      	ldr	r1, [pc, #64]	; (8002edc <HAL_UART_RxCpltCallback+0xb4>)
 8002e9a:	4812      	ldr	r0, [pc, #72]	; (8002ee4 <HAL_UART_RxCpltCallback+0xbc>)
 8002e9c:	f007 f8dd 	bl	800a05a <HAL_UART_Receive_IT>
  }
  if(huart->Instance == USART2){
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_UART_RxCpltCallback+0xc0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d106      	bne.n	8002eb8 <HAL_UART_RxCpltCallback+0x90>
    setWaypoint();
 8002eaa:	f7ff fd23 	bl	80028f4 <setWaypoint>
    HAL_UART_Receive_DMA(&huart2, waypoint, 32);
 8002eae:	2220      	movs	r2, #32
 8002eb0:	490e      	ldr	r1, [pc, #56]	; (8002eec <HAL_UART_RxCpltCallback+0xc4>)
 8002eb2:	480f      	ldr	r0, [pc, #60]	; (8002ef0 <HAL_UART_RxCpltCallback+0xc8>)
 8002eb4:	f007 f901 	bl	800a0ba <HAL_UART_Receive_DMA>
  }
  if(huart->Instance == USART3){
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_UART_RxCpltCallback+0xcc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d106      	bne.n	8002ed0 <HAL_UART_RxCpltCallback+0xa8>
    ReceiveLidar();
 8002ec2:	f000 f9cd 	bl	8003260 <ReceiveLidar>
    HAL_UART_Receive_DMA(&huart3, rx3_data, 10);
 8002ec6:	220a      	movs	r2, #10
 8002ec8:	490b      	ldr	r1, [pc, #44]	; (8002ef8 <HAL_UART_RxCpltCallback+0xd0>)
 8002eca:	480c      	ldr	r0, [pc, #48]	; (8002efc <HAL_UART_RxCpltCallback+0xd4>)
 8002ecc:	f007 f8f5 	bl	800a0ba <HAL_UART_Receive_DMA>
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40011000 	.word	0x40011000
 8002edc:	20000100 	.word	0x20000100
 8002ee0:	20000014 	.word	0x20000014
 8002ee4:	20000864 	.word	0x20000864
 8002ee8:	40004400 	.word	0x40004400
 8002eec:	20000104 	.word	0x20000104
 8002ef0:	200008a8 	.word	0x200008a8
 8002ef4:	40004800 	.word	0x40004800
 8002ef8:	20000130 	.word	0x20000130
 8002efc:	20000820 	.word	0x20000820

08002f00 <array_element_of_index_equal>:
bool array_element_of_index_equal(uint8_t a[], uint8_t b[], uint8_t size) {
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	71fb      	strb	r3, [r7, #7]
   uint8_t i;
   for(i=0; i<size; i++){
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
 8002f12:	e00e      	b.n	8002f32 <array_element_of_index_equal+0x32>
      if( a[i] != b[i] )
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	440b      	add	r3, r1
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <array_element_of_index_equal+0x2c>
         return false;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e007      	b.n	8002f3c <array_element_of_index_equal+0x3c>
   for(i=0; i<size; i++){
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
 8002f32:	7dfa      	ldrb	r2, [r7, #23]
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3ec      	bcc.n	8002f14 <array_element_of_index_equal+0x14>
   }
   return true;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <array_avg_compare>:
int16_t array_avg_compare(uint16_t distance[]){
 8002f48:	b480      	push	{r7}
 8002f4a:	b08b      	sub	sp, #44	; 0x2c
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

   uint32_t sum_R = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t sum_L = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
   uint8_t len_L = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	77fb      	strb	r3, [r7, #31]
   uint8_t len_R = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77bb      	strb	r3, [r7, #30]
   uint16_t avg_R = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	827b      	strh	r3, [r7, #18]
   uint16_t avg_L = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	823b      	strh	r3, [r7, #16]
   int16_t avg_diff = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	81fb      	strh	r3, [r7, #14]

   for(int i=0; i<90; i++){
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e015      	b.n	8002f9e <array_avg_compare+0x56>
      sum_R += distance[i];
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	4413      	add	r3, r2
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
      if(distance[i]!=0){
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <array_avg_compare+0x50>
         len_R++;
 8002f92:	7fbb      	ldrb	r3, [r7, #30]
 8002f94:	3301      	adds	r3, #1
 8002f96:	77bb      	strb	r3, [r7, #30]
   for(int i=0; i<90; i++){
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b59      	cmp	r3, #89	; 0x59
 8002fa2:	dde6      	ble.n	8002f72 <array_avg_compare+0x2a>
      }
   }
   avg_R = sum_R/len_R;
 8002fa4:	7fbb      	ldrb	r3, [r7, #30]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	827b      	strh	r3, [r7, #18]

   for(int i=270; i<360; i++){
 8002fae:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e015      	b.n	8002fe2 <array_avg_compare+0x9a>
      sum_L += distance[i];
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	623b      	str	r3, [r7, #32]
      if(distance[i]!=0){
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <array_avg_compare+0x94>
         len_L++;
 8002fd6:	7ffb      	ldrb	r3, [r7, #31]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	77fb      	strb	r3, [r7, #31]
   for(int i=270; i<360; i++){
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002fe8:	dbe5      	blt.n	8002fb6 <array_avg_compare+0x6e>
      }
   }
   avg_L = sum_L/len_L;
 8002fea:	7ffb      	ldrb	r3, [r7, #31]
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	823b      	strh	r3, [r7, #16]

   avg_diff = avg_R - avg_L;
 8002ff4:	8a7a      	ldrh	r2, [r7, #18]
 8002ff6:	8a3b      	ldrh	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	81fb      	strh	r3, [r7, #14]

   return avg_diff;
 8002ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003002:	4618      	mov	r0, r3
 8003004:	372c      	adds	r7, #44	; 0x2c
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003012:	f001 f9f3 	bl	80043fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003016:	f000 f821 	bl	800305c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800301a:	f7ff fb69 	bl	80026f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800301e:	f000 fc4d 	bl	80038bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8003022:	f000 fd0f 	bl	8003a44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003026:	f000 fd61 	bl	8003aec <MX_TIM3_Init>
  MX_TIM4_Init();
 800302a:	f000 fdb3 	bl	8003b94 <MX_TIM4_Init>
  MX_TIM5_Init();
 800302e:	f000 fe05 	bl	8003c3c <MX_TIM5_Init>
  MX_TIM6_Init();
 8003032:	f000 fe57 	bl	8003ce4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8003036:	f001 f807 	bl	8004048 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800303a:	f001 f82f 	bl	800409c <MX_USART2_UART_Init>
  MX_DMA_Init();
 800303e:	f7ff fb1f 	bl	8002680 <MX_DMA_Init>
  MX_I2C1_Init();
 8003042:	f7ff fdf5 	bl	8002c30 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003046:	f001 f853 	bl	80040f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  Initialize_AIGO();
 800304a:	f000 f871 	bl	8003130 <Initialize_AIGO>
  Startup();
 800304e:	f7ff fdd9 	bl	8002c04 <Startup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    ReceiveLidar();
 8003052:	f000 f905 	bl	8003260 <ReceiveLidar>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    goWaypoint();
 8003056:	f7ff fcc7 	bl	80029e8 <goWaypoint>
    ReceiveLidar();
 800305a:	e7fa      	b.n	8003052 <main+0x44>

0800305c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b094      	sub	sp, #80	; 0x50
 8003060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003062:	f107 0320 	add.w	r3, r7, #32
 8003066:	2230      	movs	r2, #48	; 0x30
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f009 faf4 	bl	800c658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <SystemClock_Config+0xcc>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <SystemClock_Config+0xcc>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	; 0x40
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <SystemClock_Config+0xcc>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	4b22      	ldr	r3, [pc, #136]	; (800312c <SystemClock_Config+0xd0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a21      	ldr	r2, [pc, #132]	; (800312c <SystemClock_Config+0xd0>)
 80030a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b1f      	ldr	r3, [pc, #124]	; (800312c <SystemClock_Config+0xd0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030c2:	2302      	movs	r3, #2
 80030c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030cc:	2304      	movs	r3, #4
 80030ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80030d0:	23a8      	movs	r3, #168	; 0xa8
 80030d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030d4:	2302      	movs	r3, #2
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80030d8:	2303      	movs	r3, #3
 80030da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030dc:	f107 0320 	add.w	r3, r7, #32
 80030e0:	4618      	mov	r0, r3
 80030e2:	f005 f801 	bl	80080e8 <HAL_RCC_OscConfig>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80030ec:	f000 f982 	bl	80033f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f0:	230f      	movs	r3, #15
 80030f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030f4:	2302      	movs	r3, #2
 80030f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	2102      	movs	r1, #2
 800310e:	4618      	mov	r0, r3
 8003110:	f005 fa62 	bl	80085d8 <HAL_RCC_ClockConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800311a:	f000 f96b 	bl	80033f4 <Error_Handler>
  }
}
 800311e:	bf00      	nop
 8003120:	3750      	adds	r7, #80	; 0x50
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000

08003130 <Initialize_AIGO>:

/* USER CODE BEGIN 4 */
void Initialize_AIGO(){
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0

  //Initialize Motor PWM
  //LF RF : GPIOB
  //LB RB : GPIOD

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003134:	2100      	movs	r1, #0
 8003136:	4839      	ldr	r0, [pc, #228]	; (800321c <Initialize_AIGO+0xec>)
 8003138:	f005 fd64 	bl	8008c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800313c:	2104      	movs	r1, #4
 800313e:	4837      	ldr	r0, [pc, #220]	; (800321c <Initialize_AIGO+0xec>)
 8003140:	f005 fd60 	bl	8008c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003144:	2108      	movs	r1, #8
 8003146:	4835      	ldr	r0, [pc, #212]	; (800321c <Initialize_AIGO+0xec>)
 8003148:	f005 fd5c 	bl	8008c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800314c:	210c      	movs	r1, #12
 800314e:	4833      	ldr	r0, [pc, #204]	; (800321c <Initialize_AIGO+0xec>)
 8003150:	f005 fd58 	bl	8008c04 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8003154:	2201      	movs	r2, #1
 8003156:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800315a:	4831      	ldr	r0, [pc, #196]	; (8003220 <Initialize_AIGO+0xf0>)
 800315c:	f002 f8a2 	bl	80052a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8003160:	2200      	movs	r2, #0
 8003162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003166:	482e      	ldr	r0, [pc, #184]	; (8003220 <Initialize_AIGO+0xf0>)
 8003168:	f002 f89c 	bl	80052a4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800316c:	2201      	movs	r2, #1
 800316e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003172:	482b      	ldr	r0, [pc, #172]	; (8003220 <Initialize_AIGO+0xf0>)
 8003174:	f002 f896 	bl	80052a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8003178:	2200      	movs	r2, #0
 800317a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317e:	4828      	ldr	r0, [pc, #160]	; (8003220 <Initialize_AIGO+0xf0>)
 8003180:	f002 f890 	bl	80052a4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 8003184:	2201      	movs	r2, #1
 8003186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800318a:	4826      	ldr	r0, [pc, #152]	; (8003224 <Initialize_AIGO+0xf4>)
 800318c:	f002 f88a 	bl	80052a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8003190:	2200      	movs	r2, #0
 8003192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003196:	4823      	ldr	r0, [pc, #140]	; (8003224 <Initialize_AIGO+0xf4>)
 8003198:	f002 f884 	bl	80052a4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 800319c:	2201      	movs	r2, #1
 800319e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031a2:	4820      	ldr	r0, [pc, #128]	; (8003224 <Initialize_AIGO+0xf4>)
 80031a4:	f002 f87e 	bl	80052a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 80031a8:	2200      	movs	r2, #0
 80031aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031ae:	481d      	ldr	r0, [pc, #116]	; (8003224 <Initialize_AIGO+0xf4>)
 80031b0:	f002 f878 	bl	80052a4 <HAL_GPIO_WritePin>


  //Initialize Encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80031b4:	213c      	movs	r1, #60	; 0x3c
 80031b6:	481c      	ldr	r0, [pc, #112]	; (8003228 <Initialize_AIGO+0xf8>)
 80031b8:	f005 fe92 	bl	8008ee0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80031bc:	213c      	movs	r1, #60	; 0x3c
 80031be:	481b      	ldr	r0, [pc, #108]	; (800322c <Initialize_AIGO+0xfc>)
 80031c0:	f005 fe8e 	bl	8008ee0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80031c4:	213c      	movs	r1, #60	; 0x3c
 80031c6:	481a      	ldr	r0, [pc, #104]	; (8003230 <Initialize_AIGO+0x100>)
 80031c8:	f005 fe8a 	bl	8008ee0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80031cc:	213c      	movs	r1, #60	; 0x3c
 80031ce:	4819      	ldr	r0, [pc, #100]	; (8003234 <Initialize_AIGO+0x104>)
 80031d0:	f005 fe86 	bl	8008ee0 <HAL_TIM_Encoder_Start>

  HAL_UART_Receive_DMA(&huart1, &byte_serial, 1);
 80031d4:	2201      	movs	r2, #1
 80031d6:	4918      	ldr	r1, [pc, #96]	; (8003238 <Initialize_AIGO+0x108>)
 80031d8:	4818      	ldr	r0, [pc, #96]	; (800323c <Initialize_AIGO+0x10c>)
 80031da:	f006 ff6e 	bl	800a0ba <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, waypoint, 15);
 80031de:	220f      	movs	r2, #15
 80031e0:	4917      	ldr	r1, [pc, #92]	; (8003240 <Initialize_AIGO+0x110>)
 80031e2:	4818      	ldr	r0, [pc, #96]	; (8003244 <Initialize_AIGO+0x114>)
 80031e4:	f006 ff69 	bl	800a0ba <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, rx3_data, 10);
 80031e8:	220a      	movs	r2, #10
 80031ea:	4917      	ldr	r1, [pc, #92]	; (8003248 <Initialize_AIGO+0x118>)
 80031ec:	4817      	ldr	r0, [pc, #92]	; (800324c <Initialize_AIGO+0x11c>)
 80031ee:	f006 ff64 	bl	800a0ba <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80031f2:	4817      	ldr	r0, [pc, #92]	; (8003250 <Initialize_AIGO+0x120>)
 80031f4:	f005 fc3c 	bl	8008a70 <HAL_TIM_Base_Start_IT>

  calibrateMPU9250(gyroBias, accelBias);
 80031f8:	4916      	ldr	r1, [pc, #88]	; (8003254 <Initialize_AIGO+0x124>)
 80031fa:	4817      	ldr	r0, [pc, #92]	; (8003258 <Initialize_AIGO+0x128>)
 80031fc:	f7fe f8c2 	bl	8001384 <calibrateMPU9250>

  while(MPU9250_Init());
 8003200:	bf00      	nop
 8003202:	f7fd ff2d 	bl	8001060 <MPU9250_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1fa      	bne.n	8003202 <Initialize_AIGO+0xd2>

  HAL_UART_Transmit(&huart3, scan_command, 2, 100);
 800320c:	2364      	movs	r3, #100	; 0x64
 800320e:	2202      	movs	r2, #2
 8003210:	4912      	ldr	r1, [pc, #72]	; (800325c <Initialize_AIGO+0x12c>)
 8003212:	480e      	ldr	r0, [pc, #56]	; (800324c <Initialize_AIGO+0x11c>)
 8003214:	f006 fded 	bl	8009df2 <HAL_UART_Transmit>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200006d0 	.word	0x200006d0
 8003220:	40020400 	.word	0x40020400
 8003224:	40020c00 	.word	0x40020c00
 8003228:	20000718 	.word	0x20000718
 800322c:	20000640 	.word	0x20000640
 8003230:	200005b0 	.word	0x200005b0
 8003234:	200005f8 	.word	0x200005f8
 8003238:	20000100 	.word	0x20000100
 800323c:	20000864 	.word	0x20000864
 8003240:	20000104 	.word	0x20000104
 8003244:	200008a8 	.word	0x200008a8
 8003248:	20000130 	.word	0x20000130
 800324c:	20000820 	.word	0x20000820
 8003250:	20000688 	.word	0x20000688
 8003254:	200000d0 	.word	0x200000d0
 8003258:	200000c4 	.word	0x200000c4
 800325c:	20000008 	.word	0x20000008

08003260 <ReceiveLidar>:


void AvoidCollision(){

}
void ReceiveLidar(){
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  if(scan_start){
 8003264:	4b57      	ldr	r3, [pc, #348]	; (80033c4 <ReceiveLidar+0x164>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8094 	beq.w	8003396 <ReceiveLidar+0x136>

     Q = rx3_data[0]>>2;
 800326e:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <ReceiveLidar+0x168>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b55      	ldr	r3, [pc, #340]	; (80033cc <ReceiveLidar+0x16c>)
 8003278:	701a      	strb	r2, [r3, #0]
     S = (rx3_data[0] & 0x01) ? 1 : 0;
 800327a:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <ReceiveLidar+0x168>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf14      	ite	ne
 8003286:	2301      	movne	r3, #1
 8003288:	2300      	moveq	r3, #0
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <ReceiveLidar+0x170>)
 800328e:	701a      	strb	r2, [r3, #0]
     angle = (rx3_data[2]<<7 | rx3_data[1]>>1)/64;
 8003290:	4b4d      	ldr	r3, [pc, #308]	; (80033c8 <ReceiveLidar+0x168>)
 8003292:	789b      	ldrb	r3, [r3, #2]
 8003294:	01db      	lsls	r3, r3, #7
 8003296:	4a4c      	ldr	r2, [pc, #304]	; (80033c8 <ReceiveLidar+0x168>)
 8003298:	7852      	ldrb	r2, [r2, #1]
 800329a:	0852      	lsrs	r2, r2, #1
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	4313      	orrs	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	da00      	bge.n	80032a6 <ReceiveLidar+0x46>
 80032a4:	333f      	adds	r3, #63	; 0x3f
 80032a6:	119b      	asrs	r3, r3, #6
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <ReceiveLidar+0x174>)
 80032ac:	801a      	strh	r2, [r3, #0]
     d = (rx3_data[4]<<8 | rx3_data[3])/4;
 80032ae:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <ReceiveLidar+0x168>)
 80032b0:	791b      	ldrb	r3, [r3, #4]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	4a44      	ldr	r2, [pc, #272]	; (80033c8 <ReceiveLidar+0x168>)
 80032b6:	78d2      	ldrb	r2, [r2, #3]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da00      	bge.n	80032c0 <ReceiveLidar+0x60>
 80032be:	3303      	adds	r3, #3
 80032c0:	109b      	asrs	r3, r3, #2
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <ReceiveLidar+0x178>)
 80032c6:	801a      	strh	r2, [r3, #0]
     if(d >= 3000){
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <ReceiveLidar+0x178>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d908      	bls.n	80032e6 <ReceiveLidar+0x86>
      distance[angle] = 3000;
 80032d4:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <ReceiveLidar+0x174>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	4b40      	ldr	r3, [pc, #256]	; (80033dc <ReceiveLidar+0x17c>)
 80032dc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80032e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80032e4:	e007      	b.n	80032f6 <ReceiveLidar+0x96>
     }
     else{
      distance[angle] = d;
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <ReceiveLidar+0x174>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <ReceiveLidar+0x178>)
 80032ee:	8819      	ldrh	r1, [r3, #0]
 80032f0:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <ReceiveLidar+0x17c>)
 80032f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
     }

     if(S == 1){
 80032f6:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <ReceiveLidar+0x170>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d05f      	beq.n	80033be <ReceiveLidar+0x15e>
      avg_DIFF = array_avg_compare(distance);
 80032fe:	4837      	ldr	r0, [pc, #220]	; (80033dc <ReceiveLidar+0x17c>)
 8003300:	f7ff fe22 	bl	8002f48 <array_avg_compare>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <ReceiveLidar+0x180>)
 800330a:	801a      	strh	r2, [r3, #0]
      if(avg_DIFF > border || avg_DIFF*(-1) > border){
 800330c:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <ReceiveLidar+0x180>)
 800330e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003312:	461a      	mov	r2, r3
 8003314:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003318:	429a      	cmp	r2, r3
 800331a:	d808      	bhi.n	800332e <ReceiveLidar+0xce>
 800331c:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <ReceiveLidar+0x180>)
 800331e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003322:	425b      	negs	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800332a:	429a      	cmp	r2, r3
 800332c:	d912      	bls.n	8003354 <ReceiveLidar+0xf4>
        if(avg_DIFF>0)
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <ReceiveLidar+0x180>)
 8003330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003334:	2b00      	cmp	r3, #0
 8003336:	dd05      	ble.n	8003344 <ReceiveLidar+0xe4>
          avg_DIFF = border;
 8003338:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800333c:	b21a      	sxth	r2, r3
 800333e:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <ReceiveLidar+0x180>)
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	e007      	b.n	8003354 <ReceiveLidar+0xf4>
        else
          avg_DIFF = (-1) * border;
 8003344:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003348:	b29b      	uxth	r3, r3
 800334a:	425b      	negs	r3, r3
 800334c:	b29b      	uxth	r3, r3
 800334e:	b21a      	sxth	r2, r3
 8003350:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <ReceiveLidar+0x180>)
 8003352:	801a      	strh	r2, [r3, #0]
      }
      motor_PWM[0] += avg_DIFF;
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <ReceiveLidar+0x184>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <ReceiveLidar+0x180>)
 800335a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800335e:	4413      	add	r3, r2
 8003360:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <ReceiveLidar+0x184>)
 8003362:	6013      	str	r3, [r2, #0]
      motor_PWM[1] -= avg_DIFF;
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <ReceiveLidar+0x184>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a1d      	ldr	r2, [pc, #116]	; (80033e0 <ReceiveLidar+0x180>)
 800336a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <ReceiveLidar+0x184>)
 8003372:	6053      	str	r3, [r2, #4]
      motor_PWM[2] += avg_DIFF;
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <ReceiveLidar+0x184>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <ReceiveLidar+0x180>)
 800337a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800337e:	4413      	add	r3, r2
 8003380:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <ReceiveLidar+0x184>)
 8003382:	6093      	str	r3, [r2, #8]
      motor_PWM[3] -= avg_DIFF;
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <ReceiveLidar+0x184>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <ReceiveLidar+0x180>)
 800338a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <ReceiveLidar+0x184>)
 8003392:	60d3      	str	r3, [r2, #12]
     if (array_element_of_index_equal(rx3_start, scan_response, 7)){
      scan_start = true;
     }
    }
   }
}
 8003394:	e013      	b.n	80033be <ReceiveLidar+0x15e>
    if(HAL_UART_Receive(&huart3, rx3_start, 7, 10) == HAL_OK){
 8003396:	230a      	movs	r3, #10
 8003398:	2207      	movs	r2, #7
 800339a:	4913      	ldr	r1, [pc, #76]	; (80033e8 <ReceiveLidar+0x188>)
 800339c:	4813      	ldr	r0, [pc, #76]	; (80033ec <ReceiveLidar+0x18c>)
 800339e:	f006 fdba 	bl	8009f16 <HAL_UART_Receive>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <ReceiveLidar+0x15e>
     if (array_element_of_index_equal(rx3_start, scan_response, 7)){
 80033a8:	2207      	movs	r2, #7
 80033aa:	4911      	ldr	r1, [pc, #68]	; (80033f0 <ReceiveLidar+0x190>)
 80033ac:	480e      	ldr	r0, [pc, #56]	; (80033e8 <ReceiveLidar+0x188>)
 80033ae:	f7ff fda7 	bl	8002f00 <array_element_of_index_equal>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <ReceiveLidar+0x15e>
      scan_start = true;
 80033b8:	4b02      	ldr	r3, [pc, #8]	; (80033c4 <ReceiveLidar+0x164>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000124 	.word	0x20000124
 80033c8:	20000130 	.word	0x20000130
 80033cc:	20000135 	.word	0x20000135
 80033d0:	20000136 	.word	0x20000136
 80033d4:	200005ac 	.word	0x200005ac
 80033d8:	200005ae 	.word	0x200005ae
 80033dc:	20000138 	.word	0x20000138
 80033e0:	20000408 	.word	0x20000408
 80033e4:	2000040c 	.word	0x2000040c
 80033e8:	20000128 	.word	0x20000128
 80033ec:	20000820 	.word	0x20000820
 80033f0:	2000000c 	.word	0x2000000c

080033f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033f8:	b672      	cpsid	i
}
 80033fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033fc:	e7fe      	b.n	80033fc <Error_Handler+0x8>
	...

08003400 <set_motor>:
const uint8_t LB = 3;
const uint8_t RB = 4;
uint32_t motor_speed = 4000;
uint32_t motor_slow = 2000;
int32_t motor_PWM[4] = {0, 0, 0, 0};
void set_motor(uint8_t loc, uint8_t dir, uint32_t spd){
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	603a      	str	r2, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
 800340c:	460b      	mov	r3, r1
 800340e:	71bb      	strb	r3, [r7, #6]

  if (loc == LF && dir == FORWARD){
 8003410:	2201      	movs	r2, #1
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	4293      	cmp	r3, r2
 8003416:	d113      	bne.n	8003440 <set_motor+0x40>
 8003418:	2201      	movs	r2, #1
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	4293      	cmp	r3, r2
 800341e:	d10f      	bne.n	8003440 <set_motor+0x40>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8003420:	2201      	movs	r2, #1
 8003422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003426:	485c      	ldr	r0, [pc, #368]	; (8003598 <set_motor+0x198>)
 8003428:	f001 ff3c 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800342c:	2200      	movs	r2, #0
 800342e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003432:	4859      	ldr	r0, [pc, #356]	; (8003598 <set_motor+0x198>)
 8003434:	f001 ff36 	bl	80052a4 <HAL_GPIO_WritePin>
    TIM1->CCR1 = spd;
 8003438:	4a58      	ldr	r2, [pc, #352]	; (800359c <set_motor+0x19c>)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6353      	str	r3, [r2, #52]	; 0x34
 800343e:	e0a7      	b.n	8003590 <set_motor+0x190>
  }
  else if (loc == LF && dir == BACKWARD){
 8003440:	2201      	movs	r2, #1
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	4293      	cmp	r3, r2
 8003446:	d113      	bne.n	8003470 <set_motor+0x70>
 8003448:	2202      	movs	r2, #2
 800344a:	79bb      	ldrb	r3, [r7, #6]
 800344c:	4293      	cmp	r3, r2
 800344e:	d10f      	bne.n	8003470 <set_motor+0x70>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003456:	4850      	ldr	r0, [pc, #320]	; (8003598 <set_motor+0x198>)
 8003458:	f001 ff24 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800345c:	2201      	movs	r2, #1
 800345e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003462:	484d      	ldr	r0, [pc, #308]	; (8003598 <set_motor+0x198>)
 8003464:	f001 ff1e 	bl	80052a4 <HAL_GPIO_WritePin>
    TIM1->CCR1 = spd;
 8003468:	4a4c      	ldr	r2, [pc, #304]	; (800359c <set_motor+0x19c>)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6353      	str	r3, [r2, #52]	; 0x34
 800346e:	e08f      	b.n	8003590 <set_motor+0x190>
  }
  else if (loc == RF && dir == FORWARD){
 8003470:	2202      	movs	r2, #2
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	4293      	cmp	r3, r2
 8003476:	d113      	bne.n	80034a0 <set_motor+0xa0>
 8003478:	2201      	movs	r2, #1
 800347a:	79bb      	ldrb	r3, [r7, #6]
 800347c:	4293      	cmp	r3, r2
 800347e:	d10f      	bne.n	80034a0 <set_motor+0xa0>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8003480:	2201      	movs	r2, #1
 8003482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003486:	4844      	ldr	r0, [pc, #272]	; (8003598 <set_motor+0x198>)
 8003488:	f001 ff0c 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 800348c:	2200      	movs	r2, #0
 800348e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003492:	4841      	ldr	r0, [pc, #260]	; (8003598 <set_motor+0x198>)
 8003494:	f001 ff06 	bl	80052a4 <HAL_GPIO_WritePin>
    TIM1->CCR2 = spd;
 8003498:	4a40      	ldr	r2, [pc, #256]	; (800359c <set_motor+0x19c>)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6393      	str	r3, [r2, #56]	; 0x38
 800349e:	e077      	b.n	8003590 <set_motor+0x190>
  }
  else if (loc == RF && dir == BACKWARD){
 80034a0:	2202      	movs	r2, #2
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d113      	bne.n	80034d0 <set_motor+0xd0>
 80034a8:	2202      	movs	r2, #2
 80034aa:	79bb      	ldrb	r3, [r7, #6]
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10f      	bne.n	80034d0 <set_motor+0xd0>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80034b0:	2200      	movs	r2, #0
 80034b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034b6:	4838      	ldr	r0, [pc, #224]	; (8003598 <set_motor+0x198>)
 80034b8:	f001 fef4 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80034bc:	2201      	movs	r2, #1
 80034be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034c2:	4835      	ldr	r0, [pc, #212]	; (8003598 <set_motor+0x198>)
 80034c4:	f001 feee 	bl	80052a4 <HAL_GPIO_WritePin>
    TIM1->CCR2 = spd;
 80034c8:	4a34      	ldr	r2, [pc, #208]	; (800359c <set_motor+0x19c>)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6393      	str	r3, [r2, #56]	; 0x38
 80034ce:	e05f      	b.n	8003590 <set_motor+0x190>
  }
  else if (loc == LB && dir == FORWARD){
 80034d0:	2203      	movs	r2, #3
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d113      	bne.n	8003500 <set_motor+0x100>
 80034d8:	2201      	movs	r2, #1
 80034da:	79bb      	ldrb	r3, [r7, #6]
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10f      	bne.n	8003500 <set_motor+0x100>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 80034e0:	2201      	movs	r2, #1
 80034e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e6:	482e      	ldr	r0, [pc, #184]	; (80035a0 <set_motor+0x1a0>)
 80034e8:	f001 fedc 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80034ec:	2200      	movs	r2, #0
 80034ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034f2:	482b      	ldr	r0, [pc, #172]	; (80035a0 <set_motor+0x1a0>)
 80034f4:	f001 fed6 	bl	80052a4 <HAL_GPIO_WritePin>
    TIM1->CCR3 = spd;
 80034f8:	4a28      	ldr	r2, [pc, #160]	; (800359c <set_motor+0x19c>)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80034fe:	e047      	b.n	8003590 <set_motor+0x190>
  }
  else if (loc == LB && dir == BACKWARD){
 8003500:	2203      	movs	r2, #3
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	4293      	cmp	r3, r2
 8003506:	d113      	bne.n	8003530 <set_motor+0x130>
 8003508:	2202      	movs	r2, #2
 800350a:	79bb      	ldrb	r3, [r7, #6]
 800350c:	4293      	cmp	r3, r2
 800350e:	d10f      	bne.n	8003530 <set_motor+0x130>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 8003510:	2200      	movs	r2, #0
 8003512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003516:	4822      	ldr	r0, [pc, #136]	; (80035a0 <set_motor+0x1a0>)
 8003518:	f001 fec4 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 800351c:	2201      	movs	r2, #1
 800351e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003522:	481f      	ldr	r0, [pc, #124]	; (80035a0 <set_motor+0x1a0>)
 8003524:	f001 febe 	bl	80052a4 <HAL_GPIO_WritePin>
    TIM1->CCR3 = spd;
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <set_motor+0x19c>)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800352e:	e02f      	b.n	8003590 <set_motor+0x190>
  }
  else if (loc == RB && dir == BACKWARD){
 8003530:	2204      	movs	r2, #4
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	4293      	cmp	r3, r2
 8003536:	d113      	bne.n	8003560 <set_motor+0x160>
 8003538:	2202      	movs	r2, #2
 800353a:	79bb      	ldrb	r3, [r7, #6]
 800353c:	4293      	cmp	r3, r2
 800353e:	d10f      	bne.n	8003560 <set_motor+0x160>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8003540:	2201      	movs	r2, #1
 8003542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003546:	4816      	ldr	r0, [pc, #88]	; (80035a0 <set_motor+0x1a0>)
 8003548:	f001 feac 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 800354c:	2200      	movs	r2, #0
 800354e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003552:	4813      	ldr	r0, [pc, #76]	; (80035a0 <set_motor+0x1a0>)
 8003554:	f001 fea6 	bl	80052a4 <HAL_GPIO_WritePin>
    TIM1->CCR4 = spd;
 8003558:	4a10      	ldr	r2, [pc, #64]	; (800359c <set_motor+0x19c>)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
 800355e:	e017      	b.n	8003590 <set_motor+0x190>
  }
  else if (loc == RB && dir == BACKWARD){
 8003560:	2204      	movs	r2, #4
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	4293      	cmp	r3, r2
 8003566:	d113      	bne.n	8003590 <set_motor+0x190>
 8003568:	2202      	movs	r2, #2
 800356a:	79bb      	ldrb	r3, [r7, #6]
 800356c:	4293      	cmp	r3, r2
 800356e:	d10f      	bne.n	8003590 <set_motor+0x190>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 8003570:	2200      	movs	r2, #0
 8003572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003576:	480a      	ldr	r0, [pc, #40]	; (80035a0 <set_motor+0x1a0>)
 8003578:	f001 fe94 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 800357c:	2201      	movs	r2, #1
 800357e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003582:	4807      	ldr	r0, [pc, #28]	; (80035a0 <set_motor+0x1a0>)
 8003584:	f001 fe8e 	bl	80052a4 <HAL_GPIO_WritePin>
    TIM1->CCR4 = spd;
 8003588:	4a04      	ldr	r2, [pc, #16]	; (800359c <set_motor+0x19c>)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
  }
}
 800358e:	e7ff      	b.n	8003590 <set_motor+0x190>
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40020400 	.word	0x40020400
 800359c:	40010000 	.word	0x40010000
 80035a0:	40020c00 	.word	0x40020c00

080035a4 <mvForward>:
  TIM1->CCR1 = motor_PWM[0];
  TIM1->CCR2 = motor_PWM[1];
  TIM1->CCR3 = motor_PWM[2];
  TIM1->CCR4 = motor_PWM[3];
}
void mvForward(){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  set_motor(LF, FORWARD, motor_speed+motor_PWM[0]);
 80035a8:	2001      	movs	r0, #1
 80035aa:	2101      	movs	r1, #1
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <mvForward+0x60>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <mvForward+0x64>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	f7ff ff21 	bl	8003400 <set_motor>
  set_motor(RF, FORWARD, motor_speed+motor_PWM[1]);
 80035be:	2002      	movs	r0, #2
 80035c0:	2101      	movs	r1, #1
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <mvForward+0x60>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <mvForward+0x64>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	461a      	mov	r2, r3
 80035d0:	f7ff ff16 	bl	8003400 <set_motor>
  set_motor(LB, FORWARD, motor_speed+motor_PWM[2]);
 80035d4:	2003      	movs	r0, #3
 80035d6:	2101      	movs	r1, #1
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <mvForward+0x60>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <mvForward+0x64>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	461a      	mov	r2, r3
 80035e6:	f7ff ff0b 	bl	8003400 <set_motor>
  set_motor(RB, FORWARD, motor_speed+motor_PWM[3]);
 80035ea:	2004      	movs	r0, #4
 80035ec:	2101      	movs	r1, #1
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <mvForward+0x60>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <mvForward+0x64>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4413      	add	r3, r2
 80035fa:	461a      	mov	r2, r3
 80035fc:	f7ff ff00 	bl	8003400 <set_motor>
}
 8003600:	bf00      	nop
 8003602:	bd80      	pop	{r7, pc}
 8003604:	2000040c 	.word	0x2000040c
 8003608:	20000014 	.word	0x20000014

0800360c <mvBackward>:
void mvBackward(){
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  set_motor(LF, BACKWARD, motor_speed);
 8003610:	2001      	movs	r0, #1
 8003612:	2102      	movs	r1, #2
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <mvBackward+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	f7ff fef1 	bl	8003400 <set_motor>
  set_motor(RF, BACKWARD, motor_speed);
 800361e:	2002      	movs	r0, #2
 8003620:	2102      	movs	r1, #2
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <mvBackward+0x40>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	f7ff feea 	bl	8003400 <set_motor>
  set_motor(LB, BACKWARD, motor_speed);
 800362c:	2003      	movs	r0, #3
 800362e:	2102      	movs	r1, #2
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <mvBackward+0x40>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	f7ff fee3 	bl	8003400 <set_motor>
  set_motor(RB, BACKWARD, motor_speed);
 800363a:	2004      	movs	r0, #4
 800363c:	2102      	movs	r1, #2
 800363e:	4b03      	ldr	r3, [pc, #12]	; (800364c <mvBackward+0x40>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	f7ff fedc 	bl	8003400 <set_motor>
}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000014 	.word	0x20000014

08003650 <mvLeft>:
void mvLeft(){
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  set_motor(LF, FORWARD, motor_slow+motor_PWM[0]);
 8003654:	2001      	movs	r0, #1
 8003656:	2101      	movs	r1, #1
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <mvLeft+0x60>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <mvLeft+0x64>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	461a      	mov	r2, r3
 8003666:	f7ff fecb 	bl	8003400 <set_motor>
  set_motor(RF, FORWARD, motor_speed+motor_PWM[1]);
 800366a:	2002      	movs	r0, #2
 800366c:	2101      	movs	r1, #1
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <mvLeft+0x60>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	461a      	mov	r2, r3
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <mvLeft+0x68>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4413      	add	r3, r2
 800367a:	461a      	mov	r2, r3
 800367c:	f7ff fec0 	bl	8003400 <set_motor>
  set_motor(LB, FORWARD, motor_slow+motor_PWM[2]);
 8003680:	2003      	movs	r0, #3
 8003682:	2101      	movs	r1, #1
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <mvLeft+0x60>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	461a      	mov	r2, r3
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <mvLeft+0x64>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4413      	add	r3, r2
 8003690:	461a      	mov	r2, r3
 8003692:	f7ff feb5 	bl	8003400 <set_motor>
  set_motor(RB, FORWARD, motor_speed+motor_PWM[3]);
 8003696:	2004      	movs	r0, #4
 8003698:	2101      	movs	r1, #1
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <mvLeft+0x60>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	461a      	mov	r2, r3
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <mvLeft+0x68>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	461a      	mov	r2, r3
 80036a8:	f7ff feaa 	bl	8003400 <set_motor>

}
 80036ac:	bf00      	nop
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	2000040c 	.word	0x2000040c
 80036b4:	20000018 	.word	0x20000018
 80036b8:	20000014 	.word	0x20000014

080036bc <mvRight>:
void mvRight(){
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  set_motor(LF, FORWARD, motor_speed+motor_PWM[0]);
 80036c0:	2001      	movs	r0, #1
 80036c2:	2101      	movs	r1, #1
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <mvRight+0x60>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <mvRight+0x64>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	f7ff fe95 	bl	8003400 <set_motor>
  set_motor(RF, FORWARD, motor_slow+motor_PWM[1]);
 80036d6:	2002      	movs	r0, #2
 80036d8:	2101      	movs	r1, #1
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <mvRight+0x60>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	461a      	mov	r2, r3
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <mvRight+0x68>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4413      	add	r3, r2
 80036e6:	461a      	mov	r2, r3
 80036e8:	f7ff fe8a 	bl	8003400 <set_motor>
  set_motor(LB, FORWARD, motor_speed+motor_PWM[2]);
 80036ec:	2003      	movs	r0, #3
 80036ee:	2101      	movs	r1, #1
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <mvRight+0x60>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <mvRight+0x64>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4413      	add	r3, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	f7ff fe7f 	bl	8003400 <set_motor>
  set_motor(RB, FORWARD, motor_slow+motor_PWM[3]);
 8003702:	2004      	movs	r0, #4
 8003704:	2101      	movs	r1, #1
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <mvRight+0x60>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	461a      	mov	r2, r3
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <mvRight+0x68>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4413      	add	r3, r2
 8003712:	461a      	mov	r2, r3
 8003714:	f7ff fe74 	bl	8003400 <set_motor>
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}
 800371c:	2000040c 	.word	0x2000040c
 8003720:	20000014 	.word	0x20000014
 8003724:	20000018 	.word	0x20000018

08003728 <Stop>:
void Stop(){
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  TIM1->CCR1 = 0;
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <Stop+0x28>)
 800372e:	2200      	movs	r2, #0
 8003730:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <Stop+0x28>)
 8003734:	2200      	movs	r2, #0
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <Stop+0x28>)
 800373a:	2200      	movs	r2, #0
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <Stop+0x28>)
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000

08003754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_MspInit+0x4c>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_MspInit+0x4c>)
 8003764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003768:	6453      	str	r3, [r2, #68]	; 0x44
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_MspInit+0x4c>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_MspInit+0x4c>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <HAL_MspInit+0x4c>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_MspInit+0x4c>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003792:	2007      	movs	r0, #7
 8003794:	f000 ff98 	bl	80046c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40023800 	.word	0x40023800

080037a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037a8:	e7fe      	b.n	80037a8 <NMI_Handler+0x4>

080037aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ae:	e7fe      	b.n	80037ae <HardFault_Handler+0x4>

080037b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037b4:	e7fe      	b.n	80037b4 <MemManage_Handler+0x4>

080037b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037ba:	e7fe      	b.n	80037ba <BusFault_Handler+0x4>

080037bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037c0:	e7fe      	b.n	80037c0 <UsageFault_Handler+0x4>

080037c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037f0:	f000 fe56 	bl	80044a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <DMA1_Stream0_IRQHandler+0x10>)
 80037fe:	f001 f93d 	bl	8004a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2000054c 	.word	0x2000054c

0800380c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <DMA1_Stream1_IRQHandler+0x10>)
 8003812:	f001 f933 	bl	8004a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200007c0 	.word	0x200007c0

08003820 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <DMA1_Stream5_IRQHandler+0x10>)
 8003826:	f001 f929 	bl	8004a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000760 	.word	0x20000760

08003834 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <DMA1_Stream6_IRQHandler+0x10>)
 800383a:	f001 f91f 	bl	8004a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000498 	.word	0x20000498

08003848 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <I2C1_EV_IRQHandler+0x10>)
 800384e:	f002 fbd3 	bl	8005ff8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200004f8 	.word	0x200004f8

0800385c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003860:	4802      	ldr	r0, [pc, #8]	; (800386c <I2C1_ER_IRQHandler+0x10>)
 8003862:	f002 fd36 	bl	80062d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	200004f8 	.word	0x200004f8

08003870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <USART1_IRQHandler+0x10>)
 8003876:	f006 fc51 	bl	800a11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000864 	.word	0x20000864

08003884 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <TIM6_DAC_IRQHandler+0x10>)
 800388a:	f005 fbb7 	bl	8008ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000688 	.word	0x20000688

08003898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <SystemInit+0x20>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <SystemInit+0x20>)
 80038a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b096      	sub	sp, #88	; 0x58
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	611a      	str	r2, [r3, #16]
 80038ea:	615a      	str	r2, [r3, #20]
 80038ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	2220      	movs	r2, #32
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f008 feaf 	bl	800c658 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038fa:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <MX_TIM1_Init+0x180>)
 80038fc:	4a50      	ldr	r2, [pc, #320]	; (8003a40 <MX_TIM1_Init+0x184>)
 80038fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8003900:	4b4e      	ldr	r3, [pc, #312]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003902:	22a7      	movs	r2, #167	; 0xa7
 8003904:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003906:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800390c:	4b4b      	ldr	r3, [pc, #300]	; (8003a3c <MX_TIM1_Init+0x180>)
 800390e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003912:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003914:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800391a:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <MX_TIM1_Init+0x180>)
 800391c:	2200      	movs	r2, #0
 800391e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003920:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003922:	2200      	movs	r2, #0
 8003924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003926:	4845      	ldr	r0, [pc, #276]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003928:	f005 f852 	bl	80089d0 <HAL_TIM_Base_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003932:	f7ff fd5f 	bl	80033f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800393c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003940:	4619      	mov	r1, r3
 8003942:	483e      	ldr	r0, [pc, #248]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003944:	f005 fd20 	bl	8009388 <HAL_TIM_ConfigClockSource>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800394e:	f7ff fd51 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003952:	483a      	ldr	r0, [pc, #232]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003954:	f005 f8fc 	bl	8008b50 <HAL_TIM_PWM_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800395e:	f7ff fd49 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800396a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800396e:	4619      	mov	r1, r3
 8003970:	4832      	ldr	r0, [pc, #200]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003972:	f006 f90f 	bl	8009b94 <HAL_TIMEx_MasterConfigSynchronization>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800397c:	f7ff fd3a 	bl	80033f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003980:	2360      	movs	r3, #96	; 0x60
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800398c:	2300      	movs	r3, #0
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003994:	2300      	movs	r3, #0
 8003996:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003998:	2300      	movs	r3, #0
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800399c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a0:	2200      	movs	r2, #0
 80039a2:	4619      	mov	r1, r3
 80039a4:	4825      	ldr	r0, [pc, #148]	; (8003a3c <MX_TIM1_Init+0x180>)
 80039a6:	f005 fc31 	bl	800920c <HAL_TIM_PWM_ConfigChannel>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80039b0:	f7ff fd20 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b8:	2204      	movs	r2, #4
 80039ba:	4619      	mov	r1, r3
 80039bc:	481f      	ldr	r0, [pc, #124]	; (8003a3c <MX_TIM1_Init+0x180>)
 80039be:	f005 fc25 	bl	800920c <HAL_TIM_PWM_ConfigChannel>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80039c8:	f7ff fd14 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d0:	2208      	movs	r2, #8
 80039d2:	4619      	mov	r1, r3
 80039d4:	4819      	ldr	r0, [pc, #100]	; (8003a3c <MX_TIM1_Init+0x180>)
 80039d6:	f005 fc19 	bl	800920c <HAL_TIM_PWM_ConfigChannel>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80039e0:	f7ff fd08 	bl	80033f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e8:	220c      	movs	r2, #12
 80039ea:	4619      	mov	r1, r3
 80039ec:	4813      	ldr	r0, [pc, #76]	; (8003a3c <MX_TIM1_Init+0x180>)
 80039ee:	f005 fc0d 	bl	800920c <HAL_TIM_PWM_ConfigChannel>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80039f8:	f7ff fcfc 	bl	80033f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4807      	ldr	r0, [pc, #28]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003a20:	f006 f934 	bl	8009c8c <HAL_TIMEx_ConfigBreakDeadTime>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003a2a:	f7ff fce3 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003a2e:	4803      	ldr	r0, [pc, #12]	; (8003a3c <MX_TIM1_Init+0x180>)
 8003a30:	f000 fad0 	bl	8003fd4 <HAL_TIM_MspPostInit>

}
 8003a34:	bf00      	nop
 8003a36:	3758      	adds	r7, #88	; 0x58
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	200006d0 	.word	0x200006d0
 8003a40:	40010000 	.word	0x40010000

08003a44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f008 fe00 	bl	800c658 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <MX_TIM2_Init+0xa4>)
 8003a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <MX_TIM2_Init+0xa4>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <MX_TIM2_Init+0xa4>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <MX_TIM2_Init+0xa4>)
 8003a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <MX_TIM2_Init+0xa4>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <MX_TIM2_Init+0xa4>)
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003a98:	230a      	movs	r3, #10
 8003a9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003aa8:	230a      	movs	r3, #10
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <MX_TIM2_Init+0xa4>)
 8003ab4:	f005 f96e 	bl	8008d94 <HAL_TIM_Encoder_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003abe:	f7ff fc99 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4806      	ldr	r0, [pc, #24]	; (8003ae8 <MX_TIM2_Init+0xa4>)
 8003ad0:	f006 f860 	bl	8009b94 <HAL_TIMEx_MasterConfigSynchronization>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003ada:	f7ff fc8b 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ade:	bf00      	nop
 8003ae0:	3730      	adds	r7, #48	; 0x30
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000718 	.word	0x20000718

08003aec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08c      	sub	sp, #48	; 0x30
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003af2:	f107 030c 	add.w	r3, r7, #12
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f008 fdac 	bl	800c658 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b00:	1d3b      	adds	r3, r7, #4
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <MX_TIM3_Init+0xa0>)
 8003b0a:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <MX_TIM3_Init+0xa4>)
 8003b0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <MX_TIM3_Init+0xa0>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <MX_TIM3_Init+0xa0>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <MX_TIM3_Init+0xa0>)
 8003b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <MX_TIM3_Init+0xa0>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <MX_TIM3_Init+0xa0>)
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b36:	2301      	movs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003b3e:	230a      	movs	r3, #10
 8003b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b46:	2301      	movs	r3, #1
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003b4e:	230a      	movs	r3, #10
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	4619      	mov	r1, r3
 8003b58:	480c      	ldr	r0, [pc, #48]	; (8003b8c <MX_TIM3_Init+0xa0>)
 8003b5a:	f005 f91b 	bl	8008d94 <HAL_TIM_Encoder_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003b64:	f7ff fc46 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_TIM3_Init+0xa0>)
 8003b76:	f006 f80d 	bl	8009b94 <HAL_TIMEx_MasterConfigSynchronization>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003b80:	f7ff fc38 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	3730      	adds	r7, #48	; 0x30
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000640 	.word	0x20000640
 8003b90:	40000400 	.word	0x40000400

08003b94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f008 fd58 	bl	800c658 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003bb0:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <MX_TIM4_Init+0xa0>)
 8003bb2:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <MX_TIM4_Init+0xa4>)
 8003bb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <MX_TIM4_Init+0xa0>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <MX_TIM4_Init+0xa0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <MX_TIM4_Init+0xa0>)
 8003bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bca:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <MX_TIM4_Init+0xa0>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <MX_TIM4_Init+0xa0>)
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bde:	2301      	movs	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003be6:	230a      	movs	r3, #10
 8003be8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003bf6:	230a      	movs	r3, #10
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	4619      	mov	r1, r3
 8003c00:	480c      	ldr	r0, [pc, #48]	; (8003c34 <MX_TIM4_Init+0xa0>)
 8003c02:	f005 f8c7 	bl	8008d94 <HAL_TIM_Encoder_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003c0c:	f7ff fbf2 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c10:	2300      	movs	r3, #0
 8003c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4805      	ldr	r0, [pc, #20]	; (8003c34 <MX_TIM4_Init+0xa0>)
 8003c1e:	f005 ffb9 	bl	8009b94 <HAL_TIMEx_MasterConfigSynchronization>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003c28:	f7ff fbe4 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003c2c:	bf00      	nop
 8003c2e:	3730      	adds	r7, #48	; 0x30
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200005b0 	.word	0x200005b0
 8003c38:	40000800 	.word	0x40000800

08003c3c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	; 0x30
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c42:	f107 030c 	add.w	r3, r7, #12
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f008 fd04 	bl	800c658 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003c58:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <MX_TIM5_Init+0xa0>)
 8003c5a:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <MX_TIM5_Init+0xa4>)
 8003c5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <MX_TIM5_Init+0xa0>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c64:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <MX_TIM5_Init+0xa0>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003c6a:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <MX_TIM5_Init+0xa0>)
 8003c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <MX_TIM5_Init+0xa0>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c78:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <MX_TIM5_Init+0xa0>)
 8003c7a:	2280      	movs	r2, #128	; 0x80
 8003c7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c86:	2301      	movs	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003c8e:	230a      	movs	r3, #10
 8003c90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c96:	2301      	movs	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	480c      	ldr	r0, [pc, #48]	; (8003cdc <MX_TIM5_Init+0xa0>)
 8003caa:	f005 f873 	bl	8008d94 <HAL_TIM_Encoder_Init>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003cb4:	f7ff fb9e 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003cc0:	1d3b      	adds	r3, r7, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4805      	ldr	r0, [pc, #20]	; (8003cdc <MX_TIM5_Init+0xa0>)
 8003cc6:	f005 ff65 	bl	8009b94 <HAL_TIMEx_MasterConfigSynchronization>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003cd0:	f7ff fb90 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003cd4:	bf00      	nop
 8003cd6:	3730      	adds	r7, #48	; 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	200005f8 	.word	0x200005f8
 8003ce0:	40000c00 	.word	0x40000c00

08003ce4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cea:	463b      	mov	r3, r7
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <MX_TIM6_Init+0x64>)
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <MX_TIM6_Init+0x68>)
 8003cf6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41999;
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <MX_TIM6_Init+0x64>)
 8003cfa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003cfe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d00:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <MX_TIM6_Init+0x64>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <MX_TIM6_Init+0x64>)
 8003d08:	22c7      	movs	r2, #199	; 0xc7
 8003d0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <MX_TIM6_Init+0x64>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d12:	480d      	ldr	r0, [pc, #52]	; (8003d48 <MX_TIM6_Init+0x64>)
 8003d14:	f004 fe5c 	bl	80089d0 <HAL_TIM_Base_Init>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003d1e:	f7ff fb69 	bl	80033f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003d2a:	463b      	mov	r3, r7
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4806      	ldr	r0, [pc, #24]	; (8003d48 <MX_TIM6_Init+0x64>)
 8003d30:	f005 ff30 	bl	8009b94 <HAL_TIMEx_MasterConfigSynchronization>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003d3a:	f7ff fb5b 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000688 	.word	0x20000688
 8003d4c:	40001000 	.word	0x40001000

08003d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <HAL_TIM_Base_MspInit+0x70>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <HAL_TIM_Base_MspInit+0x74>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_TIM_Base_MspInit+0x74>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6453      	str	r3, [r2, #68]	; 0x44
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <HAL_TIM_Base_MspInit+0x74>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003d7e:	e01a      	b.n	8003db6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <HAL_TIM_Base_MspInit+0x78>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d115      	bne.n	8003db6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <HAL_TIM_Base_MspInit+0x74>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <HAL_TIM_Base_MspInit+0x74>)
 8003d94:	f043 0310 	orr.w	r3, r3, #16
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <HAL_TIM_Base_MspInit+0x74>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	2036      	movs	r0, #54	; 0x36
 8003dac:	f000 fc97 	bl	80046de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003db0:	2036      	movs	r0, #54	; 0x36
 8003db2:	f000 fcb0 	bl	8004716 <HAL_NVIC_EnableIRQ>
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40001000 	.word	0x40001000

08003dcc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b090      	sub	sp, #64	; 0x40
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d14a      	bne.n	8003e84 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df2:	4b71      	ldr	r3, [pc, #452]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a70      	ldr	r2, [pc, #448]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b6e      	ldr	r3, [pc, #440]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a69      	ldr	r2, [pc, #420]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b67      	ldr	r3, [pc, #412]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a62      	ldr	r2, [pc, #392]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e30:	f043 0302 	orr.w	r3, r3, #2
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b60      	ldr	r3, [pc, #384]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e42:	2320      	movs	r3, #32
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e46:	2302      	movs	r3, #2
 8003e48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e52:	2301      	movs	r3, #1
 8003e54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4857      	ldr	r0, [pc, #348]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003e5e:	f001 f885 	bl	8004f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e62:	2308      	movs	r3, #8
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e72:	2301      	movs	r3, #1
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4850      	ldr	r0, [pc, #320]	; (8003fc0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003e7e:	f001 f875 	bl	8004f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003e82:	e095      	b.n	8003fb0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a4e      	ldr	r2, [pc, #312]	; (8003fc4 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d12c      	bne.n	8003ee8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	4b49      	ldr	r3, [pc, #292]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a48      	ldr	r2, [pc, #288]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003e98:	f043 0302 	orr.w	r3, r3, #2
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a41      	ldr	r2, [pc, #260]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ec6:	23c0      	movs	r3, #192	; 0xc0
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4836      	ldr	r0, [pc, #216]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003ee2:	f001 f843 	bl	8004f6c <HAL_GPIO_Init>
}
 8003ee6:	e063      	b.n	8003fb0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a36      	ldr	r2, [pc, #216]	; (8003fc8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d12d      	bne.n	8003f4e <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a2f      	ldr	r2, [pc, #188]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003efc:	f043 0304 	orr.w	r3, r3, #4
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f18:	f043 0308 	orr.w	r3, r3, #8
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f44:	4619      	mov	r1, r3
 8003f46:	4821      	ldr	r0, [pc, #132]	; (8003fcc <HAL_TIM_Encoder_MspInit+0x200>)
 8003f48:	f001 f810 	bl	8004f6c <HAL_GPIO_Init>
}
 8003f4c:	e030      	b.n	8003fb0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d12b      	bne.n	8003fb0 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f62:	f043 0308 	orr.w	r3, r3, #8
 8003f66:	6413      	str	r3, [r2, #64]	; 0x40
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6313      	str	r3, [r2, #48]	; 0x30
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f90:	2303      	movs	r3, #3
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4804      	ldr	r0, [pc, #16]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003fac:	f000 ffde 	bl	8004f6c <HAL_GPIO_Init>
}
 8003fb0:	bf00      	nop
 8003fb2:	3740      	adds	r7, #64	; 0x40
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40020000 	.word	0x40020000
 8003fc0:	40020400 	.word	0x40020400
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40020c00 	.word	0x40020c00
 8003fd0:	40000c00 	.word	0x40000c00

08003fd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a12      	ldr	r2, [pc, #72]	; (800403c <HAL_TIM_MspPostInit+0x68>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d11e      	bne.n	8004034 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_TIM_MspPostInit+0x6c>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_TIM_MspPostInit+0x6c>)
 8004000:	f043 0310 	orr.w	r3, r3, #16
 8004004:	6313      	str	r3, [r2, #48]	; 0x30
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <HAL_TIM_MspPostInit+0x6c>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8004012:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004018:	2302      	movs	r3, #2
 800401a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004024:	2301      	movs	r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	4619      	mov	r1, r3
 800402e:	4805      	ldr	r0, [pc, #20]	; (8004044 <HAL_TIM_MspPostInit+0x70>)
 8004030:	f000 ff9c 	bl	8004f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004034:	bf00      	nop
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40010000 	.word	0x40010000
 8004040:	40023800 	.word	0x40023800
 8004044:	40021000 	.word	0x40021000

08004048 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <MX_USART1_UART_Init+0x50>)
 8004050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 8004054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 8004068:	2200      	movs	r2, #0
 800406a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 800406e:	220c      	movs	r2, #12
 8004070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 800407a:	2200      	movs	r2, #0
 800407c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <MX_USART1_UART_Init+0x4c>)
 8004080:	f005 fe6a 	bl	8009d58 <HAL_UART_Init>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800408a:	f7ff f9b3 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000864 	.word	0x20000864
 8004098:	40011000 	.word	0x40011000

0800409c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <MX_USART2_UART_Init+0x50>)
 80040a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80040ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040c2:	220c      	movs	r2, #12
 80040c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040d2:	4805      	ldr	r0, [pc, #20]	; (80040e8 <MX_USART2_UART_Init+0x4c>)
 80040d4:	f005 fe40 	bl	8009d58 <HAL_UART_Init>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040de:	f7ff f989 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200008a8 	.word	0x200008a8
 80040ec:	40004400 	.word	0x40004400

080040f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040f4:	4b11      	ldr	r3, [pc, #68]	; (800413c <MX_USART3_UART_Init+0x4c>)
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <MX_USART3_UART_Init+0x50>)
 80040f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <MX_USART3_UART_Init+0x4c>)
 80040fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <MX_USART3_UART_Init+0x4c>)
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <MX_USART3_UART_Init+0x4c>)
 800410a:	2200      	movs	r2, #0
 800410c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <MX_USART3_UART_Init+0x4c>)
 8004110:	2200      	movs	r2, #0
 8004112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <MX_USART3_UART_Init+0x4c>)
 8004116:	220c      	movs	r2, #12
 8004118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <MX_USART3_UART_Init+0x4c>)
 800411c:	2200      	movs	r2, #0
 800411e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <MX_USART3_UART_Init+0x4c>)
 8004122:	2200      	movs	r2, #0
 8004124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004126:	4805      	ldr	r0, [pc, #20]	; (800413c <MX_USART3_UART_Init+0x4c>)
 8004128:	f005 fe16 	bl	8009d58 <HAL_UART_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004132:	f7ff f95f 	bl	80033f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000820 	.word	0x20000820
 8004140:	40004800 	.word	0x40004800

08004144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	; 0x38
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a87      	ldr	r2, [pc, #540]	; (8004380 <HAL_UART_MspInit+0x23c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d135      	bne.n	80041d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	4b86      	ldr	r3, [pc, #536]	; (8004384 <HAL_UART_MspInit+0x240>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	4a85      	ldr	r2, [pc, #532]	; (8004384 <HAL_UART_MspInit+0x240>)
 8004170:	f043 0310 	orr.w	r3, r3, #16
 8004174:	6453      	str	r3, [r2, #68]	; 0x44
 8004176:	4b83      	ldr	r3, [pc, #524]	; (8004384 <HAL_UART_MspInit+0x240>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	4b7f      	ldr	r3, [pc, #508]	; (8004384 <HAL_UART_MspInit+0x240>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	4a7e      	ldr	r2, [pc, #504]	; (8004384 <HAL_UART_MspInit+0x240>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6313      	str	r3, [r2, #48]	; 0x30
 8004192:	4b7c      	ldr	r3, [pc, #496]	; (8004384 <HAL_UART_MspInit+0x240>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800419e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a4:	2302      	movs	r3, #2
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ac:	2303      	movs	r3, #3
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041b0:	2307      	movs	r3, #7
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b8:	4619      	mov	r1, r3
 80041ba:	4873      	ldr	r0, [pc, #460]	; (8004388 <HAL_UART_MspInit+0x244>)
 80041bc:	f000 fed6 	bl	8004f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	2025      	movs	r0, #37	; 0x25
 80041c6:	f000 fa8a 	bl	80046de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041ca:	2025      	movs	r0, #37	; 0x25
 80041cc:	f000 faa3 	bl	8004716 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80041d0:	e0d1      	b.n	8004376 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6d      	ldr	r2, [pc, #436]	; (800438c <HAL_UART_MspInit+0x248>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d163      	bne.n	80042a4 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	4b68      	ldr	r3, [pc, #416]	; (8004384 <HAL_UART_MspInit+0x240>)
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	4a67      	ldr	r2, [pc, #412]	; (8004384 <HAL_UART_MspInit+0x240>)
 80041e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ea:	6413      	str	r3, [r2, #64]	; 0x40
 80041ec:	4b65      	ldr	r3, [pc, #404]	; (8004384 <HAL_UART_MspInit+0x240>)
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	4b61      	ldr	r3, [pc, #388]	; (8004384 <HAL_UART_MspInit+0x240>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	4a60      	ldr	r2, [pc, #384]	; (8004384 <HAL_UART_MspInit+0x240>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6313      	str	r3, [r2, #48]	; 0x30
 8004208:	4b5e      	ldr	r3, [pc, #376]	; (8004384 <HAL_UART_MspInit+0x240>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004214:	230c      	movs	r3, #12
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004218:	2302      	movs	r3, #2
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421c:	2300      	movs	r3, #0
 800421e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004220:	2303      	movs	r3, #3
 8004222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004224:	2307      	movs	r3, #7
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800422c:	4619      	mov	r1, r3
 800422e:	4856      	ldr	r0, [pc, #344]	; (8004388 <HAL_UART_MspInit+0x244>)
 8004230:	f000 fe9c 	bl	8004f6c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004236:	4a57      	ldr	r2, [pc, #348]	; (8004394 <HAL_UART_MspInit+0x250>)
 8004238:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800423a:	4b55      	ldr	r3, [pc, #340]	; (8004390 <HAL_UART_MspInit+0x24c>)
 800423c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004240:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004242:	4b53      	ldr	r3, [pc, #332]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004248:	4b51      	ldr	r3, [pc, #324]	; (8004390 <HAL_UART_MspInit+0x24c>)
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800424e:	4b50      	ldr	r3, [pc, #320]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004254:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004256:	4b4e      	ldr	r3, [pc, #312]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004258:	2200      	movs	r2, #0
 800425a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800425c:	4b4c      	ldr	r3, [pc, #304]	; (8004390 <HAL_UART_MspInit+0x24c>)
 800425e:	2200      	movs	r2, #0
 8004260:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004262:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004264:	2200      	movs	r2, #0
 8004266:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004268:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_UART_MspInit+0x24c>)
 800426a:	2200      	movs	r2, #0
 800426c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800426e:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004270:	2204      	movs	r2, #4
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004276:	2203      	movs	r2, #3
 8004278:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800427a:	4b45      	ldr	r3, [pc, #276]	; (8004390 <HAL_UART_MspInit+0x24c>)
 800427c:	2200      	movs	r2, #0
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004286:	4842      	ldr	r0, [pc, #264]	; (8004390 <HAL_UART_MspInit+0x24c>)
 8004288:	f000 fa60 	bl	800474c <HAL_DMA_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8004292:	f7ff f8af 	bl	80033f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <HAL_UART_MspInit+0x24c>)
 800429a:	639a      	str	r2, [r3, #56]	; 0x38
 800429c:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <HAL_UART_MspInit+0x24c>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80042a2:	e068      	b.n	8004376 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <HAL_UART_MspInit+0x254>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d163      	bne.n	8004376 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART3_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_UART_MspInit+0x240>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a33      	ldr	r2, [pc, #204]	; (8004384 <HAL_UART_MspInit+0x240>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_UART_MspInit+0x240>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	4b2d      	ldr	r3, [pc, #180]	; (8004384 <HAL_UART_MspInit+0x240>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	4a2c      	ldr	r2, [pc, #176]	; (8004384 <HAL_UART_MspInit+0x240>)
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	6313      	str	r3, [r2, #48]	; 0x30
 80042da:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <HAL_UART_MspInit+0x240>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2302      	movs	r3, #2
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f4:	2303      	movs	r3, #3
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042f8:	2307      	movs	r3, #7
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004300:	4619      	mov	r1, r3
 8004302:	4826      	ldr	r0, [pc, #152]	; (800439c <HAL_UART_MspInit+0x258>)
 8004304:	f000 fe32 	bl	8004f6c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 800430a:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <HAL_UART_MspInit+0x260>)
 800430c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004310:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004314:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800431c:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 800431e:	2200      	movs	r2, #0
 8004320:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004322:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004328:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 800432c:	2200      	movs	r2, #0
 800432e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004330:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004338:	2200      	movs	r2, #0
 800433a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800433c:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 800433e:	2200      	movs	r2, #0
 8004340:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004344:	2204      	movs	r2, #4
 8004346:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004348:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 800434a:	2203      	movs	r2, #3
 800434c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004350:	2200      	movs	r2, #0
 8004352:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004356:	2200      	movs	r2, #0
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800435a:	4811      	ldr	r0, [pc, #68]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 800435c:	f000 f9f6 	bl	800474c <HAL_DMA_Init>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8004366:	f7ff f845 	bl	80033f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
 8004370:	4a0b      	ldr	r2, [pc, #44]	; (80043a0 <HAL_UART_MspInit+0x25c>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004376:	bf00      	nop
 8004378:	3738      	adds	r7, #56	; 0x38
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40011000 	.word	0x40011000
 8004384:	40023800 	.word	0x40023800
 8004388:	40020000 	.word	0x40020000
 800438c:	40004400 	.word	0x40004400
 8004390:	20000760 	.word	0x20000760
 8004394:	40026088 	.word	0x40026088
 8004398:	40004800 	.word	0x40004800
 800439c:	40020400 	.word	0x40020400
 80043a0:	200007c0 	.word	0x200007c0
 80043a4:	40026028 	.word	0x40026028

080043a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043ac:	480d      	ldr	r0, [pc, #52]	; (80043e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043ae:	490e      	ldr	r1, [pc, #56]	; (80043e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043b0:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b4:	e002      	b.n	80043bc <LoopCopyDataInit>

080043b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ba:	3304      	adds	r3, #4

080043bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043c0:	d3f9      	bcc.n	80043b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043c2:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043c4:	4c0b      	ldr	r4, [pc, #44]	; (80043f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c8:	e001      	b.n	80043ce <LoopFillZerobss>

080043ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043cc:	3204      	adds	r2, #4

080043ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043d0:	d3fb      	bcc.n	80043ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043d2:	f7ff fa61 	bl	8003898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043d6:	f008 f91b 	bl	800c610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043da:	f7fe fe18 	bl	800300e <main>
  bx  lr    
 80043de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80043ec:	0800cb34 	.word	0x0800cb34
  ldr r2, =_sbss
 80043f0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80043f4:	200008f0 	.word	0x200008f0

080043f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f8:	e7fe      	b.n	80043f8 <ADC_IRQHandler>
	...

080043fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_Init+0x40>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0d      	ldr	r2, [pc, #52]	; (800443c <HAL_Init+0x40>)
 8004406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800440a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_Init+0x40>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_Init+0x40>)
 8004412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_Init+0x40>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a07      	ldr	r2, [pc, #28]	; (800443c <HAL_Init+0x40>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004424:	2003      	movs	r0, #3
 8004426:	f000 f94f 	bl	80046c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800442a:	2000      	movs	r0, #0
 800442c:	f000 f808 	bl	8004440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004430:	f7ff f990 	bl	8003754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023c00 	.word	0x40023c00

08004440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_InitTick+0x54>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_InitTick+0x58>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4619      	mov	r1, r3
 8004452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004456:	fbb3 f3f1 	udiv	r3, r3, r1
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f967 	bl	8004732 <HAL_SYSTICK_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e00e      	b.n	800448c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b0f      	cmp	r3, #15
 8004472:	d80a      	bhi.n	800448a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004474:	2200      	movs	r2, #0
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	f000 f92f 	bl	80046de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004480:	4a06      	ldr	r2, [pc, #24]	; (800449c <HAL_InitTick+0x5c>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	e000      	b.n	800448c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	2000001c 	.word	0x2000001c
 8004498:	20000024 	.word	0x20000024
 800449c:	20000020 	.word	0x20000020

080044a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <HAL_IncTick+0x20>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_IncTick+0x24>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4413      	add	r3, r2
 80044b0:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <HAL_IncTick+0x24>)
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000024 	.word	0x20000024
 80044c4:	200008ec 	.word	0x200008ec

080044c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return uwTick;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_GetTick+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	200008ec 	.word	0x200008ec

080044e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044e8:	f7ff ffee 	bl	80044c8 <HAL_GetTick>
 80044ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d005      	beq.n	8004506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_Delay+0x44>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004506:	bf00      	nop
 8004508:	f7ff ffde 	bl	80044c8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	429a      	cmp	r2, r3
 8004516:	d8f7      	bhi.n	8004508 <HAL_Delay+0x28>
  {
  }
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000024 	.word	0x20000024

08004528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <__NVIC_SetPriorityGrouping+0x44>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004544:	4013      	ands	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800455a:	4a04      	ldr	r2, [pc, #16]	; (800456c <__NVIC_SetPriorityGrouping+0x44>)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	60d3      	str	r3, [r2, #12]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <__NVIC_GetPriorityGrouping+0x18>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	f003 0307 	and.w	r3, r3, #7
}
 800457e:	4618      	mov	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	2b00      	cmp	r3, #0
 800459c:	db0b      	blt.n	80045b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	f003 021f 	and.w	r2, r3, #31
 80045a4:	4907      	ldr	r1, [pc, #28]	; (80045c4 <__NVIC_EnableIRQ+0x38>)
 80045a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2001      	movs	r0, #1
 80045ae:	fa00 f202 	lsl.w	r2, r0, r2
 80045b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	e000e100 	.word	0xe000e100

080045c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	6039      	str	r1, [r7, #0]
 80045d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	db0a      	blt.n	80045f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	490c      	ldr	r1, [pc, #48]	; (8004614 <__NVIC_SetPriority+0x4c>)
 80045e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e6:	0112      	lsls	r2, r2, #4
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	440b      	add	r3, r1
 80045ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045f0:	e00a      	b.n	8004608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	4908      	ldr	r1, [pc, #32]	; (8004618 <__NVIC_SetPriority+0x50>)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	3b04      	subs	r3, #4
 8004600:	0112      	lsls	r2, r2, #4
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	440b      	add	r3, r1
 8004606:	761a      	strb	r2, [r3, #24]
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000e100 	.word	0xe000e100
 8004618:	e000ed00 	.word	0xe000ed00

0800461c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	; 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f1c3 0307 	rsb	r3, r3, #7
 8004636:	2b04      	cmp	r3, #4
 8004638:	bf28      	it	cs
 800463a:	2304      	movcs	r3, #4
 800463c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3304      	adds	r3, #4
 8004642:	2b06      	cmp	r3, #6
 8004644:	d902      	bls.n	800464c <NVIC_EncodePriority+0x30>
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3b03      	subs	r3, #3
 800464a:	e000      	b.n	800464e <NVIC_EncodePriority+0x32>
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43da      	mvns	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	401a      	ands	r2, r3
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004664:	f04f 31ff 	mov.w	r1, #4294967295
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	43d9      	mvns	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004674:	4313      	orrs	r3, r2
         );
}
 8004676:	4618      	mov	r0, r3
 8004678:	3724      	adds	r7, #36	; 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3b01      	subs	r3, #1
 8004690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004694:	d301      	bcc.n	800469a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004696:	2301      	movs	r3, #1
 8004698:	e00f      	b.n	80046ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800469a:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <SysTick_Config+0x40>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3b01      	subs	r3, #1
 80046a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046a2:	210f      	movs	r1, #15
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	f7ff ff8e 	bl	80045c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <SysTick_Config+0x40>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046b2:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <SysTick_Config+0x40>)
 80046b4:	2207      	movs	r2, #7
 80046b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	e000e010 	.word	0xe000e010

080046c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff29 	bl	8004528 <__NVIC_SetPriorityGrouping>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046de:	b580      	push	{r7, lr}
 80046e0:	b086      	sub	sp, #24
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046f0:	f7ff ff3e 	bl	8004570 <__NVIC_GetPriorityGrouping>
 80046f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f7ff ff8e 	bl	800461c <NVIC_EncodePriority>
 8004700:	4602      	mov	r2, r0
 8004702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff5d 	bl	80045c8 <__NVIC_SetPriority>
}
 800470e:	bf00      	nop
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	4603      	mov	r3, r0
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff31 	bl	800458c <__NVIC_EnableIRQ>
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ffa2 	bl	8004684 <SysTick_Config>
 8004740:	4603      	mov	r3, r0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004758:	f7ff feb6 	bl	80044c8 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e099      	b.n	800489c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004788:	e00f      	b.n	80047aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800478a:	f7ff fe9d 	bl	80044c8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b05      	cmp	r3, #5
 8004796:	d908      	bls.n	80047aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2203      	movs	r2, #3
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e078      	b.n	800489c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e8      	bne.n	800478a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <HAL_DMA_Init+0x158>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b04      	cmp	r3, #4
 8004802:	d107      	bne.n	8004814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	4313      	orrs	r3, r2
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b04      	cmp	r3, #4
 800483c:	d117      	bne.n	800486e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00e      	beq.n	800486e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb0f 	bl	8004e74 <DMA_CheckFifoParam>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2240      	movs	r2, #64	; 0x40
 8004860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800486a:	2301      	movs	r3, #1
 800486c:	e016      	b.n	800489c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fac6 	bl	8004e08 <DMA_CalcBaseAndBitshift>
 800487c:	4603      	mov	r3, r0
 800487e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	223f      	movs	r2, #63	; 0x3f
 8004886:	409a      	lsls	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	f010803f 	.word	0xf010803f

080048a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_DMA_Start_IT+0x26>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e040      	b.n	8004950 <HAL_DMA_Start_IT+0xa8>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d12f      	bne.n	8004942 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fa58 	bl	8004dac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	223f      	movs	r2, #63	; 0x3f
 8004902:	409a      	lsls	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0216 	orr.w	r2, r2, #22
 8004916:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0208 	orr.w	r2, r2, #8
 800492e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e005      	b.n	800494e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800494a:	2302      	movs	r3, #2
 800494c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800494e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004966:	f7ff fdaf 	bl	80044c8 <HAL_GetTick>
 800496a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d008      	beq.n	800498a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e052      	b.n	8004a30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0216 	bic.w	r2, r2, #22
 8004998:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <HAL_DMA_Abort+0x62>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0208 	bic.w	r2, r2, #8
 80049c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049da:	e013      	b.n	8004a04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049dc:	f7ff fd74 	bl	80044c8 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d90c      	bls.n	8004a04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2203      	movs	r2, #3
 80049fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e015      	b.n	8004a30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e4      	bne.n	80049dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a16:	223f      	movs	r2, #63	; 0x3f
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d004      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e00c      	b.n	8004a70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2205      	movs	r2, #5
 8004a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a88:	4b92      	ldr	r3, [pc, #584]	; (8004cd4 <HAL_DMA_IRQHandler+0x258>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a92      	ldr	r2, [pc, #584]	; (8004cd8 <HAL_DMA_IRQHandler+0x25c>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0a9b      	lsrs	r3, r3, #10
 8004a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01a      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0204 	bic.w	r2, r2, #4
 8004ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae0:	f043 0201 	orr.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aec:	2201      	movs	r2, #1
 8004aee:	409a      	lsls	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	f043 0202 	orr.w	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b22:	2204      	movs	r2, #4
 8004b24:	409a      	lsls	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d012      	beq.n	8004b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b40:	2204      	movs	r2, #4
 8004b42:	409a      	lsls	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f043 0204 	orr.w	r2, r3, #4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	2210      	movs	r2, #16
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d043      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03c      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	2210      	movs	r2, #16
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d024      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
 8004baa:	e01f      	b.n	8004bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4798      	blx	r3
 8004bbc:	e016      	b.n	8004bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0208 	bic.w	r2, r2, #8
 8004bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 808e 	beq.w	8004d1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8086 	beq.w	8004d1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c12:	2220      	movs	r2, #32
 8004c14:	409a      	lsls	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d136      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0216 	bic.w	r2, r2, #22
 8004c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_DMA_IRQHandler+0x1da>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0208 	bic.w	r2, r2, #8
 8004c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6a:	223f      	movs	r2, #63	; 0x3f
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d07d      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
        }
        return;
 8004c92:	e078      	b.n	8004d86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01c      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d108      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d030      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
 8004cc0:	e02b      	b.n	8004d1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d027      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4798      	blx	r3
 8004cd2:	e022      	b.n	8004d1a <HAL_DMA_IRQHandler+0x29e>
 8004cd4:	2000001c 	.word	0x2000001c
 8004cd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0210 	bic.w	r2, r2, #16
 8004cf8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d032      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d022      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2205      	movs	r2, #5
 8004d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d307      	bcc.n	8004d62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f2      	bne.n	8004d46 <HAL_DMA_IRQHandler+0x2ca>
 8004d60:	e000      	b.n	8004d64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4798      	blx	r3
 8004d84:	e000      	b.n	8004d88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d86:	bf00      	nop
    }
  }
}
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop

08004d90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d9e:	b2db      	uxtb	r3, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d108      	bne.n	8004dec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dea:	e007      	b.n	8004dfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	3b10      	subs	r3, #16
 8004e18:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <DMA_CalcBaseAndBitshift+0x64>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e22:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <DMA_CalcBaseAndBitshift+0x68>)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d909      	bls.n	8004e4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	1d1a      	adds	r2, r3, #4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	659a      	str	r2, [r3, #88]	; 0x58
 8004e48:	e007      	b.n	8004e5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	aaaaaaab 	.word	0xaaaaaaab
 8004e70:	0800c7cc 	.word	0x0800c7cc

08004e74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d11f      	bne.n	8004ece <DMA_CheckFifoParam+0x5a>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d856      	bhi.n	8004f42 <DMA_CheckFifoParam+0xce>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <DMA_CheckFifoParam+0x28>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ead 	.word	0x08004ead
 8004ea0:	08004ebf 	.word	0x08004ebf
 8004ea4:	08004ead 	.word	0x08004ead
 8004ea8:	08004f43 	.word	0x08004f43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d046      	beq.n	8004f46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ebc:	e043      	b.n	8004f46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ec6:	d140      	bne.n	8004f4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ecc:	e03d      	b.n	8004f4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	d121      	bne.n	8004f1c <DMA_CheckFifoParam+0xa8>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d837      	bhi.n	8004f4e <DMA_CheckFifoParam+0xda>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <DMA_CheckFifoParam+0x70>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004ef5 	.word	0x08004ef5
 8004ee8:	08004efb 	.word	0x08004efb
 8004eec:	08004ef5 	.word	0x08004ef5
 8004ef0:	08004f0d 	.word	0x08004f0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef8:	e030      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d025      	beq.n	8004f52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0a:	e022      	b.n	8004f52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f14:	d11f      	bne.n	8004f56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f1a:	e01c      	b.n	8004f56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d903      	bls.n	8004f2a <DMA_CheckFifoParam+0xb6>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d003      	beq.n	8004f30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f28:	e018      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2e:	e015      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f40:	e00b      	b.n	8004f5a <DMA_CheckFifoParam+0xe6>
      break;
 8004f42:	bf00      	nop
 8004f44:	e00a      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f46:	bf00      	nop
 8004f48:	e008      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f4a:	bf00      	nop
 8004f4c:	e006      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f4e:	bf00      	nop
 8004f50:	e004      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f5a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b089      	sub	sp, #36	; 0x24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	e16b      	b.n	8005260 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f88:	2201      	movs	r2, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	f040 815a 	bne.w	800525a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d005      	beq.n	8004fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d130      	bne.n	8005020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	2203      	movs	r2, #3
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 0201 	and.w	r2, r3, #1
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	2b03      	cmp	r3, #3
 800502a:	d017      	beq.n	800505c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	2203      	movs	r2, #3
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4313      	orrs	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d123      	bne.n	80050b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	08da      	lsrs	r2, r3, #3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3208      	adds	r2, #8
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	220f      	movs	r2, #15
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	08da      	lsrs	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3208      	adds	r2, #8
 80050aa:	69b9      	ldr	r1, [r7, #24]
 80050ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	2203      	movs	r2, #3
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4013      	ands	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0203 	and.w	r2, r3, #3
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80b4 	beq.w	800525a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	4b60      	ldr	r3, [pc, #384]	; (8005278 <HAL_GPIO_Init+0x30c>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	4a5f      	ldr	r2, [pc, #380]	; (8005278 <HAL_GPIO_Init+0x30c>)
 80050fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005100:	6453      	str	r3, [r2, #68]	; 0x44
 8005102:	4b5d      	ldr	r3, [pc, #372]	; (8005278 <HAL_GPIO_Init+0x30c>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800510e:	4a5b      	ldr	r2, [pc, #364]	; (800527c <HAL_GPIO_Init+0x310>)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	3302      	adds	r3, #2
 8005116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	220f      	movs	r2, #15
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a52      	ldr	r2, [pc, #328]	; (8005280 <HAL_GPIO_Init+0x314>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d02b      	beq.n	8005192 <HAL_GPIO_Init+0x226>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a51      	ldr	r2, [pc, #324]	; (8005284 <HAL_GPIO_Init+0x318>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d025      	beq.n	800518e <HAL_GPIO_Init+0x222>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a50      	ldr	r2, [pc, #320]	; (8005288 <HAL_GPIO_Init+0x31c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01f      	beq.n	800518a <HAL_GPIO_Init+0x21e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a4f      	ldr	r2, [pc, #316]	; (800528c <HAL_GPIO_Init+0x320>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d019      	beq.n	8005186 <HAL_GPIO_Init+0x21a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a4e      	ldr	r2, [pc, #312]	; (8005290 <HAL_GPIO_Init+0x324>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_GPIO_Init+0x216>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a4d      	ldr	r2, [pc, #308]	; (8005294 <HAL_GPIO_Init+0x328>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00d      	beq.n	800517e <HAL_GPIO_Init+0x212>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a4c      	ldr	r2, [pc, #304]	; (8005298 <HAL_GPIO_Init+0x32c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <HAL_GPIO_Init+0x20e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a4b      	ldr	r2, [pc, #300]	; (800529c <HAL_GPIO_Init+0x330>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <HAL_GPIO_Init+0x20a>
 8005172:	2307      	movs	r3, #7
 8005174:	e00e      	b.n	8005194 <HAL_GPIO_Init+0x228>
 8005176:	2308      	movs	r3, #8
 8005178:	e00c      	b.n	8005194 <HAL_GPIO_Init+0x228>
 800517a:	2306      	movs	r3, #6
 800517c:	e00a      	b.n	8005194 <HAL_GPIO_Init+0x228>
 800517e:	2305      	movs	r3, #5
 8005180:	e008      	b.n	8005194 <HAL_GPIO_Init+0x228>
 8005182:	2304      	movs	r3, #4
 8005184:	e006      	b.n	8005194 <HAL_GPIO_Init+0x228>
 8005186:	2303      	movs	r3, #3
 8005188:	e004      	b.n	8005194 <HAL_GPIO_Init+0x228>
 800518a:	2302      	movs	r3, #2
 800518c:	e002      	b.n	8005194 <HAL_GPIO_Init+0x228>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <HAL_GPIO_Init+0x228>
 8005192:	2300      	movs	r3, #0
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	f002 0203 	and.w	r2, r2, #3
 800519a:	0092      	lsls	r2, r2, #2
 800519c:	4093      	lsls	r3, r2
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a4:	4935      	ldr	r1, [pc, #212]	; (800527c <HAL_GPIO_Init+0x310>)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	3302      	adds	r3, #2
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b2:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <HAL_GPIO_Init+0x334>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051d6:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <HAL_GPIO_Init+0x334>)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051dc:	4b30      	ldr	r3, [pc, #192]	; (80052a0 <HAL_GPIO_Init+0x334>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005200:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <HAL_GPIO_Init+0x334>)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005206:	4b26      	ldr	r3, [pc, #152]	; (80052a0 <HAL_GPIO_Init+0x334>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800522a:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_GPIO_Init+0x334>)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_GPIO_Init+0x334>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005254:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <HAL_GPIO_Init+0x334>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	f67f ae90 	bls.w	8004f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	3724      	adds	r7, #36	; 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800
 800527c:	40013800 	.word	0x40013800
 8005280:	40020000 	.word	0x40020000
 8005284:	40020400 	.word	0x40020400
 8005288:	40020800 	.word	0x40020800
 800528c:	40020c00 	.word	0x40020c00
 8005290:	40021000 	.word	0x40021000
 8005294:	40021400 	.word	0x40021400
 8005298:	40021800 	.word	0x40021800
 800529c:	40021c00 	.word	0x40021c00
 80052a0:	40013c00 	.word	0x40013c00

080052a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
 80052b0:	4613      	mov	r3, r2
 80052b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052b4:	787b      	ldrb	r3, [r7, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052c0:	e003      	b.n	80052ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052c2:	887b      	ldrh	r3, [r7, #2]
 80052c4:	041a      	lsls	r2, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	619a      	str	r2, [r3, #24]
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e12b      	b.n	8005542 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fd fcc4 	bl	8002c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	; 0x24
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800532a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800533a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800533c:	f003 fb20 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 8005340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4a81      	ldr	r2, [pc, #516]	; (800554c <HAL_I2C_Init+0x274>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d807      	bhi.n	800535c <HAL_I2C_Init+0x84>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a80      	ldr	r2, [pc, #512]	; (8005550 <HAL_I2C_Init+0x278>)
 8005350:	4293      	cmp	r3, r2
 8005352:	bf94      	ite	ls
 8005354:	2301      	movls	r3, #1
 8005356:	2300      	movhi	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	e006      	b.n	800536a <HAL_I2C_Init+0x92>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a7d      	ldr	r2, [pc, #500]	; (8005554 <HAL_I2C_Init+0x27c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	bf94      	ite	ls
 8005364:	2301      	movls	r3, #1
 8005366:	2300      	movhi	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e0e7      	b.n	8005542 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a78      	ldr	r2, [pc, #480]	; (8005558 <HAL_I2C_Init+0x280>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	0c9b      	lsrs	r3, r3, #18
 800537c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a6a      	ldr	r2, [pc, #424]	; (800554c <HAL_I2C_Init+0x274>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d802      	bhi.n	80053ac <HAL_I2C_Init+0xd4>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3301      	adds	r3, #1
 80053aa:	e009      	b.n	80053c0 <HAL_I2C_Init+0xe8>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	4a69      	ldr	r2, [pc, #420]	; (800555c <HAL_I2C_Init+0x284>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	3301      	adds	r3, #1
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	495c      	ldr	r1, [pc, #368]	; (800554c <HAL_I2C_Init+0x274>)
 80053dc:	428b      	cmp	r3, r1
 80053de:	d819      	bhi.n	8005414 <HAL_I2C_Init+0x13c>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	1e59      	subs	r1, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053f4:	400b      	ands	r3, r1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_I2C_Init+0x138>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1e59      	subs	r1, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	fbb1 f3f3 	udiv	r3, r1, r3
 8005408:	3301      	adds	r3, #1
 800540a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540e:	e051      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005410:	2304      	movs	r3, #4
 8005412:	e04f      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <HAL_I2C_Init+0x168>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1e58      	subs	r0, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6859      	ldr	r1, [r3, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	440b      	add	r3, r1
 800542a:	fbb0 f3f3 	udiv	r3, r0, r3
 800542e:	3301      	adds	r3, #1
 8005430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e012      	b.n	8005466 <HAL_I2C_Init+0x18e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1e58      	subs	r0, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	0099      	lsls	r1, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	fbb0 f3f3 	udiv	r3, r0, r3
 8005456:	3301      	adds	r3, #1
 8005458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800545c:	2b00      	cmp	r3, #0
 800545e:	bf0c      	ite	eq
 8005460:	2301      	moveq	r3, #1
 8005462:	2300      	movne	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Init+0x196>
 800546a:	2301      	movs	r3, #1
 800546c:	e022      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10e      	bne.n	8005494 <HAL_I2C_Init+0x1bc>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1e58      	subs	r0, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	440b      	add	r3, r1
 8005484:	fbb0 f3f3 	udiv	r3, r0, r3
 8005488:	3301      	adds	r3, #1
 800548a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800548e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005492:	e00f      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1e58      	subs	r0, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	0099      	lsls	r1, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054aa:	3301      	adds	r3, #1
 80054ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	6809      	ldr	r1, [r1, #0]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6911      	ldr	r1, [r2, #16]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68d2      	ldr	r2, [r2, #12]
 80054ee:	4311      	orrs	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	000186a0 	.word	0x000186a0
 8005550:	001e847f 	.word	0x001e847f
 8005554:	003d08ff 	.word	0x003d08ff
 8005558:	431bde83 	.word	0x431bde83
 800555c:	10624dd3 	.word	0x10624dd3

08005560 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	461a      	mov	r2, r3
 800556c:	460b      	mov	r3, r1
 800556e:	817b      	strh	r3, [r7, #10]
 8005570:	4613      	mov	r3, r2
 8005572:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005574:	f7fe ffa8 	bl	80044c8 <HAL_GetTick>
 8005578:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b20      	cmp	r3, #32
 8005584:	f040 80e0 	bne.w	8005748 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2319      	movs	r3, #25
 800558e:	2201      	movs	r2, #1
 8005590:	4970      	ldr	r1, [pc, #448]	; (8005754 <HAL_I2C_Master_Transmit+0x1f4>)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f002 fb7e 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
 80055a0:	e0d3      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_I2C_Master_Transmit+0x50>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e0cc      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ea>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d007      	beq.n	80055d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2221      	movs	r2, #33	; 0x21
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2210      	movs	r2, #16
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	893a      	ldrh	r2, [r7, #8]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a50      	ldr	r2, [pc, #320]	; (8005758 <HAL_I2C_Master_Transmit+0x1f8>)
 8005616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005618:	8979      	ldrh	r1, [r7, #10]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f002 f8aa 	bl	8007778 <I2C_MasterRequestWrite>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e08d      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005644:	e066      	b.n	8005714 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	6a39      	ldr	r1, [r7, #32]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f002 fbf8 	bl	8007e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b04      	cmp	r3, #4
 800565c:	d107      	bne.n	800566e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e06b      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	781a      	ldrb	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d11b      	bne.n	80056e8 <HAL_I2C_Master_Transmit+0x188>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d017      	beq.n	80056e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	6a39      	ldr	r1, [r7, #32]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f002 fbe8 	bl	8007ec2 <I2C_WaitOnBTFFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d107      	bne.n	8005710 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e01a      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d194      	bne.n	8005646 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e000      	b.n	800574a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	00100002 	.word	0x00100002
 8005758:	ffff0000 	.word	0xffff0000

0800575c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	; 0x30
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	461a      	mov	r2, r3
 8005768:	460b      	mov	r3, r1
 800576a:	817b      	strh	r3, [r7, #10]
 800576c:	4613      	mov	r3, r2
 800576e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005770:	f7fe feaa 	bl	80044c8 <HAL_GetTick>
 8005774:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b20      	cmp	r3, #32
 8005780:	f040 820b 	bne.w	8005b9a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	2319      	movs	r3, #25
 800578a:	2201      	movs	r2, #1
 800578c:	497c      	ldr	r1, [pc, #496]	; (8005980 <HAL_I2C_Master_Receive+0x224>)
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f002 fa80 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800579a:	2302      	movs	r3, #2
 800579c:	e1fe      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_I2C_Master_Receive+0x50>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e1f7      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d007      	beq.n	80057d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2222      	movs	r2, #34	; 0x22
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2210      	movs	r2, #16
 80057ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	893a      	ldrh	r2, [r7, #8]
 8005802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a5c      	ldr	r2, [pc, #368]	; (8005984 <HAL_I2C_Master_Receive+0x228>)
 8005812:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005814:	8979      	ldrh	r1, [r7, #10]
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f002 f82e 	bl	800787c <I2C_MasterRequestRead>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e1b8      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d113      	bne.n	800585a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005832:	2300      	movs	r3, #0
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	623b      	str	r3, [r7, #32]
 8005846:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e18c      	b.n	8005b74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	2b01      	cmp	r3, #1
 8005860:	d11b      	bne.n	800589a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e16c      	b.n	8005b74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d11b      	bne.n	80058da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c2:	2300      	movs	r3, #0
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	e14c      	b.n	8005b74 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005900:	e138      	b.n	8005b74 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	2b03      	cmp	r3, #3
 8005908:	f200 80f1 	bhi.w	8005aee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005910:	2b01      	cmp	r3, #1
 8005912:	d123      	bne.n	800595c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f002 fb45 	bl	8007fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e139      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	855a      	strh	r2, [r3, #42]	; 0x2a
 800595a:	e10b      	b.n	8005b74 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005960:	2b02      	cmp	r3, #2
 8005962:	d14e      	bne.n	8005a02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	2200      	movs	r2, #0
 800596c:	4906      	ldr	r1, [pc, #24]	; (8005988 <HAL_I2C_Master_Receive+0x22c>)
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f002 f990 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e10e      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
 800597e:	bf00      	nop
 8005980:	00100002 	.word	0x00100002
 8005984:	ffff0000 	.word	0xffff0000
 8005988:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800599a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a00:	e0b8      	b.n	8005b74 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4966      	ldr	r1, [pc, #408]	; (8005ba4 <HAL_I2C_Master_Receive+0x448>)
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f002 f941 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0bf      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	494f      	ldr	r1, [pc, #316]	; (8005ba4 <HAL_I2C_Master_Receive+0x448>)
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f002 f913 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e091      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005aec:	e042      	b.n	8005b74 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f002 fa58 	bl	8007fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e04c      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d118      	bne.n	8005b74 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f47f aec2 	bne.w	8005902 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e000      	b.n	8005b9c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
  }
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3728      	adds	r7, #40	; 0x28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	00010004 	.word	0x00010004

08005ba8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	817b      	strh	r3, [r7, #10]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	813b      	strh	r3, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bc2:	f7fe fc81 	bl	80044c8 <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	f040 80d9 	bne.w	8005d88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2319      	movs	r3, #25
 8005bdc:	2201      	movs	r2, #1
 8005bde:	496d      	ldr	r1, [pc, #436]	; (8005d94 <HAL_I2C_Mem_Write+0x1ec>)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f002 f857 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0cc      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2C_Mem_Write+0x56>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0c5      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d007      	beq.n	8005c24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2221      	movs	r2, #33	; 0x21
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2240      	movs	r2, #64	; 0x40
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a4d      	ldr	r2, [pc, #308]	; (8005d98 <HAL_I2C_Mem_Write+0x1f0>)
 8005c64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c66:	88f8      	ldrh	r0, [r7, #6]
 8005c68:	893a      	ldrh	r2, [r7, #8]
 8005c6a:	8979      	ldrh	r1, [r7, #10]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f001 fece 	bl	8007a18 <I2C_RequestMemoryWrite>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d052      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e081      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f002 f8d8 	bl	8007e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d107      	bne.n	8005cae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e06b      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d11b      	bne.n	8005d28 <HAL_I2C_Mem_Write+0x180>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d017      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1aa      	bne.n	8005c86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f002 f8c4 	bl	8007ec2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d107      	bne.n	8005d58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e016      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	00100002 	.word	0x00100002
 8005d98:	ffff0000 	.word	0xffff0000

08005d9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	607a      	str	r2, [r7, #4]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	460b      	mov	r3, r1
 8005daa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005dac:	f7fe fb8c 	bl	80044c8 <HAL_GetTick>
 8005db0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005db2:	2301      	movs	r3, #1
 8005db4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	f040 8111 	bne.w	8005fe6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	2319      	movs	r3, #25
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4988      	ldr	r1, [pc, #544]	; (8005ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f001 ff60 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e104      	b.n	8005fe8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_I2C_IsDeviceReady+0x50>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e0fd      	b.n	8005fe8 <HAL_I2C_IsDeviceReady+0x24c>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d007      	beq.n	8005e12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0201 	orr.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2224      	movs	r2, #36	; 0x24
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a70      	ldr	r2, [pc, #448]	; (8005ff4 <HAL_I2C_IsDeviceReady+0x258>)
 8005e34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f001 ff1e 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00d      	beq.n	8005e7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6c:	d103      	bne.n	8005e76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e0b6      	b.n	8005fe8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e7a:	897b      	ldrh	r3, [r7, #10]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e8a:	f7fe fb1d 	bl	80044c8 <HAL_GetTick>
 8005e8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2301      	moveq	r3, #1
 8005eb8:	2300      	movne	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ebe:	e025      	b.n	8005f0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ec0:	f7fe fb02 	bl	80044c8 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <HAL_I2C_IsDeviceReady+0x13a>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	22a0      	movs	r2, #160	; 0xa0
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	bf0c      	ite	eq
 8005eec:	2301      	moveq	r3, #1
 8005eee:	2300      	movne	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f02:	bf0c      	ite	eq
 8005f04:	2301      	moveq	r3, #1
 8005f06:	2300      	movne	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2ba0      	cmp	r3, #160	; 0xa0
 8005f16:	d005      	beq.n	8005f24 <HAL_I2C_IsDeviceReady+0x188>
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <HAL_I2C_IsDeviceReady+0x188>
 8005f1e:	7dbb      	ldrb	r3, [r7, #22]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0cd      	beq.n	8005ec0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d129      	bne.n	8005f8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	2319      	movs	r3, #25
 8005f66:	2201      	movs	r2, #1
 8005f68:	4921      	ldr	r1, [pc, #132]	; (8005ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f001 fe92 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e036      	b.n	8005fe8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e02c      	b.n	8005fe8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fa6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2319      	movs	r3, #25
 8005fae:	2201      	movs	r2, #1
 8005fb0:	490f      	ldr	r1, [pc, #60]	; (8005ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f001 fe6e 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e012      	b.n	8005fe8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	f4ff af32 	bcc.w	8005e36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005fe6:	2302      	movs	r3, #2
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	00100002 	.word	0x00100002
 8005ff4:	ffff0000 	.word	0xffff0000

08005ff8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006018:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006020:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b10      	cmp	r3, #16
 8006026:	d003      	beq.n	8006030 <HAL_I2C_EV_IRQHandler+0x38>
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	f040 80bd 	bne.w	80061aa <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10d      	bne.n	8006066 <HAL_I2C_EV_IRQHandler+0x6e>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006050:	d003      	beq.n	800605a <HAL_I2C_EV_IRQHandler+0x62>
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006058:	d101      	bne.n	800605e <HAL_I2C_EV_IRQHandler+0x66>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <HAL_I2C_EV_IRQHandler+0x68>
 800605e:	2300      	movs	r3, #0
 8006060:	2b01      	cmp	r3, #1
 8006062:	f000 812e 	beq.w	80062c2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <HAL_I2C_EV_IRQHandler+0x92>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	0a5b      	lsrs	r3, r3, #9
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d006      	beq.n	800608a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f002 f818 	bl	80080b2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fd62 	bl	8006b4c <I2C_Master_SB>
 8006088:	e08e      	b.n	80061a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	08db      	lsrs	r3, r3, #3
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_I2C_EV_IRQHandler+0xb2>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	0a5b      	lsrs	r3, r3, #9
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fdd8 	bl	8006c58 <I2C_Master_ADD10>
 80060a8:	e07e      	b.n	80061a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_I2C_EV_IRQHandler+0xd2>
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	0a5b      	lsrs	r3, r3, #9
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fdf2 	bl	8006cac <I2C_Master_ADDR>
 80060c8:	e06e      	b.n	80061a8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	089b      	lsrs	r3, r3, #2
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d037      	beq.n	8006146 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e4:	f000 80ef 	beq.w	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	09db      	lsrs	r3, r3, #7
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00f      	beq.n	8006114 <HAL_I2C_EV_IRQHandler+0x11c>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	0a9b      	lsrs	r3, r3, #10
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <HAL_I2C_EV_IRQHandler+0x11c>
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	089b      	lsrs	r3, r3, #2
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f9ef 	bl	80064f0 <I2C_MasterTransmit_TXE>
 8006112:	e049      	b.n	80061a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80d2 	beq.w	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	0a5b      	lsrs	r3, r3, #9
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80cb 	beq.w	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b10      	cmp	r3, #16
 8006134:	d103      	bne.n	800613e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fa76 	bl	8006628 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800613c:	e0c3      	b.n	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fada 	bl	80066f8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006144:	e0bf      	b.n	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006154:	f000 80b7 	beq.w	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	099b      	lsrs	r3, r3, #6
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00f      	beq.n	8006184 <HAL_I2C_EV_IRQHandler+0x18c>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	0a9b      	lsrs	r3, r3, #10
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d009      	beq.n	8006184 <HAL_I2C_EV_IRQHandler+0x18c>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fb4a 	bl	8006816 <I2C_MasterReceive_RXNE>
 8006182:	e011      	b.n	80061a8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 809a 	beq.w	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	0a5b      	lsrs	r3, r3, #9
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8093 	beq.w	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fbe9 	bl	8006978 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061a6:	e08e      	b.n	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80061a8:	e08d      	b.n	80062c6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e007      	b.n	80061cc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d012      	beq.n	80061fe <HAL_I2C_EV_IRQHandler+0x206>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	0a5b      	lsrs	r3, r3, #9
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80061f4:	69b9      	ldr	r1, [r7, #24]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 ffa7 	bl	800714a <I2C_Slave_ADDR>
 80061fc:	e066      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <HAL_I2C_EV_IRQHandler+0x226>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	0a5b      	lsrs	r3, r3, #9
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 ffdc 	bl	80071d4 <I2C_Slave_STOPF>
 800621c:	e056      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b21      	cmp	r3, #33	; 0x21
 8006222:	d002      	beq.n	800622a <HAL_I2C_EV_IRQHandler+0x232>
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	2b29      	cmp	r3, #41	; 0x29
 8006228:	d125      	bne.n	8006276 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	09db      	lsrs	r3, r3, #7
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00f      	beq.n	8006256 <HAL_I2C_EV_IRQHandler+0x25e>
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	0a9b      	lsrs	r3, r3, #10
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_I2C_EV_IRQHandler+0x25e>
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	089b      	lsrs	r3, r3, #2
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 febd 	bl	8006fce <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006254:	e039      	b.n	80062ca <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d033      	beq.n	80062ca <HAL_I2C_EV_IRQHandler+0x2d2>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	0a5b      	lsrs	r3, r3, #9
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d02d      	beq.n	80062ca <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 feea 	bl	8007048 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006274:	e029      	b.n	80062ca <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	099b      	lsrs	r3, r3, #6
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00f      	beq.n	80062a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	0a9b      	lsrs	r3, r3, #10
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fef5 	bl	800708a <I2C_SlaveReceive_RXNE>
 80062a0:	e014      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00e      	beq.n	80062cc <HAL_I2C_EV_IRQHandler+0x2d4>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	0a5b      	lsrs	r3, r3, #9
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 ff23 	bl	8007106 <I2C_SlaveReceive_BTF>
 80062c0:	e004      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80062c2:	bf00      	nop
 80062c4:	e002      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80062cc:	3720      	adds	r7, #32
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00e      	beq.n	8006320 <HAL_I2C_ER_IRQHandler+0x4e>
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d008      	beq.n	8006320 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800631e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	0a5b      	lsrs	r3, r3, #9
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <HAL_I2C_ER_IRQHandler+0x78>
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	f043 0302 	orr.w	r3, r3, #2
 800633e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006348:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	0a9b      	lsrs	r3, r3, #10
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d03f      	beq.n	80063d6 <HAL_I2C_ER_IRQHandler+0x104>
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d039      	beq.n	80063d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006362:	7efb      	ldrb	r3, [r7, #27]
 8006364:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006374:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800637c:	7ebb      	ldrb	r3, [r7, #26]
 800637e:	2b20      	cmp	r3, #32
 8006380:	d112      	bne.n	80063a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10f      	bne.n	80063a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006388:	7cfb      	ldrb	r3, [r7, #19]
 800638a:	2b21      	cmp	r3, #33	; 0x21
 800638c:	d008      	beq.n	80063a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800638e:	7cfb      	ldrb	r3, [r7, #19]
 8006390:	2b29      	cmp	r3, #41	; 0x29
 8006392:	d005      	beq.n	80063a0 <HAL_I2C_ER_IRQHandler+0xce>
 8006394:	7cfb      	ldrb	r3, [r7, #19]
 8006396:	2b28      	cmp	r3, #40	; 0x28
 8006398:	d106      	bne.n	80063a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b21      	cmp	r3, #33	; 0x21
 800639e:	d103      	bne.n	80063a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 f847 	bl	8007434 <I2C_Slave_AF>
 80063a6:	e016      	b.n	80063d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	f043 0304 	orr.w	r3, r3, #4
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063ba:	7efb      	ldrb	r3, [r7, #27]
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d002      	beq.n	80063c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80063c0:	7efb      	ldrb	r3, [r7, #27]
 80063c2:	2b40      	cmp	r3, #64	; 0x40
 80063c4:	d107      	bne.n	80063d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	0adb      	lsrs	r3, r3, #11
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00e      	beq.n	8006400 <HAL_I2C_ER_IRQHandler+0x12e>
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	0a1b      	lsrs	r3, r3, #8
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	f043 0308 	orr.w	r3, r3, #8
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80063fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	2b00      	cmp	r3, #0
 8006404:	d008      	beq.n	8006418 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f87e 	bl	8007514 <I2C_ITError>
  }
}
 8006418:	bf00      	nop
 800641a:	3728      	adds	r7, #40	; 0x28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
 800647c:	4613      	mov	r3, r2
 800647e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006506:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	d150      	bne.n	80065b8 <I2C_MasterTransmit_TXE+0xc8>
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	2b21      	cmp	r3, #33	; 0x21
 800651a:	d14d      	bne.n	80065b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b08      	cmp	r3, #8
 8006520:	d01d      	beq.n	800655e <I2C_MasterTransmit_TXE+0x6e>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b20      	cmp	r3, #32
 8006526:	d01a      	beq.n	800655e <I2C_MasterTransmit_TXE+0x6e>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800652e:	d016      	beq.n	800655e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800653e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2211      	movs	r2, #17
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff ff62 	bl	8006420 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800655c:	e060      	b.n	8006620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800656c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d107      	bne.n	80065a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff ff7d 	bl	80064a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065a6:	e03b      	b.n	8006620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ff35 	bl	8006420 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065b6:	e033      	b.n	8006620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	2b21      	cmp	r3, #33	; 0x21
 80065bc:	d005      	beq.n	80065ca <I2C_MasterTransmit_TXE+0xda>
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d12d      	bne.n	8006620 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b22      	cmp	r3, #34	; 0x22
 80065c8:	d12a      	bne.n	8006620 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d108      	bne.n	80065e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80065e4:	e01c      	b.n	8006620 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d103      	bne.n	80065fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f880 	bl	80066f8 <I2C_MemoryTransmit_TXE_BTF>
}
 80065f8:	e012      	b.n	8006620 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	781a      	ldrb	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800661e:	e7ff      	b.n	8006620 <I2C_MasterTransmit_TXE+0x130>
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b21      	cmp	r3, #33	; 0x21
 8006640:	d156      	bne.n	80066f0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d012      	beq.n	8006672 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006670:	e03e      	b.n	80066f0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d01d      	beq.n	80066b4 <I2C_MasterTransmit_BTF+0x8c>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b20      	cmp	r3, #32
 800667c:	d01a      	beq.n	80066b4 <I2C_MasterTransmit_BTF+0x8c>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006684:	d016      	beq.n	80066b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006694:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2211      	movs	r2, #17
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff feb7 	bl	8006420 <HAL_I2C_MasterTxCpltCallback>
}
 80066b2:	e01d      	b.n	80066f0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fe98 	bl	8006420 <HAL_I2C_MasterTxCpltCallback>
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006706:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670c:	2b00      	cmp	r3, #0
 800670e:	d11d      	bne.n	800674c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d10b      	bne.n	8006730 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006728:	1c9a      	adds	r2, r3, #2
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800672e:	e06e      	b.n	800680e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006734:	b29b      	uxth	r3, r3
 8006736:	121b      	asrs	r3, r3, #8
 8006738:	b2da      	uxtb	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	651a      	str	r2, [r3, #80]	; 0x50
}
 800674a:	e060      	b.n	800680e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006750:	2b01      	cmp	r3, #1
 8006752:	d10b      	bne.n	800676c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006758:	b2da      	uxtb	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800676a:	e050      	b.n	800680e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006770:	2b02      	cmp	r3, #2
 8006772:	d14c      	bne.n	800680e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	2b22      	cmp	r3, #34	; 0x22
 8006778:	d108      	bne.n	800678c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	e040      	b.n	800680e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d015      	beq.n	80067c2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b21      	cmp	r3, #33	; 0x21
 800679a:	d112      	bne.n	80067c2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067c0:	e025      	b.n	800680e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d120      	bne.n	800680e <I2C_MemoryTransmit_TXE_BTF+0x116>
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b21      	cmp	r3, #33	; 0x21
 80067d0:	d11d      	bne.n	800680e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067e0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff fe49 	bl	80064a0 <HAL_I2C_MemTxCpltCallback>
}
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b22      	cmp	r3, #34	; 0x22
 8006828:	f040 80a2 	bne.w	8006970 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d921      	bls.n	800687e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b03      	cmp	r3, #3
 8006868:	f040 8082 	bne.w	8006970 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800687c:	e078      	b.n	8006970 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	2b02      	cmp	r3, #2
 8006884:	d074      	beq.n	8006970 <I2C_MasterReceive_RXNE+0x15a>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d002      	beq.n	8006892 <I2C_MasterReceive_RXNE+0x7c>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d16e      	bne.n	8006970 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fb56 	bl	8007f44 <I2C_WaitOnSTOPRequestThroughIT>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d142      	bne.n	8006924 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b40      	cmp	r3, #64	; 0x40
 80068f6:	d10a      	bne.n	800690e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff fdd4 	bl	80064b4 <HAL_I2C_MemRxCpltCallback>
}
 800690c:	e030      	b.n	8006970 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2212      	movs	r2, #18
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff fd89 	bl	8006434 <HAL_I2C_MasterRxCpltCallback>
}
 8006922:	e025      	b.n	8006970 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006932:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fdac 	bl	80064c8 <HAL_I2C_ErrorCallback>
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b04      	cmp	r3, #4
 800698e:	d11b      	bne.n	80069c8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800699e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80069c6:	e0bd      	b.n	8006b44 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d129      	bne.n	8006a26 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d00a      	beq.n	80069fe <I2C_MasterReceive_BTF+0x86>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d007      	beq.n	80069fe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a24:	e08e      	b.n	8006b44 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d176      	bne.n	8006b1e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d002      	beq.n	8006a3c <I2C_MasterReceive_BTF+0xc4>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d108      	bne.n	8006a4e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e019      	b.n	8006a82 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d002      	beq.n	8006a5a <I2C_MasterReceive_BTF+0xe2>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d108      	bne.n	8006a6c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e00a      	b.n	8006a82 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b10      	cmp	r3, #16
 8006a70:	d007      	beq.n	8006a82 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006adc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d10a      	bne.n	8006b08 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fcd7 	bl	80064b4 <HAL_I2C_MemRxCpltCallback>
}
 8006b06:	e01d      	b.n	8006b44 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2212      	movs	r2, #18
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff fc8c 	bl	8006434 <HAL_I2C_MasterRxCpltCallback>
}
 8006b1c:	e012      	b.n	8006b44 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d117      	bne.n	8006b90 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d109      	bne.n	8006b7c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b78:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b7a:	e067      	b.n	8006c4c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f043 0301 	orr.w	r3, r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	611a      	str	r2, [r3, #16]
}
 8006b8e:	e05d      	b.n	8006c4c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b98:	d133      	bne.n	8006c02 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b21      	cmp	r3, #33	; 0x21
 8006ba4:	d109      	bne.n	8006bba <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bb6:	611a      	str	r2, [r3, #16]
 8006bb8:	e008      	b.n	8006bcc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d004      	beq.n	8006bde <I2C_Master_SB+0x92>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d032      	beq.n	8006c4c <I2C_Master_SB+0x100>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02d      	beq.n	8006c4c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bfe:	605a      	str	r2, [r3, #4]
}
 8006c00:	e024      	b.n	8006c4c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10e      	bne.n	8006c28 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	11db      	asrs	r3, r3, #7
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	f003 0306 	and.w	r3, r3, #6
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f063 030f 	orn	r3, r3, #15
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	611a      	str	r2, [r3, #16]
}
 8006c26:	e011      	b.n	8006c4c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d10d      	bne.n	8006c4c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	11db      	asrs	r3, r3, #7
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f003 0306 	and.w	r3, r3, #6
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	f063 030e 	orn	r3, r3, #14
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	611a      	str	r2, [r3, #16]
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <I2C_Master_ADD10+0x26>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d108      	bne.n	8006c90 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00c      	beq.n	8006ca0 <I2C_Master_ADD10+0x48>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b091      	sub	sp, #68	; 0x44
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b22      	cmp	r3, #34	; 0x22
 8006cd4:	f040 8169 	bne.w	8006faa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <I2C_Master_ADDR+0x54>
 8006ce0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	d10b      	bne.n	8006d00 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	633b      	str	r3, [r7, #48]	; 0x30
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	e160      	b.n	8006fc2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11d      	bne.n	8006d44 <I2C_Master_ADDR+0x98>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d10:	d118      	bne.n	8006d44 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d12:	2300      	movs	r3, #0
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d36:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	651a      	str	r2, [r3, #80]	; 0x50
 8006d42:	e13e      	b.n	8006fc2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d113      	bne.n	8006d76 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e115      	b.n	8006fa2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	f040 808a 	bne.w	8006e96 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d88:	d137      	bne.n	8006dfa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d98:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da8:	d113      	bne.n	8006dd2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dba:	2300      	movs	r3, #0
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	e0e7      	b.n	8006fa2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	623b      	str	r3, [r7, #32]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	623b      	str	r3, [r7, #32]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	e0d3      	b.n	8006fa2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d02e      	beq.n	8006e5e <I2C_Master_ADDR+0x1b2>
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d02b      	beq.n	8006e5e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e08:	2b12      	cmp	r3, #18
 8006e0a:	d102      	bne.n	8006e12 <I2C_Master_ADDR+0x166>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d125      	bne.n	8006e5e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d00e      	beq.n	8006e36 <I2C_Master_ADDR+0x18a>
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d00b      	beq.n	8006e36 <I2C_Master_ADDR+0x18a>
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d008      	beq.n	8006e36 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e007      	b.n	8006e46 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e44:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e46:	2300      	movs	r3, #0
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	e0a1      	b.n	8006fa2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e085      	b.n	8006fa2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d14d      	bne.n	8006f3c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d016      	beq.n	8006ed4 <I2C_Master_ADDR+0x228>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d013      	beq.n	8006ed4 <I2C_Master_ADDR+0x228>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	d010      	beq.n	8006ed4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	e007      	b.n	8006ee4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ee2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef2:	d117      	bne.n	8006f24 <I2C_Master_ADDR+0x278>
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006efa:	d00b      	beq.n	8006f14 <I2C_Master_ADDR+0x268>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d008      	beq.n	8006f14 <I2C_Master_ADDR+0x268>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d005      	beq.n	8006f14 <I2C_Master_ADDR+0x268>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	2b10      	cmp	r3, #16
 8006f0c:	d002      	beq.n	8006f14 <I2C_Master_ADDR+0x268>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d107      	bne.n	8006f24 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	e032      	b.n	8006fa2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f4a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5a:	d117      	bne.n	8006f8c <I2C_Master_ADDR+0x2e0>
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f62:	d00b      	beq.n	8006f7c <I2C_Master_ADDR+0x2d0>
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d008      	beq.n	8006f7c <I2C_Master_ADDR+0x2d0>
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d005      	beq.n	8006f7c <I2C_Master_ADDR+0x2d0>
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d002      	beq.n	8006f7c <I2C_Master_ADDR+0x2d0>
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d107      	bne.n	8006f8c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006fa8:	e00b      	b.n	8006fc2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
}
 8006fc0:	e7ff      	b.n	8006fc2 <I2C_Master_ADDR+0x316>
 8006fc2:	bf00      	nop
 8006fc4:	3744      	adds	r7, #68	; 0x44
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fdc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d02b      	beq.n	8007040 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	781a      	ldrb	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d114      	bne.n	8007040 <I2C_SlaveTransmit_TXE+0x72>
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b29      	cmp	r3, #41	; 0x29
 800701a:	d111      	bne.n	8007040 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800702a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2221      	movs	r2, #33	; 0x21
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2228      	movs	r2, #40	; 0x28
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff fa04 	bl	8006448 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d011      	beq.n	800707e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	b29a      	uxth	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007098:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d02c      	beq.n	80070fe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d114      	bne.n	80070fe <I2C_SlaveReceive_RXNE+0x74>
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	2b2a      	cmp	r3, #42	; 0x2a
 80070d8:	d111      	bne.n	80070fe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2222      	movs	r2, #34	; 0x22
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2228      	movs	r2, #40	; 0x28
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff f9af 	bl	800645c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d012      	beq.n	800713e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007164:	2b28      	cmp	r3, #40	; 0x28
 8007166:	d127      	bne.n	80071b8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007176:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	089b      	lsrs	r3, r3, #2
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	09db      	lsrs	r3, r3, #7
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	81bb      	strh	r3, [r7, #12]
 800719a:	e002      	b.n	80071a2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80071aa:	89ba      	ldrh	r2, [r7, #12]
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff f95d 	bl	8006470 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80071b6:	e008      	b.n	80071ca <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0202 	mvn.w	r2, #2
 80071c0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80071f4:	2300      	movs	r3, #0
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	60bb      	str	r3, [r7, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007220:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800722c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007230:	d172      	bne.n	8007318 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b22      	cmp	r3, #34	; 0x22
 8007236:	d002      	beq.n	800723e <I2C_Slave_STOPF+0x6a>
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b2a      	cmp	r3, #42	; 0x2a
 800723c:	d135      	bne.n	80072aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f043 0204 	orr.w	r2, r3, #4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007270:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	4618      	mov	r0, r3
 8007278:	f7fd fd8a 	bl	8004d90 <HAL_DMA_GetState>
 800727c:	4603      	mov	r3, r0
 800727e:	2b01      	cmp	r3, #1
 8007280:	d049      	beq.n	8007316 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	4a69      	ldr	r2, [pc, #420]	; (800742c <I2C_Slave_STOPF+0x258>)
 8007288:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	4618      	mov	r0, r3
 8007290:	f7fd fbd2 	bl	8004a38 <HAL_DMA_Abort_IT>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d03d      	beq.n	8007316 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072a8:	e035      	b.n	8007316 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f043 0204 	orr.w	r2, r3, #4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fd fd54 	bl	8004d90 <HAL_DMA_GetState>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d014      	beq.n	8007318 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f2:	4a4e      	ldr	r2, [pc, #312]	; (800742c <I2C_Slave_STOPF+0x258>)
 80072f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd fb9c 	bl	8004a38 <HAL_DMA_Abort_IT>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d008      	beq.n	8007318 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	e000      	b.n	8007318 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007316:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d03e      	beq.n	80073a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b04      	cmp	r3, #4
 800732e:	d112      	bne.n	8007356 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d112      	bne.n	800738a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f043 0204 	orr.w	r2, r3, #4
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f8b3 	bl	8007514 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80073ae:	e039      	b.n	8007424 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b2a      	cmp	r3, #42	; 0x2a
 80073b4:	d109      	bne.n	80073ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2228      	movs	r2, #40	; 0x28
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff f849 	bl	800645c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b28      	cmp	r3, #40	; 0x28
 80073d4:	d111      	bne.n	80073fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a15      	ldr	r2, [pc, #84]	; (8007430 <I2C_Slave_STOPF+0x25c>)
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff f84a 	bl	800648c <HAL_I2C_ListenCpltCallback>
}
 80073f8:	e014      	b.n	8007424 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	2b22      	cmp	r3, #34	; 0x22
 8007400:	d002      	beq.n	8007408 <I2C_Slave_STOPF+0x234>
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	2b22      	cmp	r3, #34	; 0x22
 8007406:	d10d      	bne.n	8007424 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff f81c 	bl	800645c <HAL_I2C_SlaveRxCpltCallback>
}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	08007b45 	.word	0x08007b45
 8007430:	ffff0000 	.word	0xffff0000

08007434 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007442:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b08      	cmp	r3, #8
 800744e:	d002      	beq.n	8007456 <I2C_Slave_AF+0x22>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b20      	cmp	r3, #32
 8007454:	d129      	bne.n	80074aa <I2C_Slave_AF+0x76>
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b28      	cmp	r3, #40	; 0x28
 800745a:	d126      	bne.n	80074aa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a2c      	ldr	r2, [pc, #176]	; (8007510 <I2C_Slave_AF+0xdc>)
 8007460:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007470:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800747a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fe fff2 	bl	800648c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80074a8:	e02e      	b.n	8007508 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	2b21      	cmp	r3, #33	; 0x21
 80074ae:	d126      	bne.n	80074fe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a17      	ldr	r2, [pc, #92]	; (8007510 <I2C_Slave_AF+0xdc>)
 80074b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2221      	movs	r2, #33	; 0x21
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074da:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074e4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fe ffa6 	bl	8006448 <HAL_I2C_SlaveTxCpltCallback>
}
 80074fc:	e004      	b.n	8007508 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007506:	615a      	str	r2, [r3, #20]
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	ffff0000 	.word	0xffff0000

08007514 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007522:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800752a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b10      	cmp	r3, #16
 8007530:	d002      	beq.n	8007538 <I2C_ITError+0x24>
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	d10a      	bne.n	800754e <I2C_ITError+0x3a>
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b22      	cmp	r3, #34	; 0x22
 800753c:	d107      	bne.n	800754e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800754c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007554:	2b28      	cmp	r3, #40	; 0x28
 8007556:	d107      	bne.n	8007568 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2228      	movs	r2, #40	; 0x28
 8007562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007566:	e015      	b.n	8007594 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007576:	d00a      	beq.n	800758e <I2C_ITError+0x7a>
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b60      	cmp	r3, #96	; 0x60
 800757c:	d007      	beq.n	800758e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800759e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a2:	d162      	bne.n	800766a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d020      	beq.n	8007604 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c6:	4a6a      	ldr	r2, [pc, #424]	; (8007770 <I2C_ITError+0x25c>)
 80075c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fd fa32 	bl	8004a38 <HAL_DMA_Abort_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8089 	beq.w	80076ee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0201 	bic.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075fe:	4610      	mov	r0, r2
 8007600:	4798      	blx	r3
 8007602:	e074      	b.n	80076ee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	4a59      	ldr	r2, [pc, #356]	; (8007770 <I2C_ITError+0x25c>)
 800760a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	4618      	mov	r0, r3
 8007612:	f7fd fa11 	bl	8004a38 <HAL_DMA_Abort_IT>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d068      	beq.n	80076ee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d10b      	bne.n	8007642 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0201 	bic.w	r2, r2, #1
 8007650:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	e041      	b.n	80076ee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b60      	cmp	r3, #96	; 0x60
 8007674:	d125      	bne.n	80076c2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d10b      	bne.n	80076aa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0201 	bic.w	r2, r2, #1
 80076b8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fe ff0e 	bl	80064dc <HAL_I2C_AbortCpltCallback>
 80076c0:	e015      	b.n	80076ee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076cc:	2b40      	cmp	r3, #64	; 0x40
 80076ce:	d10b      	bne.n	80076e8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691a      	ldr	r2, [r3, #16]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7fe feed 	bl	80064c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10e      	bne.n	800771c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007704:	2b00      	cmp	r3, #0
 8007706:	d109      	bne.n	800771c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800772a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007732:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d113      	bne.n	8007768 <I2C_ITError+0x254>
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b28      	cmp	r3, #40	; 0x28
 8007744:	d110      	bne.n	8007768 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a0a      	ldr	r2, [pc, #40]	; (8007774 <I2C_ITError+0x260>)
 800774a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fe fe92 	bl	800648c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	08007b45 	.word	0x08007b45
 8007774:	ffff0000 	.word	0xffff0000

08007778 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af02      	add	r7, sp, #8
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	607a      	str	r2, [r7, #4]
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	460b      	mov	r3, r1
 8007786:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b08      	cmp	r3, #8
 8007792:	d006      	beq.n	80077a2 <I2C_MasterRequestWrite+0x2a>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d003      	beq.n	80077a2 <I2C_MasterRequestWrite+0x2a>
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077a0:	d108      	bne.n	80077b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	e00b      	b.n	80077cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	2b12      	cmp	r3, #18
 80077ba:	d107      	bne.n	80077cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fa5b 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00d      	beq.n	8007800 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f2:	d103      	bne.n	80077fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e035      	b.n	800786c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007808:	d108      	bne.n	800781c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800780a:	897b      	ldrh	r3, [r7, #10]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	461a      	mov	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007818:	611a      	str	r2, [r3, #16]
 800781a:	e01b      	b.n	8007854 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800781c:	897b      	ldrh	r3, [r7, #10]
 800781e:	11db      	asrs	r3, r3, #7
 8007820:	b2db      	uxtb	r3, r3
 8007822:	f003 0306 	and.w	r3, r3, #6
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f063 030f 	orn	r3, r3, #15
 800782c:	b2da      	uxtb	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	490e      	ldr	r1, [pc, #56]	; (8007874 <I2C_MasterRequestWrite+0xfc>)
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 fa81 	bl	8007d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e010      	b.n	800786c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800784a:	897b      	ldrh	r3, [r7, #10]
 800784c:	b2da      	uxtb	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4907      	ldr	r1, [pc, #28]	; (8007878 <I2C_MasterRequestWrite+0x100>)
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fa71 	bl	8007d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	00010008 	.word	0x00010008
 8007878:	00010002 	.word	0x00010002

0800787c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	460b      	mov	r3, r1
 800788a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d006      	beq.n	80078b6 <I2C_MasterRequestRead+0x3a>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d003      	beq.n	80078b6 <I2C_MasterRequestRead+0x3a>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078b4:	d108      	bne.n	80078c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e00b      	b.n	80078e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	2b11      	cmp	r3, #17
 80078ce:	d107      	bne.n	80078e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f9d1 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00d      	beq.n	8007914 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	d103      	bne.n	8007910 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800790e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e079      	b.n	8007a08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800791c:	d108      	bne.n	8007930 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800791e:	897b      	ldrh	r3, [r7, #10]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	611a      	str	r2, [r3, #16]
 800792e:	e05f      	b.n	80079f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007930:	897b      	ldrh	r3, [r7, #10]
 8007932:	11db      	asrs	r3, r3, #7
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 0306 	and.w	r3, r3, #6
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f063 030f 	orn	r3, r3, #15
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4930      	ldr	r1, [pc, #192]	; (8007a10 <I2C_MasterRequestRead+0x194>)
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f9f7 	bl	8007d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e054      	b.n	8007a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800795e:	897b      	ldrh	r3, [r7, #10]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	4929      	ldr	r1, [pc, #164]	; (8007a14 <I2C_MasterRequestRead+0x198>)
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f9e7 	bl	8007d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e044      	b.n	8007a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f96f 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00d      	beq.n	80079d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ca:	d103      	bne.n	80079d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e017      	b.n	8007a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80079d8:	897b      	ldrh	r3, [r7, #10]
 80079da:	11db      	asrs	r3, r3, #7
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	f003 0306 	and.w	r3, r3, #6
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f063 030e 	orn	r3, r3, #14
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	4907      	ldr	r1, [pc, #28]	; (8007a14 <I2C_MasterRequestRead+0x198>)
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f9a3 	bl	8007d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	00010008 	.word	0x00010008
 8007a14:	00010002 	.word	0x00010002

08007a18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	4608      	mov	r0, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	817b      	strh	r3, [r7, #10]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	813b      	strh	r3, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f920 	bl	8007c94 <I2C_WaitOnFlagUntilTimeout>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00d      	beq.n	8007a76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a68:	d103      	bne.n	8007a72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e05f      	b.n	8007b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a76:	897b      	ldrh	r3, [r7, #10]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	492d      	ldr	r1, [pc, #180]	; (8007b40 <I2C_RequestMemoryWrite+0x128>)
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f958 	bl	8007d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e04c      	b.n	8007b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab4:	6a39      	ldr	r1, [r7, #32]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f9c2 	bl	8007e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00d      	beq.n	8007ade <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d107      	bne.n	8007ada <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e02b      	b.n	8007b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ade:	88fb      	ldrh	r3, [r7, #6]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d105      	bne.n	8007af0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ae4:	893b      	ldrh	r3, [r7, #8]
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	611a      	str	r2, [r3, #16]
 8007aee:	e021      	b.n	8007b34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007af0:	893b      	ldrh	r3, [r7, #8]
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b00:	6a39      	ldr	r1, [r7, #32]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f99c 	bl	8007e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d107      	bne.n	8007b26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e005      	b.n	8007b36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b2a:	893b      	ldrh	r3, [r7, #8]
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	00010002 	.word	0x00010002

08007b44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b5e:	4b4b      	ldr	r3, [pc, #300]	; (8007c8c <I2C_DMAAbort+0x148>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	08db      	lsrs	r3, r3, #3
 8007b64:	4a4a      	ldr	r2, [pc, #296]	; (8007c90 <I2C_DMAAbort+0x14c>)
 8007b66:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6a:	0a1a      	lsrs	r2, r3, #8
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	00da      	lsls	r2, r3, #3
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f043 0220 	orr.w	r2, r3, #32
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007b8a:	e00a      	b.n	8007ba2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba0:	d0ea      	beq.n	8007b78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bae:	2200      	movs	r2, #0
 8007bb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be4:	2200      	movs	r2, #0
 8007be6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0201 	bic.w	r2, r2, #1
 8007c06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b60      	cmp	r3, #96	; 0x60
 8007c12:	d10e      	bne.n	8007c32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2200      	movs	r2, #0
 8007c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c2a:	6978      	ldr	r0, [r7, #20]
 8007c2c:	f7fe fc56 	bl	80064dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c30:	e027      	b.n	8007c82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c32:	7cfb      	ldrb	r3, [r7, #19]
 8007c34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c38:	2b28      	cmp	r3, #40	; 0x28
 8007c3a:	d117      	bne.n	8007c6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2228      	movs	r2, #40	; 0x28
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c6a:	e007      	b.n	8007c7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007c7c:	6978      	ldr	r0, [r7, #20]
 8007c7e:	f7fe fc23 	bl	80064c8 <HAL_I2C_ErrorCallback>
}
 8007c82:	bf00      	nop
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	2000001c 	.word	0x2000001c
 8007c90:	14f8b589 	.word	0x14f8b589

08007c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ca4:	e025      	b.n	8007cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cac:	d021      	beq.n	8007cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cae:	f7fc fc0b 	bl	80044c8 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d116      	bne.n	8007cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f043 0220 	orr.w	r2, r3, #32
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e023      	b.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d10d      	bne.n	8007d18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	43da      	mvns	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf0c      	ite	eq
 8007d0e:	2301      	moveq	r3, #1
 8007d10:	2300      	movne	r3, #0
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	e00c      	b.n	8007d32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	43da      	mvns	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4013      	ands	r3, r2
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bf0c      	ite	eq
 8007d2a:	2301      	moveq	r3, #1
 8007d2c:	2300      	movne	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d0b6      	beq.n	8007ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d50:	e051      	b.n	8007df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d60:	d123      	bne.n	8007daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d96:	f043 0204 	orr.w	r2, r3, #4
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e046      	b.n	8007e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d021      	beq.n	8007df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db2:	f7fc fb89 	bl	80044c8 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d302      	bcc.n	8007dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d116      	bne.n	8007df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	f043 0220 	orr.w	r2, r3, #32
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e020      	b.n	8007e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	0c1b      	lsrs	r3, r3, #16
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d10c      	bne.n	8007e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	43da      	mvns	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bf14      	ite	ne
 8007e12:	2301      	movne	r3, #1
 8007e14:	2300      	moveq	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	e00b      	b.n	8007e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	43da      	mvns	r2, r3
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	4013      	ands	r3, r2
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bf14      	ite	ne
 8007e2c:	2301      	movne	r3, #1
 8007e2e:	2300      	moveq	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d18d      	bne.n	8007d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e4c:	e02d      	b.n	8007eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 f900 	bl	8008054 <I2C_IsAcknowledgeFailed>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e02d      	b.n	8007eba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d021      	beq.n	8007eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e66:	f7fc fb2f 	bl	80044c8 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d302      	bcc.n	8007e7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d116      	bne.n	8007eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	f043 0220 	orr.w	r2, r3, #32
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e007      	b.n	8007eba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb4:	2b80      	cmp	r3, #128	; 0x80
 8007eb6:	d1ca      	bne.n	8007e4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ece:	e02d      	b.n	8007f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 f8bf 	bl	8008054 <I2C_IsAcknowledgeFailed>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e02d      	b.n	8007f3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d021      	beq.n	8007f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee8:	f7fc faee 	bl	80044c8 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d302      	bcc.n	8007efe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d116      	bne.n	8007f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	f043 0220 	orr.w	r2, r3, #32
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e007      	b.n	8007f3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d1ca      	bne.n	8007ed0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f50:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	08db      	lsrs	r3, r3, #3
 8007f56:	4a13      	ldr	r2, [pc, #76]	; (8007fa4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	0a1a      	lsrs	r2, r3, #8
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d107      	bne.n	8007f82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	f043 0220 	orr.w	r2, r3, #32
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e008      	b.n	8007f94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f90:	d0e9      	beq.n	8007f66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	2000001c 	.word	0x2000001c
 8007fa4:	14f8b589 	.word	0x14f8b589

08007fa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fb4:	e042      	b.n	800803c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	f003 0310 	and.w	r3, r3, #16
 8007fc0:	2b10      	cmp	r3, #16
 8007fc2:	d119      	bne.n	8007ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0210 	mvn.w	r2, #16
 8007fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e029      	b.n	800804c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff8:	f7fc fa66 	bl	80044c8 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	429a      	cmp	r2, r3
 8008006:	d302      	bcc.n	800800e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d116      	bne.n	800803c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2220      	movs	r2, #32
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008028:	f043 0220 	orr.w	r2, r3, #32
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e007      	b.n	800804c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d1b5      	bne.n	8007fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806a:	d11b      	bne.n	80080a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008074:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2220      	movs	r2, #32
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	f043 0204 	orr.w	r2, r3, #4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e000      	b.n	80080a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80080c2:	d103      	bne.n	80080cc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80080ca:	e007      	b.n	80080dc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80080d4:	d102      	bne.n	80080dc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2208      	movs	r2, #8
 80080da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e264      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d075      	beq.n	80081f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008106:	4ba3      	ldr	r3, [pc, #652]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 030c 	and.w	r3, r3, #12
 800810e:	2b04      	cmp	r3, #4
 8008110:	d00c      	beq.n	800812c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008112:	4ba0      	ldr	r3, [pc, #640]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800811a:	2b08      	cmp	r3, #8
 800811c:	d112      	bne.n	8008144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800811e:	4b9d      	ldr	r3, [pc, #628]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800812a:	d10b      	bne.n	8008144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800812c:	4b99      	ldr	r3, [pc, #612]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d05b      	beq.n	80081f0 <HAL_RCC_OscConfig+0x108>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d157      	bne.n	80081f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e23f      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800814c:	d106      	bne.n	800815c <HAL_RCC_OscConfig+0x74>
 800814e:	4b91      	ldr	r3, [pc, #580]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a90      	ldr	r2, [pc, #576]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e01d      	b.n	8008198 <HAL_RCC_OscConfig+0xb0>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008164:	d10c      	bne.n	8008180 <HAL_RCC_OscConfig+0x98>
 8008166:	4b8b      	ldr	r3, [pc, #556]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a8a      	ldr	r2, [pc, #552]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800816c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	4b88      	ldr	r3, [pc, #544]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a87      	ldr	r2, [pc, #540]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	e00b      	b.n	8008198 <HAL_RCC_OscConfig+0xb0>
 8008180:	4b84      	ldr	r3, [pc, #528]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a83      	ldr	r2, [pc, #524]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	4b81      	ldr	r3, [pc, #516]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a80      	ldr	r2, [pc, #512]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d013      	beq.n	80081c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a0:	f7fc f992 	bl	80044c8 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081a8:	f7fc f98e 	bl	80044c8 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b64      	cmp	r3, #100	; 0x64
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e204      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ba:	4b76      	ldr	r3, [pc, #472]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f0      	beq.n	80081a8 <HAL_RCC_OscConfig+0xc0>
 80081c6:	e014      	b.n	80081f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c8:	f7fc f97e 	bl	80044c8 <HAL_GetTick>
 80081cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081d0:	f7fc f97a 	bl	80044c8 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b64      	cmp	r3, #100	; 0x64
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e1f0      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081e2:	4b6c      	ldr	r3, [pc, #432]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <HAL_RCC_OscConfig+0xe8>
 80081ee:	e000      	b.n	80081f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d063      	beq.n	80082c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081fe:	4b65      	ldr	r3, [pc, #404]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 030c 	and.w	r3, r3, #12
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800820a:	4b62      	ldr	r3, [pc, #392]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008212:	2b08      	cmp	r3, #8
 8008214:	d11c      	bne.n	8008250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008216:	4b5f      	ldr	r3, [pc, #380]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d116      	bne.n	8008250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008222:	4b5c      	ldr	r3, [pc, #368]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <HAL_RCC_OscConfig+0x152>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d001      	beq.n	800823a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e1c4      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800823a:	4b56      	ldr	r3, [pc, #344]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4952      	ldr	r1, [pc, #328]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800824a:	4313      	orrs	r3, r2
 800824c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800824e:	e03a      	b.n	80082c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d020      	beq.n	800829a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008258:	4b4f      	ldr	r3, [pc, #316]	; (8008398 <HAL_RCC_OscConfig+0x2b0>)
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825e:	f7fc f933 	bl	80044c8 <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008266:	f7fc f92f 	bl	80044c8 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e1a5      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008278:	4b46      	ldr	r3, [pc, #280]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0f0      	beq.n	8008266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008284:	4b43      	ldr	r3, [pc, #268]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	4940      	ldr	r1, [pc, #256]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008294:	4313      	orrs	r3, r2
 8008296:	600b      	str	r3, [r1, #0]
 8008298:	e015      	b.n	80082c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800829a:	4b3f      	ldr	r3, [pc, #252]	; (8008398 <HAL_RCC_OscConfig+0x2b0>)
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a0:	f7fc f912 	bl	80044c8 <HAL_GetTick>
 80082a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082a6:	e008      	b.n	80082ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082a8:	f7fc f90e 	bl	80044c8 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e184      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082ba:	4b36      	ldr	r3, [pc, #216]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1f0      	bne.n	80082a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d030      	beq.n	8008334 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d016      	beq.n	8008308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082da:	4b30      	ldr	r3, [pc, #192]	; (800839c <HAL_RCC_OscConfig+0x2b4>)
 80082dc:	2201      	movs	r2, #1
 80082de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e0:	f7fc f8f2 	bl	80044c8 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082e8:	f7fc f8ee 	bl	80044c8 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e164      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082fa:	4b26      	ldr	r3, [pc, #152]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80082fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0f0      	beq.n	80082e8 <HAL_RCC_OscConfig+0x200>
 8008306:	e015      	b.n	8008334 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008308:	4b24      	ldr	r3, [pc, #144]	; (800839c <HAL_RCC_OscConfig+0x2b4>)
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800830e:	f7fc f8db 	bl	80044c8 <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008316:	f7fc f8d7 	bl	80044c8 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e14d      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008328:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800832a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832c:	f003 0302 	and.w	r3, r3, #2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1f0      	bne.n	8008316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 80a0 	beq.w	8008482 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10f      	bne.n	8008372 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008352:	2300      	movs	r3, #0
 8008354:	60bb      	str	r3, [r7, #8]
 8008356:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	4a0e      	ldr	r2, [pc, #56]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800835c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008360:	6413      	str	r3, [r2, #64]	; 0x40
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800836a:	60bb      	str	r3, [r7, #8]
 800836c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008372:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <HAL_RCC_OscConfig+0x2b8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837a:	2b00      	cmp	r3, #0
 800837c:	d121      	bne.n	80083c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800837e:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <HAL_RCC_OscConfig+0x2b8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a07      	ldr	r2, [pc, #28]	; (80083a0 <HAL_RCC_OscConfig+0x2b8>)
 8008384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800838a:	f7fc f89d 	bl	80044c8 <HAL_GetTick>
 800838e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008390:	e011      	b.n	80083b6 <HAL_RCC_OscConfig+0x2ce>
 8008392:	bf00      	nop
 8008394:	40023800 	.word	0x40023800
 8008398:	42470000 	.word	0x42470000
 800839c:	42470e80 	.word	0x42470e80
 80083a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a4:	f7fc f890 	bl	80044c8 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e106      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083b6:	4b85      	ldr	r3, [pc, #532]	; (80085cc <HAL_RCC_OscConfig+0x4e4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f0      	beq.n	80083a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d106      	bne.n	80083d8 <HAL_RCC_OscConfig+0x2f0>
 80083ca:	4b81      	ldr	r3, [pc, #516]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	4a80      	ldr	r2, [pc, #512]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80083d0:	f043 0301 	orr.w	r3, r3, #1
 80083d4:	6713      	str	r3, [r2, #112]	; 0x70
 80083d6:	e01c      	b.n	8008412 <HAL_RCC_OscConfig+0x32a>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b05      	cmp	r3, #5
 80083de:	d10c      	bne.n	80083fa <HAL_RCC_OscConfig+0x312>
 80083e0:	4b7b      	ldr	r3, [pc, #492]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80083e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e4:	4a7a      	ldr	r2, [pc, #488]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80083e6:	f043 0304 	orr.w	r3, r3, #4
 80083ea:	6713      	str	r3, [r2, #112]	; 0x70
 80083ec:	4b78      	ldr	r3, [pc, #480]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80083ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f0:	4a77      	ldr	r2, [pc, #476]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80083f2:	f043 0301 	orr.w	r3, r3, #1
 80083f6:	6713      	str	r3, [r2, #112]	; 0x70
 80083f8:	e00b      	b.n	8008412 <HAL_RCC_OscConfig+0x32a>
 80083fa:	4b75      	ldr	r3, [pc, #468]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	4a74      	ldr	r2, [pc, #464]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 8008400:	f023 0301 	bic.w	r3, r3, #1
 8008404:	6713      	str	r3, [r2, #112]	; 0x70
 8008406:	4b72      	ldr	r3, [pc, #456]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 8008408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840a:	4a71      	ldr	r2, [pc, #452]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 800840c:	f023 0304 	bic.w	r3, r3, #4
 8008410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d015      	beq.n	8008446 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841a:	f7fc f855 	bl	80044c8 <HAL_GetTick>
 800841e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008420:	e00a      	b.n	8008438 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008422:	f7fc f851 	bl	80044c8 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008430:	4293      	cmp	r3, r2
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e0c5      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008438:	4b65      	ldr	r3, [pc, #404]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 800843a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d0ee      	beq.n	8008422 <HAL_RCC_OscConfig+0x33a>
 8008444:	e014      	b.n	8008470 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008446:	f7fc f83f 	bl	80044c8 <HAL_GetTick>
 800844a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800844c:	e00a      	b.n	8008464 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800844e:	f7fc f83b 	bl	80044c8 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	f241 3288 	movw	r2, #5000	; 0x1388
 800845c:	4293      	cmp	r3, r2
 800845e:	d901      	bls.n	8008464 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e0af      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008464:	4b5a      	ldr	r3, [pc, #360]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 8008466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1ee      	bne.n	800844e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d105      	bne.n	8008482 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008476:	4b56      	ldr	r3, [pc, #344]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	4a55      	ldr	r2, [pc, #340]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 800847c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 809b 	beq.w	80085c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800848c:	4b50      	ldr	r3, [pc, #320]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f003 030c 	and.w	r3, r3, #12
 8008494:	2b08      	cmp	r3, #8
 8008496:	d05c      	beq.n	8008552 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d141      	bne.n	8008524 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084a0:	4b4c      	ldr	r3, [pc, #304]	; (80085d4 <HAL_RCC_OscConfig+0x4ec>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084a6:	f7fc f80f 	bl	80044c8 <HAL_GetTick>
 80084aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ac:	e008      	b.n	80084c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084ae:	f7fc f80b 	bl	80044c8 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d901      	bls.n	80084c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e081      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084c0:	4b43      	ldr	r3, [pc, #268]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f0      	bne.n	80084ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	019b      	lsls	r3, r3, #6
 80084dc:	431a      	orrs	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	085b      	lsrs	r3, r3, #1
 80084e4:	3b01      	subs	r3, #1
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	061b      	lsls	r3, r3, #24
 80084f0:	4937      	ldr	r1, [pc, #220]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084f6:	4b37      	ldr	r3, [pc, #220]	; (80085d4 <HAL_RCC_OscConfig+0x4ec>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084fc:	f7fb ffe4 	bl	80044c8 <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008504:	f7fb ffe0 	bl	80044c8 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e056      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008516:	4b2e      	ldr	r3, [pc, #184]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <HAL_RCC_OscConfig+0x41c>
 8008522:	e04e      	b.n	80085c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008524:	4b2b      	ldr	r3, [pc, #172]	; (80085d4 <HAL_RCC_OscConfig+0x4ec>)
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800852a:	f7fb ffcd 	bl	80044c8 <HAL_GetTick>
 800852e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008530:	e008      	b.n	8008544 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008532:	f7fb ffc9 	bl	80044c8 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b02      	cmp	r3, #2
 800853e:	d901      	bls.n	8008544 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e03f      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008544:	4b22      	ldr	r3, [pc, #136]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1f0      	bne.n	8008532 <HAL_RCC_OscConfig+0x44a>
 8008550:	e037      	b.n	80085c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e032      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800855e:	4b1c      	ldr	r3, [pc, #112]	; (80085d0 <HAL_RCC_OscConfig+0x4e8>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d028      	beq.n	80085be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d121      	bne.n	80085be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008584:	429a      	cmp	r2, r3
 8008586:	d11a      	bne.n	80085be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800858e:	4013      	ands	r3, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008594:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008596:	4293      	cmp	r3, r2
 8008598:	d111      	bne.n	80085be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	085b      	lsrs	r3, r3, #1
 80085a6:	3b01      	subs	r3, #1
 80085a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d107      	bne.n	80085be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d001      	beq.n	80085c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	40007000 	.word	0x40007000
 80085d0:	40023800 	.word	0x40023800
 80085d4:	42470060 	.word	0x42470060

080085d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e0cc      	b.n	8008786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085ec:	4b68      	ldr	r3, [pc, #416]	; (8008790 <HAL_RCC_ClockConfig+0x1b8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d90c      	bls.n	8008614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085fa:	4b65      	ldr	r3, [pc, #404]	; (8008790 <HAL_RCC_ClockConfig+0x1b8>)
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008602:	4b63      	ldr	r3, [pc, #396]	; (8008790 <HAL_RCC_ClockConfig+0x1b8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d001      	beq.n	8008614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e0b8      	b.n	8008786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d020      	beq.n	8008662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800862c:	4b59      	ldr	r3, [pc, #356]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	4a58      	ldr	r2, [pc, #352]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 8008632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008644:	4b53      	ldr	r3, [pc, #332]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	4a52      	ldr	r2, [pc, #328]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 800864a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800864e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008650:	4b50      	ldr	r3, [pc, #320]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	494d      	ldr	r1, [pc, #308]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 800865e:	4313      	orrs	r3, r2
 8008660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d044      	beq.n	80086f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d107      	bne.n	8008686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008676:	4b47      	ldr	r3, [pc, #284]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d119      	bne.n	80086b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e07f      	b.n	8008786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d003      	beq.n	8008696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008692:	2b03      	cmp	r3, #3
 8008694:	d107      	bne.n	80086a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008696:	4b3f      	ldr	r3, [pc, #252]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e06f      	b.n	8008786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086a6:	4b3b      	ldr	r3, [pc, #236]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e067      	b.n	8008786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086b6:	4b37      	ldr	r3, [pc, #220]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f023 0203 	bic.w	r2, r3, #3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	4934      	ldr	r1, [pc, #208]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086c8:	f7fb fefe 	bl	80044c8 <HAL_GetTick>
 80086cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ce:	e00a      	b.n	80086e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086d0:	f7fb fefa 	bl	80044c8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	f241 3288 	movw	r2, #5000	; 0x1388
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e04f      	b.n	8008786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e6:	4b2b      	ldr	r3, [pc, #172]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 020c 	and.w	r2, r3, #12
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d1eb      	bne.n	80086d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086f8:	4b25      	ldr	r3, [pc, #148]	; (8008790 <HAL_RCC_ClockConfig+0x1b8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0307 	and.w	r3, r3, #7
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d20c      	bcs.n	8008720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008706:	4b22      	ldr	r3, [pc, #136]	; (8008790 <HAL_RCC_ClockConfig+0x1b8>)
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800870e:	4b20      	ldr	r3, [pc, #128]	; (8008790 <HAL_RCC_ClockConfig+0x1b8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	429a      	cmp	r2, r3
 800871a:	d001      	beq.n	8008720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e032      	b.n	8008786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d008      	beq.n	800873e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800872c:	4b19      	ldr	r3, [pc, #100]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4916      	ldr	r1, [pc, #88]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 800873a:	4313      	orrs	r3, r2
 800873c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0308 	and.w	r3, r3, #8
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800874a:	4b12      	ldr	r3, [pc, #72]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	490e      	ldr	r1, [pc, #56]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 800875a:	4313      	orrs	r3, r2
 800875c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800875e:	f000 f821 	bl	80087a4 <HAL_RCC_GetSysClockFreq>
 8008762:	4602      	mov	r2, r0
 8008764:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <HAL_RCC_ClockConfig+0x1bc>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	091b      	lsrs	r3, r3, #4
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	490a      	ldr	r1, [pc, #40]	; (8008798 <HAL_RCC_ClockConfig+0x1c0>)
 8008770:	5ccb      	ldrb	r3, [r1, r3]
 8008772:	fa22 f303 	lsr.w	r3, r2, r3
 8008776:	4a09      	ldr	r2, [pc, #36]	; (800879c <HAL_RCC_ClockConfig+0x1c4>)
 8008778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <HAL_RCC_ClockConfig+0x1c8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f7fb fe5e 	bl	8004440 <HAL_InitTick>

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	40023c00 	.word	0x40023c00
 8008794:	40023800 	.word	0x40023800
 8008798:	0800c7b4 	.word	0x0800c7b4
 800879c:	2000001c 	.word	0x2000001c
 80087a0:	20000020 	.word	0x20000020

080087a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	2300      	movs	r3, #0
 80087b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087bc:	4b67      	ldr	r3, [pc, #412]	; (800895c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f003 030c 	and.w	r3, r3, #12
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d00d      	beq.n	80087e4 <HAL_RCC_GetSysClockFreq+0x40>
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	f200 80bd 	bhi.w	8008948 <HAL_RCC_GetSysClockFreq+0x1a4>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <HAL_RCC_GetSysClockFreq+0x34>
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d003      	beq.n	80087de <HAL_RCC_GetSysClockFreq+0x3a>
 80087d6:	e0b7      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087d8:	4b61      	ldr	r3, [pc, #388]	; (8008960 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80087da:	60bb      	str	r3, [r7, #8]
       break;
 80087dc:	e0b7      	b.n	800894e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087de:	4b61      	ldr	r3, [pc, #388]	; (8008964 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80087e0:	60bb      	str	r3, [r7, #8]
      break;
 80087e2:	e0b4      	b.n	800894e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087e4:	4b5d      	ldr	r3, [pc, #372]	; (800895c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087ee:	4b5b      	ldr	r3, [pc, #364]	; (800895c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d04d      	beq.n	8008896 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087fa:	4b58      	ldr	r3, [pc, #352]	; (800895c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	099b      	lsrs	r3, r3, #6
 8008800:	461a      	mov	r2, r3
 8008802:	f04f 0300 	mov.w	r3, #0
 8008806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800880a:	f04f 0100 	mov.w	r1, #0
 800880e:	ea02 0800 	and.w	r8, r2, r0
 8008812:	ea03 0901 	and.w	r9, r3, r1
 8008816:	4640      	mov	r0, r8
 8008818:	4649      	mov	r1, r9
 800881a:	f04f 0200 	mov.w	r2, #0
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	014b      	lsls	r3, r1, #5
 8008824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008828:	0142      	lsls	r2, r0, #5
 800882a:	4610      	mov	r0, r2
 800882c:	4619      	mov	r1, r3
 800882e:	ebb0 0008 	subs.w	r0, r0, r8
 8008832:	eb61 0109 	sbc.w	r1, r1, r9
 8008836:	f04f 0200 	mov.w	r2, #0
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	018b      	lsls	r3, r1, #6
 8008840:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008844:	0182      	lsls	r2, r0, #6
 8008846:	1a12      	subs	r2, r2, r0
 8008848:	eb63 0301 	sbc.w	r3, r3, r1
 800884c:	f04f 0000 	mov.w	r0, #0
 8008850:	f04f 0100 	mov.w	r1, #0
 8008854:	00d9      	lsls	r1, r3, #3
 8008856:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800885a:	00d0      	lsls	r0, r2, #3
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	eb12 0208 	adds.w	r2, r2, r8
 8008864:	eb43 0309 	adc.w	r3, r3, r9
 8008868:	f04f 0000 	mov.w	r0, #0
 800886c:	f04f 0100 	mov.w	r1, #0
 8008870:	0259      	lsls	r1, r3, #9
 8008872:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008876:	0250      	lsls	r0, r2, #9
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4610      	mov	r0, r2
 800887e:	4619      	mov	r1, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	461a      	mov	r2, r3
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	f7f8 f982 	bl	8000b90 <__aeabi_uldivmod>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4613      	mov	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e04a      	b.n	800892c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008896:	4b31      	ldr	r3, [pc, #196]	; (800895c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	099b      	lsrs	r3, r3, #6
 800889c:	461a      	mov	r2, r3
 800889e:	f04f 0300 	mov.w	r3, #0
 80088a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80088a6:	f04f 0100 	mov.w	r1, #0
 80088aa:	ea02 0400 	and.w	r4, r2, r0
 80088ae:	ea03 0501 	and.w	r5, r3, r1
 80088b2:	4620      	mov	r0, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	f04f 0200 	mov.w	r2, #0
 80088ba:	f04f 0300 	mov.w	r3, #0
 80088be:	014b      	lsls	r3, r1, #5
 80088c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80088c4:	0142      	lsls	r2, r0, #5
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	1b00      	subs	r0, r0, r4
 80088cc:	eb61 0105 	sbc.w	r1, r1, r5
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	018b      	lsls	r3, r1, #6
 80088da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80088de:	0182      	lsls	r2, r0, #6
 80088e0:	1a12      	subs	r2, r2, r0
 80088e2:	eb63 0301 	sbc.w	r3, r3, r1
 80088e6:	f04f 0000 	mov.w	r0, #0
 80088ea:	f04f 0100 	mov.w	r1, #0
 80088ee:	00d9      	lsls	r1, r3, #3
 80088f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088f4:	00d0      	lsls	r0, r2, #3
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	1912      	adds	r2, r2, r4
 80088fc:	eb45 0303 	adc.w	r3, r5, r3
 8008900:	f04f 0000 	mov.w	r0, #0
 8008904:	f04f 0100 	mov.w	r1, #0
 8008908:	0299      	lsls	r1, r3, #10
 800890a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800890e:	0290      	lsls	r0, r2, #10
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4610      	mov	r0, r2
 8008916:	4619      	mov	r1, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	461a      	mov	r2, r3
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	f7f8 f936 	bl	8000b90 <__aeabi_uldivmod>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4613      	mov	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800892c:	4b0b      	ldr	r3, [pc, #44]	; (800895c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	0c1b      	lsrs	r3, r3, #16
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	3301      	adds	r3, #1
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	fbb2 f3f3 	udiv	r3, r2, r3
 8008944:	60bb      	str	r3, [r7, #8]
      break;
 8008946:	e002      	b.n	800894e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008948:	4b05      	ldr	r3, [pc, #20]	; (8008960 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800894a:	60bb      	str	r3, [r7, #8]
      break;
 800894c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800894e:	68bb      	ldr	r3, [r7, #8]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800895a:	bf00      	nop
 800895c:	40023800 	.word	0x40023800
 8008960:	00f42400 	.word	0x00f42400
 8008964:	007a1200 	.word	0x007a1200

08008968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800896c:	4b03      	ldr	r3, [pc, #12]	; (800897c <HAL_RCC_GetHCLKFreq+0x14>)
 800896e:	681b      	ldr	r3, [r3, #0]
}
 8008970:	4618      	mov	r0, r3
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	2000001c 	.word	0x2000001c

08008980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008984:	f7ff fff0 	bl	8008968 <HAL_RCC_GetHCLKFreq>
 8008988:	4602      	mov	r2, r0
 800898a:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	0a9b      	lsrs	r3, r3, #10
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	4903      	ldr	r1, [pc, #12]	; (80089a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008996:	5ccb      	ldrb	r3, [r1, r3]
 8008998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800899c:	4618      	mov	r0, r3
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40023800 	.word	0x40023800
 80089a4:	0800c7c4 	.word	0x0800c7c4

080089a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089ac:	f7ff ffdc 	bl	8008968 <HAL_RCC_GetHCLKFreq>
 80089b0:	4602      	mov	r2, r0
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	0b5b      	lsrs	r3, r3, #13
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	4903      	ldr	r1, [pc, #12]	; (80089cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80089be:	5ccb      	ldrb	r3, [r1, r3]
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	40023800 	.word	0x40023800
 80089cc:	0800c7c4 	.word	0x0800c7c4

080089d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e041      	b.n	8008a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d106      	bne.n	80089fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7fb f9aa 	bl	8003d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f000 fdb0 	bl	8009574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d001      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e04e      	b.n	8008b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d022      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab2:	d01d      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d018      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00e      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	; (8008b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d009      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d004      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a18      	ldr	r2, [pc, #96]	; (8008b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d111      	bne.n	8008b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b06      	cmp	r3, #6
 8008b00:	d010      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0201 	orr.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b12:	e007      	b.n	8008b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0201 	orr.w	r2, r2, #1
 8008b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40010000 	.word	0x40010000
 8008b38:	40000400 	.word	0x40000400
 8008b3c:	40000800 	.word	0x40000800
 8008b40:	40000c00 	.word	0x40000c00
 8008b44:	40010400 	.word	0x40010400
 8008b48:	40014000 	.word	0x40014000
 8008b4c:	40001800 	.word	0x40001800

08008b50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e041      	b.n	8008be6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d106      	bne.n	8008b7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f839 	bl	8008bee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f000 fcf0 	bl	8009574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <HAL_TIM_PWM_Start+0x24>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	bf14      	ite	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	2300      	moveq	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	e022      	b.n	8008c6e <HAL_TIM_PWM_Start+0x6a>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d109      	bne.n	8008c42 <HAL_TIM_PWM_Start+0x3e>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	bf14      	ite	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	2300      	moveq	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	e015      	b.n	8008c6e <HAL_TIM_PWM_Start+0x6a>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d109      	bne.n	8008c5c <HAL_TIM_PWM_Start+0x58>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	bf14      	ite	ne
 8008c54:	2301      	movne	r3, #1
 8008c56:	2300      	moveq	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	e008      	b.n	8008c6e <HAL_TIM_PWM_Start+0x6a>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	bf14      	ite	ne
 8008c68:	2301      	movne	r3, #1
 8008c6a:	2300      	moveq	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e07c      	b.n	8008d70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <HAL_TIM_PWM_Start+0x82>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c84:	e013      	b.n	8008cae <HAL_TIM_PWM_Start+0xaa>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d104      	bne.n	8008c96 <HAL_TIM_PWM_Start+0x92>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c94:	e00b      	b.n	8008cae <HAL_TIM_PWM_Start+0xaa>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d104      	bne.n	8008ca6 <HAL_TIM_PWM_Start+0xa2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ca4:	e003      	b.n	8008cae <HAL_TIM_PWM_Start+0xaa>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 ff46 	bl	8009b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a2d      	ldr	r2, [pc, #180]	; (8008d78 <HAL_TIM_PWM_Start+0x174>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d004      	beq.n	8008cd0 <HAL_TIM_PWM_Start+0xcc>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a2c      	ldr	r2, [pc, #176]	; (8008d7c <HAL_TIM_PWM_Start+0x178>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d101      	bne.n	8008cd4 <HAL_TIM_PWM_Start+0xd0>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <HAL_TIM_PWM_Start+0xd2>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a22      	ldr	r2, [pc, #136]	; (8008d78 <HAL_TIM_PWM_Start+0x174>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d022      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfc:	d01d      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <HAL_TIM_PWM_Start+0x17c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d018      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a1d      	ldr	r2, [pc, #116]	; (8008d84 <HAL_TIM_PWM_Start+0x180>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <HAL_TIM_PWM_Start+0x184>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00e      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a16      	ldr	r2, [pc, #88]	; (8008d7c <HAL_TIM_PWM_Start+0x178>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d009      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a18      	ldr	r2, [pc, #96]	; (8008d8c <HAL_TIM_PWM_Start+0x188>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d004      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <HAL_TIM_PWM_Start+0x18c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d111      	bne.n	8008d5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b06      	cmp	r3, #6
 8008d4a:	d010      	beq.n	8008d6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d5c:	e007      	b.n	8008d6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0201 	orr.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40010400 	.word	0x40010400
 8008d80:	40000400 	.word	0x40000400
 8008d84:	40000800 	.word	0x40000800
 8008d88:	40000c00 	.word	0x40000c00
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	40001800 	.word	0x40001800

08008d94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e097      	b.n	8008ed8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7fb f805 	bl	8003dcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dd8:	f023 0307 	bic.w	r3, r3, #7
 8008ddc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f000 fbc3 	bl	8009574 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	4313      	orrs	r3, r2
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008e34:	f023 030c 	bic.w	r3, r3, #12
 8008e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	4313      	orrs	r3, r2
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	011a      	lsls	r2, r3, #4
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	031b      	lsls	r3, r3, #12
 8008e64:	4313      	orrs	r3, r2
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008e72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008e7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	4313      	orrs	r3, r2
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ef0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ef8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d110      	bne.n	8008f32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d102      	bne.n	8008f1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f16:	7b7b      	ldrb	r3, [r7, #13]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d001      	beq.n	8008f20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e069      	b.n	8008ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f30:	e031      	b.n	8008f96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d110      	bne.n	8008f5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d102      	bne.n	8008f44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f3e:	7b3b      	ldrb	r3, [r7, #12]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d001      	beq.n	8008f48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e055      	b.n	8008ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f58:	e01d      	b.n	8008f96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d108      	bne.n	8008f72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d105      	bne.n	8008f72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f66:	7b7b      	ldrb	r3, [r7, #13]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d102      	bne.n	8008f72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f6c:	7b3b      	ldrb	r3, [r7, #12]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d001      	beq.n	8008f76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e03e      	b.n	8008ff4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <HAL_TIM_Encoder_Start+0xc4>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d008      	beq.n	8008fb4 <HAL_TIM_Encoder_Start+0xd4>
 8008fa2:	e00f      	b.n	8008fc4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	2100      	movs	r1, #0
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fdcb 	bl	8009b48 <TIM_CCxChannelCmd>
      break;
 8008fb2:	e016      	b.n	8008fe2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	2104      	movs	r1, #4
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 fdc3 	bl	8009b48 <TIM_CCxChannelCmd>
      break;
 8008fc2:	e00e      	b.n	8008fe2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fdbb 	bl	8009b48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	2104      	movs	r1, #4
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fdb4 	bl	8009b48 <TIM_CCxChannelCmd>
      break;
 8008fe0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0201 	orr.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b02      	cmp	r3, #2
 8009010:	d122      	bne.n	8009058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	2b02      	cmp	r3, #2
 800901e:	d11b      	bne.n	8009058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0202 	mvn.w	r2, #2
 8009028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa7a 	bl	8009538 <HAL_TIM_IC_CaptureCallback>
 8009044:	e005      	b.n	8009052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa6c 	bl	8009524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fa7d 	bl	800954c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	f003 0304 	and.w	r3, r3, #4
 8009062:	2b04      	cmp	r3, #4
 8009064:	d122      	bne.n	80090ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b04      	cmp	r3, #4
 8009072:	d11b      	bne.n	80090ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f06f 0204 	mvn.w	r2, #4
 800907c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2202      	movs	r2, #2
 8009082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa50 	bl	8009538 <HAL_TIM_IC_CaptureCallback>
 8009098:	e005      	b.n	80090a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa42 	bl	8009524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fa53 	bl	800954c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b08      	cmp	r3, #8
 80090b8:	d122      	bne.n	8009100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d11b      	bne.n	8009100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f06f 0208 	mvn.w	r2, #8
 80090d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2204      	movs	r2, #4
 80090d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fa26 	bl	8009538 <HAL_TIM_IC_CaptureCallback>
 80090ec:	e005      	b.n	80090fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa18 	bl	8009524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fa29 	bl	800954c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f003 0310 	and.w	r3, r3, #16
 800910a:	2b10      	cmp	r3, #16
 800910c:	d122      	bne.n	8009154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f003 0310 	and.w	r3, r3, #16
 8009118:	2b10      	cmp	r3, #16
 800911a:	d11b      	bne.n	8009154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f06f 0210 	mvn.w	r2, #16
 8009124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2208      	movs	r2, #8
 800912a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f9fc 	bl	8009538 <HAL_TIM_IC_CaptureCallback>
 8009140:	e005      	b.n	800914e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f9ee 	bl	8009524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9ff 	bl	800954c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b01      	cmp	r3, #1
 8009160:	d10e      	bne.n	8009180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b01      	cmp	r3, #1
 800916e:	d107      	bne.n	8009180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f06f 0201 	mvn.w	r2, #1
 8009178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f9c8 	bl	8009510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918a:	2b80      	cmp	r3, #128	; 0x80
 800918c:	d10e      	bne.n	80091ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009198:	2b80      	cmp	r3, #128	; 0x80
 800919a:	d107      	bne.n	80091ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fdcc 	bl	8009d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d10e      	bne.n	80091d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c4:	2b40      	cmp	r3, #64	; 0x40
 80091c6:	d107      	bne.n	80091d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f9c4 	bl	8009560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d10e      	bne.n	8009204 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d107      	bne.n	8009204 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f06f 0220 	mvn.w	r2, #32
 80091fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fd96 	bl	8009d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009222:	2302      	movs	r3, #2
 8009224:	e0ac      	b.n	8009380 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b0c      	cmp	r3, #12
 8009232:	f200 809f 	bhi.w	8009374 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009236:	a201      	add	r2, pc, #4	; (adr r2, 800923c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	08009271 	.word	0x08009271
 8009240:	08009375 	.word	0x08009375
 8009244:	08009375 	.word	0x08009375
 8009248:	08009375 	.word	0x08009375
 800924c:	080092b1 	.word	0x080092b1
 8009250:	08009375 	.word	0x08009375
 8009254:	08009375 	.word	0x08009375
 8009258:	08009375 	.word	0x08009375
 800925c:	080092f3 	.word	0x080092f3
 8009260:	08009375 	.word	0x08009375
 8009264:	08009375 	.word	0x08009375
 8009268:	08009375 	.word	0x08009375
 800926c:	08009333 	.word	0x08009333
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fa1c 	bl	80096b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0208 	orr.w	r2, r2, #8
 800928a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699a      	ldr	r2, [r3, #24]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0204 	bic.w	r2, r2, #4
 800929a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6999      	ldr	r1, [r3, #24]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	691a      	ldr	r2, [r3, #16]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	619a      	str	r2, [r3, #24]
      break;
 80092ae:	e062      	b.n	8009376 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fa6c 	bl	8009794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6999      	ldr	r1, [r3, #24]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	021a      	lsls	r2, r3, #8
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	619a      	str	r2, [r3, #24]
      break;
 80092f0:	e041      	b.n	8009376 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 fac1 	bl	8009880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69da      	ldr	r2, [r3, #28]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0208 	orr.w	r2, r2, #8
 800930c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69da      	ldr	r2, [r3, #28]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0204 	bic.w	r2, r2, #4
 800931c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69d9      	ldr	r1, [r3, #28]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	61da      	str	r2, [r3, #28]
      break;
 8009330:	e021      	b.n	8009376 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fb15 	bl	8009968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800934c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800935c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69d9      	ldr	r1, [r3, #28]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	021a      	lsls	r2, r3, #8
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	61da      	str	r2, [r3, #28]
      break;
 8009372:	e000      	b.n	8009376 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009374:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_TIM_ConfigClockSource+0x18>
 800939c:	2302      	movs	r3, #2
 800939e:	e0b3      	b.n	8009508 <HAL_TIM_ConfigClockSource+0x180>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2202      	movs	r2, #2
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d8:	d03e      	beq.n	8009458 <HAL_TIM_ConfigClockSource+0xd0>
 80093da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093de:	f200 8087 	bhi.w	80094f0 <HAL_TIM_ConfigClockSource+0x168>
 80093e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e6:	f000 8085 	beq.w	80094f4 <HAL_TIM_ConfigClockSource+0x16c>
 80093ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ee:	d87f      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x168>
 80093f0:	2b70      	cmp	r3, #112	; 0x70
 80093f2:	d01a      	beq.n	800942a <HAL_TIM_ConfigClockSource+0xa2>
 80093f4:	2b70      	cmp	r3, #112	; 0x70
 80093f6:	d87b      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x168>
 80093f8:	2b60      	cmp	r3, #96	; 0x60
 80093fa:	d050      	beq.n	800949e <HAL_TIM_ConfigClockSource+0x116>
 80093fc:	2b60      	cmp	r3, #96	; 0x60
 80093fe:	d877      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x168>
 8009400:	2b50      	cmp	r3, #80	; 0x50
 8009402:	d03c      	beq.n	800947e <HAL_TIM_ConfigClockSource+0xf6>
 8009404:	2b50      	cmp	r3, #80	; 0x50
 8009406:	d873      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x168>
 8009408:	2b40      	cmp	r3, #64	; 0x40
 800940a:	d058      	beq.n	80094be <HAL_TIM_ConfigClockSource+0x136>
 800940c:	2b40      	cmp	r3, #64	; 0x40
 800940e:	d86f      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x168>
 8009410:	2b30      	cmp	r3, #48	; 0x30
 8009412:	d064      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x156>
 8009414:	2b30      	cmp	r3, #48	; 0x30
 8009416:	d86b      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x168>
 8009418:	2b20      	cmp	r3, #32
 800941a:	d060      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x156>
 800941c:	2b20      	cmp	r3, #32
 800941e:	d867      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x168>
 8009420:	2b00      	cmp	r3, #0
 8009422:	d05c      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x156>
 8009424:	2b10      	cmp	r3, #16
 8009426:	d05a      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009428:	e062      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	6899      	ldr	r1, [r3, #8]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f000 fb65 	bl	8009b08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800944c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	609a      	str	r2, [r3, #8]
      break;
 8009456:	e04e      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	6899      	ldr	r1, [r3, #8]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f000 fb4e 	bl	8009b08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689a      	ldr	r2, [r3, #8]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800947a:	609a      	str	r2, [r3, #8]
      break;
 800947c:	e03b      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	6859      	ldr	r1, [r3, #4]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	461a      	mov	r2, r3
 800948c:	f000 fac2 	bl	8009a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2150      	movs	r1, #80	; 0x50
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fb1b 	bl	8009ad2 <TIM_ITRx_SetConfig>
      break;
 800949c:	e02b      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6859      	ldr	r1, [r3, #4]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f000 fae1 	bl	8009a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2160      	movs	r1, #96	; 0x60
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fb0b 	bl	8009ad2 <TIM_ITRx_SetConfig>
      break;
 80094bc:	e01b      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	6859      	ldr	r1, [r3, #4]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f000 faa2 	bl	8009a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2140      	movs	r1, #64	; 0x40
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fafb 	bl	8009ad2 <TIM_ITRx_SetConfig>
      break;
 80094dc:	e00b      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4619      	mov	r1, r3
 80094e8:	4610      	mov	r0, r2
 80094ea:	f000 faf2 	bl	8009ad2 <TIM_ITRx_SetConfig>
        break;
 80094ee:	e002      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80094f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a40      	ldr	r2, [pc, #256]	; (8009688 <TIM_Base_SetConfig+0x114>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d013      	beq.n	80095b4 <TIM_Base_SetConfig+0x40>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009592:	d00f      	beq.n	80095b4 <TIM_Base_SetConfig+0x40>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a3d      	ldr	r2, [pc, #244]	; (800968c <TIM_Base_SetConfig+0x118>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00b      	beq.n	80095b4 <TIM_Base_SetConfig+0x40>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a3c      	ldr	r2, [pc, #240]	; (8009690 <TIM_Base_SetConfig+0x11c>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d007      	beq.n	80095b4 <TIM_Base_SetConfig+0x40>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a3b      	ldr	r2, [pc, #236]	; (8009694 <TIM_Base_SetConfig+0x120>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d003      	beq.n	80095b4 <TIM_Base_SetConfig+0x40>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a3a      	ldr	r2, [pc, #232]	; (8009698 <TIM_Base_SetConfig+0x124>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d108      	bne.n	80095c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a2f      	ldr	r2, [pc, #188]	; (8009688 <TIM_Base_SetConfig+0x114>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d02b      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d4:	d027      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a2c      	ldr	r2, [pc, #176]	; (800968c <TIM_Base_SetConfig+0x118>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d023      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a2b      	ldr	r2, [pc, #172]	; (8009690 <TIM_Base_SetConfig+0x11c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d01f      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a2a      	ldr	r2, [pc, #168]	; (8009694 <TIM_Base_SetConfig+0x120>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d01b      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a29      	ldr	r2, [pc, #164]	; (8009698 <TIM_Base_SetConfig+0x124>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d017      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a28      	ldr	r2, [pc, #160]	; (800969c <TIM_Base_SetConfig+0x128>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d013      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a27      	ldr	r2, [pc, #156]	; (80096a0 <TIM_Base_SetConfig+0x12c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00f      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a26      	ldr	r2, [pc, #152]	; (80096a4 <TIM_Base_SetConfig+0x130>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d00b      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a25      	ldr	r2, [pc, #148]	; (80096a8 <TIM_Base_SetConfig+0x134>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d007      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a24      	ldr	r2, [pc, #144]	; (80096ac <TIM_Base_SetConfig+0x138>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d003      	beq.n	8009626 <TIM_Base_SetConfig+0xb2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a23      	ldr	r2, [pc, #140]	; (80096b0 <TIM_Base_SetConfig+0x13c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d108      	bne.n	8009638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800962c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	4313      	orrs	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a0a      	ldr	r2, [pc, #40]	; (8009688 <TIM_Base_SetConfig+0x114>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d003      	beq.n	800966c <TIM_Base_SetConfig+0xf8>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a0c      	ldr	r2, [pc, #48]	; (8009698 <TIM_Base_SetConfig+0x124>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d103      	bne.n	8009674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	615a      	str	r2, [r3, #20]
}
 800967a:	bf00      	nop
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	40010000 	.word	0x40010000
 800968c:	40000400 	.word	0x40000400
 8009690:	40000800 	.word	0x40000800
 8009694:	40000c00 	.word	0x40000c00
 8009698:	40010400 	.word	0x40010400
 800969c:	40014000 	.word	0x40014000
 80096a0:	40014400 	.word	0x40014400
 80096a4:	40014800 	.word	0x40014800
 80096a8:	40001800 	.word	0x40001800
 80096ac:	40001c00 	.word	0x40001c00
 80096b0:	40002000 	.word	0x40002000

080096b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	f023 0201 	bic.w	r2, r3, #1
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0303 	bic.w	r3, r3, #3
 80096ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f023 0302 	bic.w	r3, r3, #2
 80096fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4313      	orrs	r3, r2
 8009706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a20      	ldr	r2, [pc, #128]	; (800978c <TIM_OC1_SetConfig+0xd8>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d003      	beq.n	8009718 <TIM_OC1_SetConfig+0x64>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a1f      	ldr	r2, [pc, #124]	; (8009790 <TIM_OC1_SetConfig+0xdc>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d10c      	bne.n	8009732 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f023 0308 	bic.w	r3, r3, #8
 800971e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	4313      	orrs	r3, r2
 8009728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f023 0304 	bic.w	r3, r3, #4
 8009730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a15      	ldr	r2, [pc, #84]	; (800978c <TIM_OC1_SetConfig+0xd8>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d003      	beq.n	8009742 <TIM_OC1_SetConfig+0x8e>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a14      	ldr	r2, [pc, #80]	; (8009790 <TIM_OC1_SetConfig+0xdc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d111      	bne.n	8009766 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	4313      	orrs	r3, r2
 800975a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	621a      	str	r2, [r3, #32]
}
 8009780:	bf00      	nop
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	40010000 	.word	0x40010000
 8009790:	40010400 	.word	0x40010400

08009794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f023 0210 	bic.w	r2, r3, #16
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f023 0320 	bic.w	r3, r3, #32
 80097de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a22      	ldr	r2, [pc, #136]	; (8009878 <TIM_OC2_SetConfig+0xe4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_OC2_SetConfig+0x68>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a21      	ldr	r2, [pc, #132]	; (800987c <TIM_OC2_SetConfig+0xe8>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d10d      	bne.n	8009818 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	011b      	lsls	r3, r3, #4
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a17      	ldr	r2, [pc, #92]	; (8009878 <TIM_OC2_SetConfig+0xe4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d003      	beq.n	8009828 <TIM_OC2_SetConfig+0x94>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a16      	ldr	r2, [pc, #88]	; (800987c <TIM_OC2_SetConfig+0xe8>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d113      	bne.n	8009850 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800982e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	4313      	orrs	r3, r2
 8009842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	4313      	orrs	r3, r2
 800984e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	621a      	str	r2, [r3, #32]
}
 800986a:	bf00      	nop
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	40010000 	.word	0x40010000
 800987c:	40010400 	.word	0x40010400

08009880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0303 	bic.w	r3, r3, #3
 80098b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4313      	orrs	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	021b      	lsls	r3, r3, #8
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a21      	ldr	r2, [pc, #132]	; (8009960 <TIM_OC3_SetConfig+0xe0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d003      	beq.n	80098e6 <TIM_OC3_SetConfig+0x66>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a20      	ldr	r2, [pc, #128]	; (8009964 <TIM_OC3_SetConfig+0xe4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d10d      	bne.n	8009902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a16      	ldr	r2, [pc, #88]	; (8009960 <TIM_OC3_SetConfig+0xe0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d003      	beq.n	8009912 <TIM_OC3_SetConfig+0x92>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a15      	ldr	r2, [pc, #84]	; (8009964 <TIM_OC3_SetConfig+0xe4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d113      	bne.n	800993a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	011b      	lsls	r3, r3, #4
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	4313      	orrs	r3, r2
 800992c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	621a      	str	r2, [r3, #32]
}
 8009954:	bf00      	nop
 8009956:	371c      	adds	r7, #28
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	40010000 	.word	0x40010000
 8009964:	40010400 	.word	0x40010400

08009968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800999e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	031b      	lsls	r3, r3, #12
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	4313      	orrs	r3, r2
 80099be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a12      	ldr	r2, [pc, #72]	; (8009a0c <TIM_OC4_SetConfig+0xa4>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d003      	beq.n	80099d0 <TIM_OC4_SetConfig+0x68>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a11      	ldr	r2, [pc, #68]	; (8009a10 <TIM_OC4_SetConfig+0xa8>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d109      	bne.n	80099e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	019b      	lsls	r3, r3, #6
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	621a      	str	r2, [r3, #32]
}
 80099fe:	bf00      	nop
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	40010000 	.word	0x40010000
 8009a10:	40010400 	.word	0x40010400

08009a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	f023 0201 	bic.w	r2, r3, #1
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f023 030a 	bic.w	r3, r3, #10
 8009a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b087      	sub	sp, #28
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	f023 0210 	bic.w	r2, r3, #16
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	031b      	lsls	r3, r3, #12
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	011b      	lsls	r3, r3, #4
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	621a      	str	r2, [r3, #32]
}
 8009ac6:	bf00      	nop
 8009ac8:	371c      	adds	r7, #28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	f043 0307 	orr.w	r3, r3, #7
 8009af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	609a      	str	r2, [r3, #8]
}
 8009afc:	bf00      	nop
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	021a      	lsls	r2, r3, #8
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	609a      	str	r2, [r3, #8]
}
 8009b3c:	bf00      	nop
 8009b3e:	371c      	adds	r7, #28
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f003 031f 	and.w	r3, r3, #31
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6a1a      	ldr	r2, [r3, #32]
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	43db      	mvns	r3, r3
 8009b6a:	401a      	ands	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a1a      	ldr	r2, [r3, #32]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b80:	431a      	orrs	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	621a      	str	r2, [r3, #32]
}
 8009b86:	bf00      	nop
 8009b88:	371c      	adds	r7, #28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
	...

08009b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d101      	bne.n	8009bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e05a      	b.n	8009c62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a21      	ldr	r2, [pc, #132]	; (8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d022      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bf8:	d01d      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a1d      	ldr	r2, [pc, #116]	; (8009c74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d018      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a1b      	ldr	r2, [pc, #108]	; (8009c78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d013      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a1a      	ldr	r2, [pc, #104]	; (8009c7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00e      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a18      	ldr	r2, [pc, #96]	; (8009c80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d009      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a17      	ldr	r2, [pc, #92]	; (8009c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d004      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a15      	ldr	r2, [pc, #84]	; (8009c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d10c      	bne.n	8009c50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	40010000 	.word	0x40010000
 8009c74:	40000400 	.word	0x40000400
 8009c78:	40000800 	.word	0x40000800
 8009c7c:	40000c00 	.word	0x40000c00
 8009c80:	40010400 	.word	0x40010400
 8009c84:	40014000 	.word	0x40014000
 8009c88:	40001800 	.word	0x40001800

08009c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e03d      	b.n	8009d24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e03f      	b.n	8009dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d106      	bne.n	8009d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fa f9e0 	bl	8004144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2224      	movs	r2, #36	; 0x24
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fe81 	bl	800aaa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	691a      	ldr	r2, [r3, #16]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695a      	ldr	r2, [r3, #20]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b08a      	sub	sp, #40	; 0x28
 8009df6:	af02      	add	r7, sp, #8
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	603b      	str	r3, [r7, #0]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b20      	cmp	r3, #32
 8009e10:	d17c      	bne.n	8009f0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <HAL_UART_Transmit+0x2c>
 8009e18:	88fb      	ldrh	r3, [r7, #6]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e075      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d101      	bne.n	8009e30 <HAL_UART_Transmit+0x3e>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e06e      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2221      	movs	r2, #33	; 0x21
 8009e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e46:	f7fa fb3f 	bl	80044c8 <HAL_GetTick>
 8009e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	88fa      	ldrh	r2, [r7, #6]
 8009e50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	88fa      	ldrh	r2, [r7, #6]
 8009e56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e60:	d108      	bne.n	8009e74 <HAL_UART_Transmit+0x82>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	e003      	b.n	8009e7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e84:	e02a      	b.n	8009edc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2180      	movs	r1, #128	; 0x80
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 fbc9 	bl	800a628 <UART_WaitOnFlagUntilTimeout>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e036      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10b      	bne.n	8009ebe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	3302      	adds	r3, #2
 8009eba:	61bb      	str	r3, [r7, #24]
 8009ebc:	e007      	b.n	8009ece <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1cf      	bne.n	8009e86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2200      	movs	r2, #0
 8009eee:	2140      	movs	r1, #64	; 0x40
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 fb99 	bl	800a628 <UART_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e006      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2220      	movs	r2, #32
 8009f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e000      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009f0c:	2302      	movs	r3, #2
  }
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3720      	adds	r7, #32
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b08a      	sub	sp, #40	; 0x28
 8009f1a:	af02      	add	r7, sp, #8
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	603b      	str	r3, [r7, #0]
 8009f22:	4613      	mov	r3, r2
 8009f24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	f040 808c 	bne.w	800a050 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <HAL_UART_Receive+0x2e>
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d101      	bne.n	8009f48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e084      	b.n	800a052 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d101      	bne.n	8009f56 <HAL_UART_Receive+0x40>
 8009f52:	2302      	movs	r3, #2
 8009f54:	e07d      	b.n	800a052 <HAL_UART_Receive+0x13c>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2222      	movs	r2, #34	; 0x22
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f72:	f7fa faa9 	bl	80044c8 <HAL_GetTick>
 8009f76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	88fa      	ldrh	r2, [r7, #6]
 8009f7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	88fa      	ldrh	r2, [r7, #6]
 8009f82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f8c:	d108      	bne.n	8009fa0 <HAL_UART_Receive+0x8a>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d104      	bne.n	8009fa0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	61bb      	str	r3, [r7, #24]
 8009f9e:	e003      	b.n	8009fa8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009fb0:	e043      	b.n	800a03a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2120      	movs	r1, #32
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 fb33 	bl	800a628 <UART_WaitOnFlagUntilTimeout>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e042      	b.n	800a052 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10c      	bne.n	8009fec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	61bb      	str	r3, [r7, #24]
 8009fea:	e01f      	b.n	800a02c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff4:	d007      	beq.n	800a006 <HAL_UART_Receive+0xf0>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10a      	bne.n	800a014 <HAL_UART_Receive+0xfe>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	e008      	b.n	800a026 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a020:	b2da      	uxtb	r2, r3
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	3301      	adds	r3, #1
 800a02a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a030:	b29b      	uxth	r3, r3
 800a032:	3b01      	subs	r3, #1
 800a034:	b29a      	uxth	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a03e:	b29b      	uxth	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1b6      	bne.n	8009fb2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2220      	movs	r2, #32
 800a048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e000      	b.n	800a052 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a050:	2302      	movs	r3, #2
  }
}
 800a052:	4618      	mov	r0, r3
 800a054:	3720      	adds	r7, #32
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	4613      	mov	r3, r2
 800a066:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b20      	cmp	r3, #32
 800a072:	d11d      	bne.n	800a0b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <HAL_UART_Receive_IT+0x26>
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e016      	b.n	800a0b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d101      	bne.n	800a092 <HAL_UART_Receive_IT+0x38>
 800a08e:	2302      	movs	r3, #2
 800a090:	e00f      	b.n	800a0b2 <HAL_UART_Receive_IT+0x58>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 fb08 	bl	800a6bc <UART_Start_Receive_IT>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	e000      	b.n	800a0b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a0b0:	2302      	movs	r3, #2
  }
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b084      	sub	sp, #16
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b20      	cmp	r3, #32
 800a0d2:	d11d      	bne.n	800a110 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <HAL_UART_Receive_DMA+0x26>
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e016      	b.n	800a112 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d101      	bne.n	800a0f2 <HAL_UART_Receive_DMA+0x38>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e00f      	b.n	800a112 <HAL_UART_Receive_DMA+0x58>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a100:	88fb      	ldrh	r3, [r7, #6]
 800a102:	461a      	mov	r2, r3
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 fb12 	bl	800a730 <UART_Start_Receive_DMA>
 800a10c:	4603      	mov	r3, r0
 800a10e:	e000      	b.n	800a112 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a110:	2302      	movs	r3, #2
  }
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08a      	sub	sp, #40	; 0x28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10d      	bne.n	800a16e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	f003 0320 	and.w	r3, r3, #32
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d008      	beq.n	800a16e <HAL_UART_IRQHandler+0x52>
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	f003 0320 	and.w	r3, r3, #32
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fc05 	bl	800a976 <UART_Receive_IT>
      return;
 800a16c:	e17c      	b.n	800a468 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 80b1 	beq.w	800a2d8 <HAL_UART_IRQHandler+0x1bc>
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d105      	bne.n	800a18c <HAL_UART_IRQHandler+0x70>
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80a6 	beq.w	800a2d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <HAL_UART_IRQHandler+0x90>
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d005      	beq.n	800a1ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a4:	f043 0201 	orr.w	r2, r3, #1
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00a      	beq.n	800a1cc <HAL_UART_IRQHandler+0xb0>
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	f043 0202 	orr.w	r2, r3, #2
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	f003 0302 	and.w	r3, r3, #2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <HAL_UART_IRQHandler+0xd0>
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	f043 0204 	orr.w	r2, r3, #4
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	f003 0308 	and.w	r3, r3, #8
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00f      	beq.n	800a216 <HAL_UART_IRQHandler+0xfa>
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f003 0320 	and.w	r3, r3, #32
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d104      	bne.n	800a20a <HAL_UART_IRQHandler+0xee>
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20e:	f043 0208 	orr.w	r2, r3, #8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 811f 	beq.w	800a45e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	f003 0320 	and.w	r3, r3, #32
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <HAL_UART_IRQHandler+0x11e>
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fb9e 	bl	800a976 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a244:	2b40      	cmp	r3, #64	; 0x40
 800a246:	bf0c      	ite	eq
 800a248:	2301      	moveq	r3, #1
 800a24a:	2300      	movne	r3, #0
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a254:	f003 0308 	and.w	r3, r3, #8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d102      	bne.n	800a262 <HAL_UART_IRQHandler+0x146>
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d031      	beq.n	800a2c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fade 	bl	800a824 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a272:	2b40      	cmp	r3, #64	; 0x40
 800a274:	d123      	bne.n	800a2be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695a      	ldr	r2, [r3, #20]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a284:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d013      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a292:	4a77      	ldr	r2, [pc, #476]	; (800a470 <HAL_UART_IRQHandler+0x354>)
 800a294:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fa fbcc 	bl	8004a38 <HAL_DMA_Abort_IT>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d016      	beq.n	800a2d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b4:	e00e      	b.n	800a2d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f8f0 	bl	800a49c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2bc:	e00a      	b.n	800a2d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8ec 	bl	800a49c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c4:	e006      	b.n	800a2d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f8e8 	bl	800a49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a2d2:	e0c4      	b.n	800a45e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d4:	bf00      	nop
    return;
 800a2d6:	e0c2      	b.n	800a45e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	f040 80a2 	bne.w	800a426 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	f003 0310 	and.w	r3, r3, #16
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 809c 	beq.w	800a426 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	f003 0310 	and.w	r3, r3, #16
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 8096 	beq.w	800a426 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	60fb      	str	r3, [r7, #12]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	60fb      	str	r3, [r7, #12]
 800a30e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a31a:	2b40      	cmp	r3, #64	; 0x40
 800a31c:	d14f      	bne.n	800a3be <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a328:	8a3b      	ldrh	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 8099 	beq.w	800a462 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a334:	8a3a      	ldrh	r2, [r7, #16]
 800a336:	429a      	cmp	r2, r3
 800a338:	f080 8093 	bcs.w	800a462 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	8a3a      	ldrh	r2, [r7, #16]
 800a340:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a34c:	d02b      	beq.n	800a3a6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a35c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	695a      	ldr	r2, [r3, #20]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 0201 	bic.w	r2, r2, #1
 800a36c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a37c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68da      	ldr	r2, [r3, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0210 	bic.w	r2, r2, #16
 800a39a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fa fad9 	bl	8004958 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f87a 	bl	800a4b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a3bc:	e051      	b.n	800a462 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d047      	beq.n	800a466 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800a3d6:	8a7b      	ldrh	r3, [r7, #18]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d044      	beq.n	800a466 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68da      	ldr	r2, [r3, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3ea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	695a      	ldr	r2, [r3, #20]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0201 	bic.w	r2, r2, #1
 800a3fa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68da      	ldr	r2, [r3, #12]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f022 0210 	bic.w	r2, r2, #16
 800a418:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a41a:	8a7b      	ldrh	r3, [r7, #18]
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f846 	bl	800a4b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a424:	e01f      	b.n	800a466 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d008      	beq.n	800a442 <HAL_UART_IRQHandler+0x326>
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa33 	bl	800a8a6 <UART_Transmit_IT>
    return;
 800a440:	e012      	b.n	800a468 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00d      	beq.n	800a468 <HAL_UART_IRQHandler+0x34c>
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d008      	beq.n	800a468 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fa75 	bl	800a946 <UART_EndTransmit_IT>
    return;
 800a45c:	e004      	b.n	800a468 <HAL_UART_IRQHandler+0x34c>
    return;
 800a45e:	bf00      	nop
 800a460:	e002      	b.n	800a468 <HAL_UART_IRQHandler+0x34c>
      return;
 800a462:	bf00      	nop
 800a464:	e000      	b.n	800a468 <HAL_UART_IRQHandler+0x34c>
      return;
 800a466:	bf00      	nop
  }
}
 800a468:	3728      	adds	r7, #40	; 0x28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	0800a87f 	.word	0x0800a87f

0800a474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d12a      	bne.n	800a53a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68da      	ldr	r2, [r3, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	695a      	ldr	r2, [r3, #20]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 0201 	bic.w	r2, r2, #1
 800a508:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	695a      	ldr	r2, [r3, #20]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a518:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	2b01      	cmp	r3, #1
 800a528:	d107      	bne.n	800a53a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68da      	ldr	r2, [r3, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f022 0210 	bic.w	r2, r2, #16
 800a538:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d106      	bne.n	800a550 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a546:	4619      	mov	r1, r3
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7ff ffb1 	bl	800a4b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a54e:	e002      	b.n	800a556 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7f8 fc69 	bl	8002e28 <HAL_UART_RxCpltCallback>
}
 800a556:	bf00      	nop
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a570:	2b01      	cmp	r3, #1
 800a572:	d108      	bne.n	800a586 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a578:	085b      	lsrs	r3, r3, #1
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	4619      	mov	r1, r3
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff ff96 	bl	800a4b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a584:	e002      	b.n	800a58c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff ff7e 	bl	800a488 <HAL_UART_RxHalfCpltCallback>
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b0:	2b80      	cmp	r3, #128	; 0x80
 800a5b2:	bf0c      	ite	eq
 800a5b4:	2301      	moveq	r3, #1
 800a5b6:	2300      	movne	r3, #0
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b21      	cmp	r3, #33	; 0x21
 800a5c6:	d108      	bne.n	800a5da <UART_DMAError+0x46>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d005      	beq.n	800a5da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a5d4:	68b8      	ldr	r0, [r7, #8]
 800a5d6:	f000 f90f 	bl	800a7f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	bf0c      	ite	eq
 800a5e8:	2301      	moveq	r3, #1
 800a5ea:	2300      	movne	r3, #0
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b22      	cmp	r3, #34	; 0x22
 800a5fa:	d108      	bne.n	800a60e <UART_DMAError+0x7a>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d005      	beq.n	800a60e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2200      	movs	r2, #0
 800a606:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a608:	68b8      	ldr	r0, [r7, #8]
 800a60a:	f000 f90b 	bl	800a824 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a612:	f043 0210 	orr.w	r2, r3, #16
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a61a:	68b8      	ldr	r0, [r7, #8]
 800a61c:	f7ff ff3e 	bl	800a49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a620:	bf00      	nop
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a638:	e02c      	b.n	800a694 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d028      	beq.n	800a694 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d007      	beq.n	800a658 <UART_WaitOnFlagUntilTimeout+0x30>
 800a648:	f7f9 ff3e 	bl	80044c8 <HAL_GetTick>
 800a64c:	4602      	mov	r2, r0
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	429a      	cmp	r2, r3
 800a656:	d21d      	bcs.n	800a694 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a666:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	695a      	ldr	r2, [r3, #20]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0201 	bic.w	r2, r2, #1
 800a676:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2220      	movs	r2, #32
 800a684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e00f      	b.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	4013      	ands	r3, r2
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	bf0c      	ite	eq
 800a6a4:	2301      	moveq	r3, #1
 800a6a6:	2300      	movne	r3, #0
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d0c3      	beq.n	800a63a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	88fa      	ldrh	r2, [r7, #6]
 800a6d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	88fa      	ldrh	r2, [r7, #6]
 800a6da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2222      	movs	r2, #34	; 0x22
 800a6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a700:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695a      	ldr	r2, [r3, #20]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f042 0201 	orr.w	r2, r2, #1
 800a710:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f042 0220 	orr.w	r2, r2, #32
 800a720:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	88fa      	ldrh	r2, [r7, #6]
 800a748:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2222      	movs	r2, #34	; 0x22
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75c:	4a23      	ldr	r2, [pc, #140]	; (800a7ec <UART_Start_Receive_DMA+0xbc>)
 800a75e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a764:	4a22      	ldr	r2, [pc, #136]	; (800a7f0 <UART_Start_Receive_DMA+0xc0>)
 800a766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	4a21      	ldr	r2, [pc, #132]	; (800a7f4 <UART_Start_Receive_DMA+0xc4>)
 800a76e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a774:	2200      	movs	r2, #0
 800a776:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a778:	f107 0308 	add.w	r3, r7, #8
 800a77c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3304      	adds	r3, #4
 800a788:	4619      	mov	r1, r3
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	88fb      	ldrh	r3, [r7, #6]
 800a790:	f7fa f88a 	bl	80048a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a794:	2300      	movs	r3, #0
 800a796:	613b      	str	r3, [r7, #16]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	613b      	str	r3, [r7, #16]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	613b      	str	r3, [r7, #16]
 800a7a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7c0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	695a      	ldr	r2, [r3, #20]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f042 0201 	orr.w	r2, r2, #1
 800a7d0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	695a      	ldr	r2, [r3, #20]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7e0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3718      	adds	r7, #24
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	0800a4c9 	.word	0x0800a4c9
 800a7f0:	0800a55f 	.word	0x0800a55f
 800a7f4:	0800a595 	.word	0x0800a595

0800a7f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68da      	ldr	r2, [r3, #12]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a80e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a83a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	695a      	ldr	r2, [r3, #20]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f022 0201 	bic.w	r2, r2, #1
 800a84a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a850:	2b01      	cmp	r3, #1
 800a852:	d107      	bne.n	800a864 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68da      	ldr	r2, [r3, #12]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0210 	bic.w	r2, r2, #16
 800a862:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2220      	movs	r2, #32
 800a868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7ff fdff 	bl	800a49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b21      	cmp	r3, #33	; 0x21
 800a8b8:	d13e      	bne.n	800a938 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c2:	d114      	bne.n	800a8ee <UART_Transmit_IT+0x48>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d110      	bne.n	800a8ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	1c9a      	adds	r2, r3, #2
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	621a      	str	r2, [r3, #32]
 800a8ec:	e008      	b.n	800a900 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	1c59      	adds	r1, r3, #1
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6211      	str	r1, [r2, #32]
 800a8f8:	781a      	ldrb	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a904:	b29b      	uxth	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	b29b      	uxth	r3, r3
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	4619      	mov	r1, r3
 800a90e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10f      	bne.n	800a934 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a922:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68da      	ldr	r2, [r3, #12]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a932:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	e000      	b.n	800a93a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a938:	2302      	movs	r3, #2
  }
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a95c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2220      	movs	r2, #32
 800a962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff fd84 	bl	800a474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b22      	cmp	r3, #34	; 0x22
 800a988:	f040 8087 	bne.w	800aa9a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a994:	d117      	bne.n	800a9c6 <UART_Receive_IT+0x50>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d113      	bne.n	800a9c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9be:	1c9a      	adds	r2, r3, #2
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	629a      	str	r2, [r3, #40]	; 0x28
 800a9c4:	e026      	b.n	800aa14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ca:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9d8:	d007      	beq.n	800a9ea <UART_Receive_IT+0x74>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10a      	bne.n	800a9f8 <UART_Receive_IT+0x82>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d106      	bne.n	800a9f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	701a      	strb	r2, [r3, #0]
 800a9f6:	e008      	b.n	800aa0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4619      	mov	r1, r3
 800aa22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d136      	bne.n	800aa96 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0220 	bic.w	r2, r2, #32
 800aa36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	695a      	ldr	r2, [r3, #20]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 0201 	bic.w	r2, r2, #1
 800aa56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d10e      	bne.n	800aa86 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f022 0210 	bic.w	r2, r2, #16
 800aa76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff fd16 	bl	800a4b0 <HAL_UARTEx_RxEventCallback>
 800aa84:	e002      	b.n	800aa8c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7f8 f9ce 	bl	8002e28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e002      	b.n	800aa9c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	e000      	b.n	800aa9c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800aa9a:	2302      	movs	r3, #2
  }
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	b09f      	sub	sp, #124	; 0x7c
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aaae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaba:	68d9      	ldr	r1, [r3, #12]
 800aabc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	ea40 0301 	orr.w	r3, r0, r1
 800aac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac8:	689a      	ldr	r2, [r3, #8]
 800aaca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	431a      	orrs	r2, r3
 800aad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	431a      	orrs	r2, r3
 800aad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	4313      	orrs	r3, r2
 800aadc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800aade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aae8:	f021 010c 	bic.w	r1, r1, #12
 800aaec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaf2:	430b      	orrs	r3, r1
 800aaf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aaf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab02:	6999      	ldr	r1, [r3, #24]
 800ab04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	ea40 0301 	orr.w	r3, r0, r1
 800ab0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4bc5      	ldr	r3, [pc, #788]	; (800ae28 <UART_SetConfig+0x384>)
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d004      	beq.n	800ab22 <UART_SetConfig+0x7e>
 800ab18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	4bc3      	ldr	r3, [pc, #780]	; (800ae2c <UART_SetConfig+0x388>)
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d103      	bne.n	800ab2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab22:	f7fd ff41 	bl	80089a8 <HAL_RCC_GetPCLK2Freq>
 800ab26:	6778      	str	r0, [r7, #116]	; 0x74
 800ab28:	e002      	b.n	800ab30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab2a:	f7fd ff29 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 800ab2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab38:	f040 80b6 	bne.w	800aca8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab3e:	461c      	mov	r4, r3
 800ab40:	f04f 0500 	mov.w	r5, #0
 800ab44:	4622      	mov	r2, r4
 800ab46:	462b      	mov	r3, r5
 800ab48:	1891      	adds	r1, r2, r2
 800ab4a:	6439      	str	r1, [r7, #64]	; 0x40
 800ab4c:	415b      	adcs	r3, r3
 800ab4e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab54:	1912      	adds	r2, r2, r4
 800ab56:	eb45 0303 	adc.w	r3, r5, r3
 800ab5a:	f04f 0000 	mov.w	r0, #0
 800ab5e:	f04f 0100 	mov.w	r1, #0
 800ab62:	00d9      	lsls	r1, r3, #3
 800ab64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab68:	00d0      	lsls	r0, r2, #3
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	1911      	adds	r1, r2, r4
 800ab70:	6639      	str	r1, [r7, #96]	; 0x60
 800ab72:	416b      	adcs	r3, r5
 800ab74:	667b      	str	r3, [r7, #100]	; 0x64
 800ab76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f04f 0300 	mov.w	r3, #0
 800ab80:	1891      	adds	r1, r2, r2
 800ab82:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab84:	415b      	adcs	r3, r3
 800ab86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ab90:	f7f5 fffe 	bl	8000b90 <__aeabi_uldivmod>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4ba5      	ldr	r3, [pc, #660]	; (800ae30 <UART_SetConfig+0x38c>)
 800ab9a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab9e:	095b      	lsrs	r3, r3, #5
 800aba0:	011e      	lsls	r6, r3, #4
 800aba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aba4:	461c      	mov	r4, r3
 800aba6:	f04f 0500 	mov.w	r5, #0
 800abaa:	4622      	mov	r2, r4
 800abac:	462b      	mov	r3, r5
 800abae:	1891      	adds	r1, r2, r2
 800abb0:	6339      	str	r1, [r7, #48]	; 0x30
 800abb2:	415b      	adcs	r3, r3
 800abb4:	637b      	str	r3, [r7, #52]	; 0x34
 800abb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800abba:	1912      	adds	r2, r2, r4
 800abbc:	eb45 0303 	adc.w	r3, r5, r3
 800abc0:	f04f 0000 	mov.w	r0, #0
 800abc4:	f04f 0100 	mov.w	r1, #0
 800abc8:	00d9      	lsls	r1, r3, #3
 800abca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800abce:	00d0      	lsls	r0, r2, #3
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	1911      	adds	r1, r2, r4
 800abd6:	65b9      	str	r1, [r7, #88]	; 0x58
 800abd8:	416b      	adcs	r3, r5
 800abda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	461a      	mov	r2, r3
 800abe2:	f04f 0300 	mov.w	r3, #0
 800abe6:	1891      	adds	r1, r2, r2
 800abe8:	62b9      	str	r1, [r7, #40]	; 0x28
 800abea:	415b      	adcs	r3, r3
 800abec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800abf6:	f7f5 ffcb 	bl	8000b90 <__aeabi_uldivmod>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4b8c      	ldr	r3, [pc, #560]	; (800ae30 <UART_SetConfig+0x38c>)
 800ac00:	fba3 1302 	umull	r1, r3, r3, r2
 800ac04:	095b      	lsrs	r3, r3, #5
 800ac06:	2164      	movs	r1, #100	; 0x64
 800ac08:	fb01 f303 	mul.w	r3, r1, r3
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	3332      	adds	r3, #50	; 0x32
 800ac12:	4a87      	ldr	r2, [pc, #540]	; (800ae30 <UART_SetConfig+0x38c>)
 800ac14:	fba2 2303 	umull	r2, r3, r2, r3
 800ac18:	095b      	lsrs	r3, r3, #5
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac20:	441e      	add	r6, r3
 800ac22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac24:	4618      	mov	r0, r3
 800ac26:	f04f 0100 	mov.w	r1, #0
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	1894      	adds	r4, r2, r2
 800ac30:	623c      	str	r4, [r7, #32]
 800ac32:	415b      	adcs	r3, r3
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
 800ac36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac3a:	1812      	adds	r2, r2, r0
 800ac3c:	eb41 0303 	adc.w	r3, r1, r3
 800ac40:	f04f 0400 	mov.w	r4, #0
 800ac44:	f04f 0500 	mov.w	r5, #0
 800ac48:	00dd      	lsls	r5, r3, #3
 800ac4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac4e:	00d4      	lsls	r4, r2, #3
 800ac50:	4622      	mov	r2, r4
 800ac52:	462b      	mov	r3, r5
 800ac54:	1814      	adds	r4, r2, r0
 800ac56:	653c      	str	r4, [r7, #80]	; 0x50
 800ac58:	414b      	adcs	r3, r1
 800ac5a:	657b      	str	r3, [r7, #84]	; 0x54
 800ac5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	461a      	mov	r2, r3
 800ac62:	f04f 0300 	mov.w	r3, #0
 800ac66:	1891      	adds	r1, r2, r2
 800ac68:	61b9      	str	r1, [r7, #24]
 800ac6a:	415b      	adcs	r3, r3
 800ac6c:	61fb      	str	r3, [r7, #28]
 800ac6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ac76:	f7f5 ff8b 	bl	8000b90 <__aeabi_uldivmod>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4b6c      	ldr	r3, [pc, #432]	; (800ae30 <UART_SetConfig+0x38c>)
 800ac80:	fba3 1302 	umull	r1, r3, r3, r2
 800ac84:	095b      	lsrs	r3, r3, #5
 800ac86:	2164      	movs	r1, #100	; 0x64
 800ac88:	fb01 f303 	mul.w	r3, r1, r3
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	3332      	adds	r3, #50	; 0x32
 800ac92:	4a67      	ldr	r2, [pc, #412]	; (800ae30 <UART_SetConfig+0x38c>)
 800ac94:	fba2 2303 	umull	r2, r3, r2, r3
 800ac98:	095b      	lsrs	r3, r3, #5
 800ac9a:	f003 0207 	and.w	r2, r3, #7
 800ac9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4432      	add	r2, r6
 800aca4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aca6:	e0b9      	b.n	800ae1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acaa:	461c      	mov	r4, r3
 800acac:	f04f 0500 	mov.w	r5, #0
 800acb0:	4622      	mov	r2, r4
 800acb2:	462b      	mov	r3, r5
 800acb4:	1891      	adds	r1, r2, r2
 800acb6:	6139      	str	r1, [r7, #16]
 800acb8:	415b      	adcs	r3, r3
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800acc0:	1912      	adds	r2, r2, r4
 800acc2:	eb45 0303 	adc.w	r3, r5, r3
 800acc6:	f04f 0000 	mov.w	r0, #0
 800acca:	f04f 0100 	mov.w	r1, #0
 800acce:	00d9      	lsls	r1, r3, #3
 800acd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acd4:	00d0      	lsls	r0, r2, #3
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	eb12 0804 	adds.w	r8, r2, r4
 800acde:	eb43 0905 	adc.w	r9, r3, r5
 800ace2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f04f 0100 	mov.w	r1, #0
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	f04f 0300 	mov.w	r3, #0
 800acf4:	008b      	lsls	r3, r1, #2
 800acf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800acfa:	0082      	lsls	r2, r0, #2
 800acfc:	4640      	mov	r0, r8
 800acfe:	4649      	mov	r1, r9
 800ad00:	f7f5 ff46 	bl	8000b90 <__aeabi_uldivmod>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4b49      	ldr	r3, [pc, #292]	; (800ae30 <UART_SetConfig+0x38c>)
 800ad0a:	fba3 2302 	umull	r2, r3, r3, r2
 800ad0e:	095b      	lsrs	r3, r3, #5
 800ad10:	011e      	lsls	r6, r3, #4
 800ad12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad14:	4618      	mov	r0, r3
 800ad16:	f04f 0100 	mov.w	r1, #0
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	1894      	adds	r4, r2, r2
 800ad20:	60bc      	str	r4, [r7, #8]
 800ad22:	415b      	adcs	r3, r3
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad2a:	1812      	adds	r2, r2, r0
 800ad2c:	eb41 0303 	adc.w	r3, r1, r3
 800ad30:	f04f 0400 	mov.w	r4, #0
 800ad34:	f04f 0500 	mov.w	r5, #0
 800ad38:	00dd      	lsls	r5, r3, #3
 800ad3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad3e:	00d4      	lsls	r4, r2, #3
 800ad40:	4622      	mov	r2, r4
 800ad42:	462b      	mov	r3, r5
 800ad44:	1814      	adds	r4, r2, r0
 800ad46:	64bc      	str	r4, [r7, #72]	; 0x48
 800ad48:	414b      	adcs	r3, r1
 800ad4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f04f 0100 	mov.w	r1, #0
 800ad56:	f04f 0200 	mov.w	r2, #0
 800ad5a:	f04f 0300 	mov.w	r3, #0
 800ad5e:	008b      	lsls	r3, r1, #2
 800ad60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ad64:	0082      	lsls	r2, r0, #2
 800ad66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ad6a:	f7f5 ff11 	bl	8000b90 <__aeabi_uldivmod>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4b2f      	ldr	r3, [pc, #188]	; (800ae30 <UART_SetConfig+0x38c>)
 800ad74:	fba3 1302 	umull	r1, r3, r3, r2
 800ad78:	095b      	lsrs	r3, r3, #5
 800ad7a:	2164      	movs	r1, #100	; 0x64
 800ad7c:	fb01 f303 	mul.w	r3, r1, r3
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	3332      	adds	r3, #50	; 0x32
 800ad86:	4a2a      	ldr	r2, [pc, #168]	; (800ae30 <UART_SetConfig+0x38c>)
 800ad88:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8c:	095b      	lsrs	r3, r3, #5
 800ad8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad92:	441e      	add	r6, r3
 800ad94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad96:	4618      	mov	r0, r3
 800ad98:	f04f 0100 	mov.w	r1, #0
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	1894      	adds	r4, r2, r2
 800ada2:	603c      	str	r4, [r7, #0]
 800ada4:	415b      	adcs	r3, r3
 800ada6:	607b      	str	r3, [r7, #4]
 800ada8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adac:	1812      	adds	r2, r2, r0
 800adae:	eb41 0303 	adc.w	r3, r1, r3
 800adb2:	f04f 0400 	mov.w	r4, #0
 800adb6:	f04f 0500 	mov.w	r5, #0
 800adba:	00dd      	lsls	r5, r3, #3
 800adbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800adc0:	00d4      	lsls	r4, r2, #3
 800adc2:	4622      	mov	r2, r4
 800adc4:	462b      	mov	r3, r5
 800adc6:	eb12 0a00 	adds.w	sl, r2, r0
 800adca:	eb43 0b01 	adc.w	fp, r3, r1
 800adce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	4618      	mov	r0, r3
 800add4:	f04f 0100 	mov.w	r1, #0
 800add8:	f04f 0200 	mov.w	r2, #0
 800addc:	f04f 0300 	mov.w	r3, #0
 800ade0:	008b      	lsls	r3, r1, #2
 800ade2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ade6:	0082      	lsls	r2, r0, #2
 800ade8:	4650      	mov	r0, sl
 800adea:	4659      	mov	r1, fp
 800adec:	f7f5 fed0 	bl	8000b90 <__aeabi_uldivmod>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	4b0e      	ldr	r3, [pc, #56]	; (800ae30 <UART_SetConfig+0x38c>)
 800adf6:	fba3 1302 	umull	r1, r3, r3, r2
 800adfa:	095b      	lsrs	r3, r3, #5
 800adfc:	2164      	movs	r1, #100	; 0x64
 800adfe:	fb01 f303 	mul.w	r3, r1, r3
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	011b      	lsls	r3, r3, #4
 800ae06:	3332      	adds	r3, #50	; 0x32
 800ae08:	4a09      	ldr	r2, [pc, #36]	; (800ae30 <UART_SetConfig+0x38c>)
 800ae0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0e:	095b      	lsrs	r3, r3, #5
 800ae10:	f003 020f 	and.w	r2, r3, #15
 800ae14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4432      	add	r2, r6
 800ae1a:	609a      	str	r2, [r3, #8]
}
 800ae1c:	bf00      	nop
 800ae1e:	377c      	adds	r7, #124	; 0x7c
 800ae20:	46bd      	mov	sp, r7
 800ae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae26:	bf00      	nop
 800ae28:	40011000 	.word	0x40011000
 800ae2c:	40011400 	.word	0x40011400
 800ae30:	51eb851f 	.word	0x51eb851f
 800ae34:	00000000 	.word	0x00000000

0800ae38 <cos>:
 800ae38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae3a:	ec53 2b10 	vmov	r2, r3, d0
 800ae3e:	4824      	ldr	r0, [pc, #144]	; (800aed0 <cos+0x98>)
 800ae40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae44:	4281      	cmp	r1, r0
 800ae46:	dc06      	bgt.n	800ae56 <cos+0x1e>
 800ae48:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800aec8 <cos+0x90>
 800ae4c:	f000 fc5c 	bl	800b708 <__kernel_cos>
 800ae50:	ec51 0b10 	vmov	r0, r1, d0
 800ae54:	e007      	b.n	800ae66 <cos+0x2e>
 800ae56:	481f      	ldr	r0, [pc, #124]	; (800aed4 <cos+0x9c>)
 800ae58:	4281      	cmp	r1, r0
 800ae5a:	dd09      	ble.n	800ae70 <cos+0x38>
 800ae5c:	ee10 0a10 	vmov	r0, s0
 800ae60:	4619      	mov	r1, r3
 800ae62:	f7f5 f9b5 	bl	80001d0 <__aeabi_dsub>
 800ae66:	ec41 0b10 	vmov	d0, r0, r1
 800ae6a:	b005      	add	sp, #20
 800ae6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae70:	4668      	mov	r0, sp
 800ae72:	f000 f989 	bl	800b188 <__ieee754_rem_pio2>
 800ae76:	f000 0003 	and.w	r0, r0, #3
 800ae7a:	2801      	cmp	r0, #1
 800ae7c:	d007      	beq.n	800ae8e <cos+0x56>
 800ae7e:	2802      	cmp	r0, #2
 800ae80:	d012      	beq.n	800aea8 <cos+0x70>
 800ae82:	b9c0      	cbnz	r0, 800aeb6 <cos+0x7e>
 800ae84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae88:	ed9d 0b00 	vldr	d0, [sp]
 800ae8c:	e7de      	b.n	800ae4c <cos+0x14>
 800ae8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae92:	ed9d 0b00 	vldr	d0, [sp]
 800ae96:	f001 f83f 	bl	800bf18 <__kernel_sin>
 800ae9a:	ec53 2b10 	vmov	r2, r3, d0
 800ae9e:	ee10 0a10 	vmov	r0, s0
 800aea2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aea6:	e7de      	b.n	800ae66 <cos+0x2e>
 800aea8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aeac:	ed9d 0b00 	vldr	d0, [sp]
 800aeb0:	f000 fc2a 	bl	800b708 <__kernel_cos>
 800aeb4:	e7f1      	b.n	800ae9a <cos+0x62>
 800aeb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aeba:	ed9d 0b00 	vldr	d0, [sp]
 800aebe:	2001      	movs	r0, #1
 800aec0:	f001 f82a 	bl	800bf18 <__kernel_sin>
 800aec4:	e7c4      	b.n	800ae50 <cos+0x18>
 800aec6:	bf00      	nop
	...
 800aed0:	3fe921fb 	.word	0x3fe921fb
 800aed4:	7fefffff 	.word	0x7fefffff

0800aed8 <sin>:
 800aed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeda:	ec53 2b10 	vmov	r2, r3, d0
 800aede:	4826      	ldr	r0, [pc, #152]	; (800af78 <sin+0xa0>)
 800aee0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aee4:	4281      	cmp	r1, r0
 800aee6:	dc07      	bgt.n	800aef8 <sin+0x20>
 800aee8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800af70 <sin+0x98>
 800aeec:	2000      	movs	r0, #0
 800aeee:	f001 f813 	bl	800bf18 <__kernel_sin>
 800aef2:	ec51 0b10 	vmov	r0, r1, d0
 800aef6:	e007      	b.n	800af08 <sin+0x30>
 800aef8:	4820      	ldr	r0, [pc, #128]	; (800af7c <sin+0xa4>)
 800aefa:	4281      	cmp	r1, r0
 800aefc:	dd09      	ble.n	800af12 <sin+0x3a>
 800aefe:	ee10 0a10 	vmov	r0, s0
 800af02:	4619      	mov	r1, r3
 800af04:	f7f5 f964 	bl	80001d0 <__aeabi_dsub>
 800af08:	ec41 0b10 	vmov	d0, r0, r1
 800af0c:	b005      	add	sp, #20
 800af0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800af12:	4668      	mov	r0, sp
 800af14:	f000 f938 	bl	800b188 <__ieee754_rem_pio2>
 800af18:	f000 0003 	and.w	r0, r0, #3
 800af1c:	2801      	cmp	r0, #1
 800af1e:	d008      	beq.n	800af32 <sin+0x5a>
 800af20:	2802      	cmp	r0, #2
 800af22:	d00d      	beq.n	800af40 <sin+0x68>
 800af24:	b9d0      	cbnz	r0, 800af5c <sin+0x84>
 800af26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af2a:	ed9d 0b00 	vldr	d0, [sp]
 800af2e:	2001      	movs	r0, #1
 800af30:	e7dd      	b.n	800aeee <sin+0x16>
 800af32:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af36:	ed9d 0b00 	vldr	d0, [sp]
 800af3a:	f000 fbe5 	bl	800b708 <__kernel_cos>
 800af3e:	e7d8      	b.n	800aef2 <sin+0x1a>
 800af40:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af44:	ed9d 0b00 	vldr	d0, [sp]
 800af48:	2001      	movs	r0, #1
 800af4a:	f000 ffe5 	bl	800bf18 <__kernel_sin>
 800af4e:	ec53 2b10 	vmov	r2, r3, d0
 800af52:	ee10 0a10 	vmov	r0, s0
 800af56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800af5a:	e7d5      	b.n	800af08 <sin+0x30>
 800af5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af60:	ed9d 0b00 	vldr	d0, [sp]
 800af64:	f000 fbd0 	bl	800b708 <__kernel_cos>
 800af68:	e7f1      	b.n	800af4e <sin+0x76>
 800af6a:	bf00      	nop
 800af6c:	f3af 8000 	nop.w
	...
 800af78:	3fe921fb 	.word	0x3fe921fb
 800af7c:	7fefffff 	.word	0x7fefffff

0800af80 <atan2>:
 800af80:	f000 b836 	b.w	800aff0 <__ieee754_atan2>

0800af84 <sqrt>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	ed2d 8b02 	vpush	{d8}
 800af8a:	ec55 4b10 	vmov	r4, r5, d0
 800af8e:	f000 fb05 	bl	800b59c <__ieee754_sqrt>
 800af92:	4b15      	ldr	r3, [pc, #84]	; (800afe8 <sqrt+0x64>)
 800af94:	eeb0 8a40 	vmov.f32	s16, s0
 800af98:	eef0 8a60 	vmov.f32	s17, s1
 800af9c:	f993 3000 	ldrsb.w	r3, [r3]
 800afa0:	3301      	adds	r3, #1
 800afa2:	d019      	beq.n	800afd8 <sqrt+0x54>
 800afa4:	4622      	mov	r2, r4
 800afa6:	462b      	mov	r3, r5
 800afa8:	4620      	mov	r0, r4
 800afaa:	4629      	mov	r1, r5
 800afac:	f7f5 fd62 	bl	8000a74 <__aeabi_dcmpun>
 800afb0:	b990      	cbnz	r0, 800afd8 <sqrt+0x54>
 800afb2:	2200      	movs	r2, #0
 800afb4:	2300      	movs	r3, #0
 800afb6:	4620      	mov	r0, r4
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 fd33 	bl	8000a24 <__aeabi_dcmplt>
 800afbe:	b158      	cbz	r0, 800afd8 <sqrt+0x54>
 800afc0:	f001 fb20 	bl	800c604 <__errno>
 800afc4:	2321      	movs	r3, #33	; 0x21
 800afc6:	6003      	str	r3, [r0, #0]
 800afc8:	2200      	movs	r2, #0
 800afca:	2300      	movs	r3, #0
 800afcc:	4610      	mov	r0, r2
 800afce:	4619      	mov	r1, r3
 800afd0:	f7f5 fbe0 	bl	8000794 <__aeabi_ddiv>
 800afd4:	ec41 0b18 	vmov	d8, r0, r1
 800afd8:	eeb0 0a48 	vmov.f32	s0, s16
 800afdc:	eef0 0a68 	vmov.f32	s1, s17
 800afe0:	ecbd 8b02 	vpop	{d8}
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	bf00      	nop
 800afe8:	20000025 	.word	0x20000025
 800afec:	00000000 	.word	0x00000000

0800aff0 <__ieee754_atan2>:
 800aff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff4:	ec57 6b11 	vmov	r6, r7, d1
 800aff8:	4273      	negs	r3, r6
 800affa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b180 <__ieee754_atan2+0x190>
 800affe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b002:	4333      	orrs	r3, r6
 800b004:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b008:	4573      	cmp	r3, lr
 800b00a:	ec51 0b10 	vmov	r0, r1, d0
 800b00e:	ee11 8a10 	vmov	r8, s2
 800b012:	d80a      	bhi.n	800b02a <__ieee754_atan2+0x3a>
 800b014:	4244      	negs	r4, r0
 800b016:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b01a:	4304      	orrs	r4, r0
 800b01c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b020:	4574      	cmp	r4, lr
 800b022:	ee10 9a10 	vmov	r9, s0
 800b026:	468c      	mov	ip, r1
 800b028:	d907      	bls.n	800b03a <__ieee754_atan2+0x4a>
 800b02a:	4632      	mov	r2, r6
 800b02c:	463b      	mov	r3, r7
 800b02e:	f7f5 f8d1 	bl	80001d4 <__adddf3>
 800b032:	ec41 0b10 	vmov	d0, r0, r1
 800b036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b03a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b03e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b042:	4334      	orrs	r4, r6
 800b044:	d103      	bne.n	800b04e <__ieee754_atan2+0x5e>
 800b046:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b04a:	f001 b825 	b.w	800c098 <atan>
 800b04e:	17bc      	asrs	r4, r7, #30
 800b050:	f004 0402 	and.w	r4, r4, #2
 800b054:	ea53 0909 	orrs.w	r9, r3, r9
 800b058:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b05c:	d107      	bne.n	800b06e <__ieee754_atan2+0x7e>
 800b05e:	2c02      	cmp	r4, #2
 800b060:	d060      	beq.n	800b124 <__ieee754_atan2+0x134>
 800b062:	2c03      	cmp	r4, #3
 800b064:	d1e5      	bne.n	800b032 <__ieee754_atan2+0x42>
 800b066:	a142      	add	r1, pc, #264	; (adr r1, 800b170 <__ieee754_atan2+0x180>)
 800b068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b06c:	e7e1      	b.n	800b032 <__ieee754_atan2+0x42>
 800b06e:	ea52 0808 	orrs.w	r8, r2, r8
 800b072:	d106      	bne.n	800b082 <__ieee754_atan2+0x92>
 800b074:	f1bc 0f00 	cmp.w	ip, #0
 800b078:	da5f      	bge.n	800b13a <__ieee754_atan2+0x14a>
 800b07a:	a13f      	add	r1, pc, #252	; (adr r1, 800b178 <__ieee754_atan2+0x188>)
 800b07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b080:	e7d7      	b.n	800b032 <__ieee754_atan2+0x42>
 800b082:	4572      	cmp	r2, lr
 800b084:	d10f      	bne.n	800b0a6 <__ieee754_atan2+0xb6>
 800b086:	4293      	cmp	r3, r2
 800b088:	f104 34ff 	add.w	r4, r4, #4294967295
 800b08c:	d107      	bne.n	800b09e <__ieee754_atan2+0xae>
 800b08e:	2c02      	cmp	r4, #2
 800b090:	d84c      	bhi.n	800b12c <__ieee754_atan2+0x13c>
 800b092:	4b35      	ldr	r3, [pc, #212]	; (800b168 <__ieee754_atan2+0x178>)
 800b094:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b098:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b09c:	e7c9      	b.n	800b032 <__ieee754_atan2+0x42>
 800b09e:	2c02      	cmp	r4, #2
 800b0a0:	d848      	bhi.n	800b134 <__ieee754_atan2+0x144>
 800b0a2:	4b32      	ldr	r3, [pc, #200]	; (800b16c <__ieee754_atan2+0x17c>)
 800b0a4:	e7f6      	b.n	800b094 <__ieee754_atan2+0xa4>
 800b0a6:	4573      	cmp	r3, lr
 800b0a8:	d0e4      	beq.n	800b074 <__ieee754_atan2+0x84>
 800b0aa:	1a9b      	subs	r3, r3, r2
 800b0ac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b0b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0b4:	da1e      	bge.n	800b0f4 <__ieee754_atan2+0x104>
 800b0b6:	2f00      	cmp	r7, #0
 800b0b8:	da01      	bge.n	800b0be <__ieee754_atan2+0xce>
 800b0ba:	323c      	adds	r2, #60	; 0x3c
 800b0bc:	db1e      	blt.n	800b0fc <__ieee754_atan2+0x10c>
 800b0be:	4632      	mov	r2, r6
 800b0c0:	463b      	mov	r3, r7
 800b0c2:	f7f5 fb67 	bl	8000794 <__aeabi_ddiv>
 800b0c6:	ec41 0b10 	vmov	d0, r0, r1
 800b0ca:	f001 f985 	bl	800c3d8 <fabs>
 800b0ce:	f000 ffe3 	bl	800c098 <atan>
 800b0d2:	ec51 0b10 	vmov	r0, r1, d0
 800b0d6:	2c01      	cmp	r4, #1
 800b0d8:	d013      	beq.n	800b102 <__ieee754_atan2+0x112>
 800b0da:	2c02      	cmp	r4, #2
 800b0dc:	d015      	beq.n	800b10a <__ieee754_atan2+0x11a>
 800b0de:	2c00      	cmp	r4, #0
 800b0e0:	d0a7      	beq.n	800b032 <__ieee754_atan2+0x42>
 800b0e2:	a319      	add	r3, pc, #100	; (adr r3, 800b148 <__ieee754_atan2+0x158>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f872 	bl	80001d0 <__aeabi_dsub>
 800b0ec:	a318      	add	r3, pc, #96	; (adr r3, 800b150 <__ieee754_atan2+0x160>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	e014      	b.n	800b11e <__ieee754_atan2+0x12e>
 800b0f4:	a118      	add	r1, pc, #96	; (adr r1, 800b158 <__ieee754_atan2+0x168>)
 800b0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0fa:	e7ec      	b.n	800b0d6 <__ieee754_atan2+0xe6>
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	2100      	movs	r1, #0
 800b100:	e7e9      	b.n	800b0d6 <__ieee754_atan2+0xe6>
 800b102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b106:	4619      	mov	r1, r3
 800b108:	e793      	b.n	800b032 <__ieee754_atan2+0x42>
 800b10a:	a30f      	add	r3, pc, #60	; (adr r3, 800b148 <__ieee754_atan2+0x158>)
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f7f5 f85e 	bl	80001d0 <__aeabi_dsub>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	a10d      	add	r1, pc, #52	; (adr r1, 800b150 <__ieee754_atan2+0x160>)
 800b11a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b11e:	f7f5 f857 	bl	80001d0 <__aeabi_dsub>
 800b122:	e786      	b.n	800b032 <__ieee754_atan2+0x42>
 800b124:	a10a      	add	r1, pc, #40	; (adr r1, 800b150 <__ieee754_atan2+0x160>)
 800b126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b12a:	e782      	b.n	800b032 <__ieee754_atan2+0x42>
 800b12c:	a10c      	add	r1, pc, #48	; (adr r1, 800b160 <__ieee754_atan2+0x170>)
 800b12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b132:	e77e      	b.n	800b032 <__ieee754_atan2+0x42>
 800b134:	2000      	movs	r0, #0
 800b136:	2100      	movs	r1, #0
 800b138:	e77b      	b.n	800b032 <__ieee754_atan2+0x42>
 800b13a:	a107      	add	r1, pc, #28	; (adr r1, 800b158 <__ieee754_atan2+0x168>)
 800b13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b140:	e777      	b.n	800b032 <__ieee754_atan2+0x42>
 800b142:	bf00      	nop
 800b144:	f3af 8000 	nop.w
 800b148:	33145c07 	.word	0x33145c07
 800b14c:	3ca1a626 	.word	0x3ca1a626
 800b150:	54442d18 	.word	0x54442d18
 800b154:	400921fb 	.word	0x400921fb
 800b158:	54442d18 	.word	0x54442d18
 800b15c:	3ff921fb 	.word	0x3ff921fb
 800b160:	54442d18 	.word	0x54442d18
 800b164:	3fe921fb 	.word	0x3fe921fb
 800b168:	0800c7d8 	.word	0x0800c7d8
 800b16c:	0800c7f0 	.word	0x0800c7f0
 800b170:	54442d18 	.word	0x54442d18
 800b174:	c00921fb 	.word	0xc00921fb
 800b178:	54442d18 	.word	0x54442d18
 800b17c:	bff921fb 	.word	0xbff921fb
 800b180:	7ff00000 	.word	0x7ff00000
 800b184:	00000000 	.word	0x00000000

0800b188 <__ieee754_rem_pio2>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	ed2d 8b02 	vpush	{d8}
 800b190:	ec55 4b10 	vmov	r4, r5, d0
 800b194:	4bca      	ldr	r3, [pc, #808]	; (800b4c0 <__ieee754_rem_pio2+0x338>)
 800b196:	b08b      	sub	sp, #44	; 0x2c
 800b198:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b19c:	4598      	cmp	r8, r3
 800b19e:	4682      	mov	sl, r0
 800b1a0:	9502      	str	r5, [sp, #8]
 800b1a2:	dc08      	bgt.n	800b1b6 <__ieee754_rem_pio2+0x2e>
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	ed80 0b00 	vstr	d0, [r0]
 800b1ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b1b0:	f04f 0b00 	mov.w	fp, #0
 800b1b4:	e028      	b.n	800b208 <__ieee754_rem_pio2+0x80>
 800b1b6:	4bc3      	ldr	r3, [pc, #780]	; (800b4c4 <__ieee754_rem_pio2+0x33c>)
 800b1b8:	4598      	cmp	r8, r3
 800b1ba:	dc78      	bgt.n	800b2ae <__ieee754_rem_pio2+0x126>
 800b1bc:	9b02      	ldr	r3, [sp, #8]
 800b1be:	4ec2      	ldr	r6, [pc, #776]	; (800b4c8 <__ieee754_rem_pio2+0x340>)
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	ee10 0a10 	vmov	r0, s0
 800b1c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b488 <__ieee754_rem_pio2+0x300>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	dd39      	ble.n	800b244 <__ieee754_rem_pio2+0xbc>
 800b1d0:	f7f4 fffe 	bl	80001d0 <__aeabi_dsub>
 800b1d4:	45b0      	cmp	r8, r6
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	460d      	mov	r5, r1
 800b1da:	d01b      	beq.n	800b214 <__ieee754_rem_pio2+0x8c>
 800b1dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b490 <__ieee754_rem_pio2+0x308>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	f7f4 fff5 	bl	80001d0 <__aeabi_dsub>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	e9ca 2300 	strd	r2, r3, [sl]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f4 ffed 	bl	80001d0 <__aeabi_dsub>
 800b1f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b490 <__ieee754_rem_pio2+0x308>)
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	f7f4 ffe8 	bl	80001d0 <__aeabi_dsub>
 800b200:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b204:	f04f 0b01 	mov.w	fp, #1
 800b208:	4658      	mov	r0, fp
 800b20a:	b00b      	add	sp, #44	; 0x2c
 800b20c:	ecbd 8b02 	vpop	{d8}
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	a3a0      	add	r3, pc, #640	; (adr r3, 800b498 <__ieee754_rem_pio2+0x310>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f7f4 ffd9 	bl	80001d0 <__aeabi_dsub>
 800b21e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x318>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	4604      	mov	r4, r0
 800b226:	460d      	mov	r5, r1
 800b228:	f7f4 ffd2 	bl	80001d0 <__aeabi_dsub>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	e9ca 2300 	strd	r2, r3, [sl]
 800b234:	4620      	mov	r0, r4
 800b236:	4629      	mov	r1, r5
 800b238:	f7f4 ffca 	bl	80001d0 <__aeabi_dsub>
 800b23c:	a398      	add	r3, pc, #608	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x318>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	e7db      	b.n	800b1fc <__ieee754_rem_pio2+0x74>
 800b244:	f7f4 ffc6 	bl	80001d4 <__adddf3>
 800b248:	45b0      	cmp	r8, r6
 800b24a:	4604      	mov	r4, r0
 800b24c:	460d      	mov	r5, r1
 800b24e:	d016      	beq.n	800b27e <__ieee754_rem_pio2+0xf6>
 800b250:	a38f      	add	r3, pc, #572	; (adr r3, 800b490 <__ieee754_rem_pio2+0x308>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f4 ffbd 	bl	80001d4 <__adddf3>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	e9ca 2300 	strd	r2, r3, [sl]
 800b262:	4620      	mov	r0, r4
 800b264:	4629      	mov	r1, r5
 800b266:	f7f4 ffb3 	bl	80001d0 <__aeabi_dsub>
 800b26a:	a389      	add	r3, pc, #548	; (adr r3, 800b490 <__ieee754_rem_pio2+0x308>)
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	f7f4 ffb0 	bl	80001d4 <__adddf3>
 800b274:	f04f 3bff 	mov.w	fp, #4294967295
 800b278:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b27c:	e7c4      	b.n	800b208 <__ieee754_rem_pio2+0x80>
 800b27e:	a386      	add	r3, pc, #536	; (adr r3, 800b498 <__ieee754_rem_pio2+0x310>)
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	f7f4 ffa6 	bl	80001d4 <__adddf3>
 800b288:	a385      	add	r3, pc, #532	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x318>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	4604      	mov	r4, r0
 800b290:	460d      	mov	r5, r1
 800b292:	f7f4 ff9f 	bl	80001d4 <__adddf3>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	e9ca 2300 	strd	r2, r3, [sl]
 800b29e:	4620      	mov	r0, r4
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7f4 ff95 	bl	80001d0 <__aeabi_dsub>
 800b2a6:	a37e      	add	r3, pc, #504	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x318>)
 800b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ac:	e7e0      	b.n	800b270 <__ieee754_rem_pio2+0xe8>
 800b2ae:	4b87      	ldr	r3, [pc, #540]	; (800b4cc <__ieee754_rem_pio2+0x344>)
 800b2b0:	4598      	cmp	r8, r3
 800b2b2:	f300 80d9 	bgt.w	800b468 <__ieee754_rem_pio2+0x2e0>
 800b2b6:	f001 f88f 	bl	800c3d8 <fabs>
 800b2ba:	ec55 4b10 	vmov	r4, r5, d0
 800b2be:	ee10 0a10 	vmov	r0, s0
 800b2c2:	a379      	add	r3, pc, #484	; (adr r3, 800b4a8 <__ieee754_rem_pio2+0x320>)
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f5 f939 	bl	8000540 <__aeabi_dmul>
 800b2ce:	4b80      	ldr	r3, [pc, #512]	; (800b4d0 <__ieee754_rem_pio2+0x348>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f7f4 ff7f 	bl	80001d4 <__adddf3>
 800b2d6:	f7f5 fbe3 	bl	8000aa0 <__aeabi_d2iz>
 800b2da:	4683      	mov	fp, r0
 800b2dc:	f7f5 f8c6 	bl	800046c <__aeabi_i2d>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	ec43 2b18 	vmov	d8, r2, r3
 800b2e8:	a367      	add	r3, pc, #412	; (adr r3, 800b488 <__ieee754_rem_pio2+0x300>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	f7f5 f927 	bl	8000540 <__aeabi_dmul>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f4 ff69 	bl	80001d0 <__aeabi_dsub>
 800b2fe:	a364      	add	r3, pc, #400	; (adr r3, 800b490 <__ieee754_rem_pio2+0x308>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	ec51 0b18 	vmov	r0, r1, d8
 800b30c:	f7f5 f918 	bl	8000540 <__aeabi_dmul>
 800b310:	f1bb 0f1f 	cmp.w	fp, #31
 800b314:	4604      	mov	r4, r0
 800b316:	460d      	mov	r5, r1
 800b318:	dc0d      	bgt.n	800b336 <__ieee754_rem_pio2+0x1ae>
 800b31a:	4b6e      	ldr	r3, [pc, #440]	; (800b4d4 <__ieee754_rem_pio2+0x34c>)
 800b31c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b324:	4543      	cmp	r3, r8
 800b326:	d006      	beq.n	800b336 <__ieee754_rem_pio2+0x1ae>
 800b328:	4622      	mov	r2, r4
 800b32a:	462b      	mov	r3, r5
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f4 ff4e 	bl	80001d0 <__aeabi_dsub>
 800b334:	e00f      	b.n	800b356 <__ieee754_rem_pio2+0x1ce>
 800b336:	462b      	mov	r3, r5
 800b338:	4622      	mov	r2, r4
 800b33a:	4630      	mov	r0, r6
 800b33c:	4639      	mov	r1, r7
 800b33e:	f7f4 ff47 	bl	80001d0 <__aeabi_dsub>
 800b342:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b346:	9303      	str	r3, [sp, #12]
 800b348:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b34c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b350:	f1b8 0f10 	cmp.w	r8, #16
 800b354:	dc02      	bgt.n	800b35c <__ieee754_rem_pio2+0x1d4>
 800b356:	e9ca 0100 	strd	r0, r1, [sl]
 800b35a:	e039      	b.n	800b3d0 <__ieee754_rem_pio2+0x248>
 800b35c:	a34e      	add	r3, pc, #312	; (adr r3, 800b498 <__ieee754_rem_pio2+0x310>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	ec51 0b18 	vmov	r0, r1, d8
 800b366:	f7f5 f8eb 	bl	8000540 <__aeabi_dmul>
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4630      	mov	r0, r6
 800b374:	4639      	mov	r1, r7
 800b376:	f7f4 ff2b 	bl	80001d0 <__aeabi_dsub>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4680      	mov	r8, r0
 800b380:	4689      	mov	r9, r1
 800b382:	4630      	mov	r0, r6
 800b384:	4639      	mov	r1, r7
 800b386:	f7f4 ff23 	bl	80001d0 <__aeabi_dsub>
 800b38a:	4622      	mov	r2, r4
 800b38c:	462b      	mov	r3, r5
 800b38e:	f7f4 ff1f 	bl	80001d0 <__aeabi_dsub>
 800b392:	a343      	add	r3, pc, #268	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x318>)
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	4604      	mov	r4, r0
 800b39a:	460d      	mov	r5, r1
 800b39c:	ec51 0b18 	vmov	r0, r1, d8
 800b3a0:	f7f5 f8ce 	bl	8000540 <__aeabi_dmul>
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	f7f4 ff12 	bl	80001d0 <__aeabi_dsub>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	f7f4 ff0a 	bl	80001d0 <__aeabi_dsub>
 800b3bc:	9a03      	ldr	r2, [sp, #12]
 800b3be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	2b31      	cmp	r3, #49	; 0x31
 800b3c6:	dc24      	bgt.n	800b412 <__ieee754_rem_pio2+0x28a>
 800b3c8:	e9ca 0100 	strd	r0, r1, [sl]
 800b3cc:	4646      	mov	r6, r8
 800b3ce:	464f      	mov	r7, r9
 800b3d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	464b      	mov	r3, r9
 800b3da:	4639      	mov	r1, r7
 800b3dc:	f7f4 fef8 	bl	80001d0 <__aeabi_dsub>
 800b3e0:	462b      	mov	r3, r5
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	f7f4 fef4 	bl	80001d0 <__aeabi_dsub>
 800b3e8:	9b02      	ldr	r3, [sp, #8]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b3f0:	f6bf af0a 	bge.w	800b208 <__ieee754_rem_pio2+0x80>
 800b3f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b3f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b3fc:	f8ca 8000 	str.w	r8, [sl]
 800b400:	f8ca 0008 	str.w	r0, [sl, #8]
 800b404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b408:	f8ca 300c 	str.w	r3, [sl, #12]
 800b40c:	f1cb 0b00 	rsb	fp, fp, #0
 800b410:	e6fa      	b.n	800b208 <__ieee754_rem_pio2+0x80>
 800b412:	a327      	add	r3, pc, #156	; (adr r3, 800b4b0 <__ieee754_rem_pio2+0x328>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	ec51 0b18 	vmov	r0, r1, d8
 800b41c:	f7f5 f890 	bl	8000540 <__aeabi_dmul>
 800b420:	4604      	mov	r4, r0
 800b422:	460d      	mov	r5, r1
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4640      	mov	r0, r8
 800b42a:	4649      	mov	r1, r9
 800b42c:	f7f4 fed0 	bl	80001d0 <__aeabi_dsub>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4606      	mov	r6, r0
 800b436:	460f      	mov	r7, r1
 800b438:	4640      	mov	r0, r8
 800b43a:	4649      	mov	r1, r9
 800b43c:	f7f4 fec8 	bl	80001d0 <__aeabi_dsub>
 800b440:	4622      	mov	r2, r4
 800b442:	462b      	mov	r3, r5
 800b444:	f7f4 fec4 	bl	80001d0 <__aeabi_dsub>
 800b448:	a31b      	add	r3, pc, #108	; (adr r3, 800b4b8 <__ieee754_rem_pio2+0x330>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	ec51 0b18 	vmov	r0, r1, d8
 800b456:	f7f5 f873 	bl	8000540 <__aeabi_dmul>
 800b45a:	4622      	mov	r2, r4
 800b45c:	462b      	mov	r3, r5
 800b45e:	f7f4 feb7 	bl	80001d0 <__aeabi_dsub>
 800b462:	4604      	mov	r4, r0
 800b464:	460d      	mov	r5, r1
 800b466:	e75f      	b.n	800b328 <__ieee754_rem_pio2+0x1a0>
 800b468:	4b1b      	ldr	r3, [pc, #108]	; (800b4d8 <__ieee754_rem_pio2+0x350>)
 800b46a:	4598      	cmp	r8, r3
 800b46c:	dd36      	ble.n	800b4dc <__ieee754_rem_pio2+0x354>
 800b46e:	ee10 2a10 	vmov	r2, s0
 800b472:	462b      	mov	r3, r5
 800b474:	4620      	mov	r0, r4
 800b476:	4629      	mov	r1, r5
 800b478:	f7f4 feaa 	bl	80001d0 <__aeabi_dsub>
 800b47c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b480:	e9ca 0100 	strd	r0, r1, [sl]
 800b484:	e694      	b.n	800b1b0 <__ieee754_rem_pio2+0x28>
 800b486:	bf00      	nop
 800b488:	54400000 	.word	0x54400000
 800b48c:	3ff921fb 	.word	0x3ff921fb
 800b490:	1a626331 	.word	0x1a626331
 800b494:	3dd0b461 	.word	0x3dd0b461
 800b498:	1a600000 	.word	0x1a600000
 800b49c:	3dd0b461 	.word	0x3dd0b461
 800b4a0:	2e037073 	.word	0x2e037073
 800b4a4:	3ba3198a 	.word	0x3ba3198a
 800b4a8:	6dc9c883 	.word	0x6dc9c883
 800b4ac:	3fe45f30 	.word	0x3fe45f30
 800b4b0:	2e000000 	.word	0x2e000000
 800b4b4:	3ba3198a 	.word	0x3ba3198a
 800b4b8:	252049c1 	.word	0x252049c1
 800b4bc:	397b839a 	.word	0x397b839a
 800b4c0:	3fe921fb 	.word	0x3fe921fb
 800b4c4:	4002d97b 	.word	0x4002d97b
 800b4c8:	3ff921fb 	.word	0x3ff921fb
 800b4cc:	413921fb 	.word	0x413921fb
 800b4d0:	3fe00000 	.word	0x3fe00000
 800b4d4:	0800c808 	.word	0x0800c808
 800b4d8:	7fefffff 	.word	0x7fefffff
 800b4dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b4e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b4e4:	ee10 0a10 	vmov	r0, s0
 800b4e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b4ec:	ee10 6a10 	vmov	r6, s0
 800b4f0:	460f      	mov	r7, r1
 800b4f2:	f7f5 fad5 	bl	8000aa0 <__aeabi_d2iz>
 800b4f6:	f7f4 ffb9 	bl	800046c <__aeabi_i2d>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4630      	mov	r0, r6
 800b500:	4639      	mov	r1, r7
 800b502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b506:	f7f4 fe63 	bl	80001d0 <__aeabi_dsub>
 800b50a:	4b22      	ldr	r3, [pc, #136]	; (800b594 <__ieee754_rem_pio2+0x40c>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	f7f5 f817 	bl	8000540 <__aeabi_dmul>
 800b512:	460f      	mov	r7, r1
 800b514:	4606      	mov	r6, r0
 800b516:	f7f5 fac3 	bl	8000aa0 <__aeabi_d2iz>
 800b51a:	f7f4 ffa7 	bl	800046c <__aeabi_i2d>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4630      	mov	r0, r6
 800b524:	4639      	mov	r1, r7
 800b526:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b52a:	f7f4 fe51 	bl	80001d0 <__aeabi_dsub>
 800b52e:	4b19      	ldr	r3, [pc, #100]	; (800b594 <__ieee754_rem_pio2+0x40c>)
 800b530:	2200      	movs	r2, #0
 800b532:	f7f5 f805 	bl	8000540 <__aeabi_dmul>
 800b536:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b53a:	ad04      	add	r5, sp, #16
 800b53c:	f04f 0803 	mov.w	r8, #3
 800b540:	46a9      	mov	r9, r5
 800b542:	2600      	movs	r6, #0
 800b544:	2700      	movs	r7, #0
 800b546:	4632      	mov	r2, r6
 800b548:	463b      	mov	r3, r7
 800b54a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b54e:	46c3      	mov	fp, r8
 800b550:	3d08      	subs	r5, #8
 800b552:	f108 38ff 	add.w	r8, r8, #4294967295
 800b556:	f7f5 fa5b 	bl	8000a10 <__aeabi_dcmpeq>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d1f3      	bne.n	800b546 <__ieee754_rem_pio2+0x3be>
 800b55e:	4b0e      	ldr	r3, [pc, #56]	; (800b598 <__ieee754_rem_pio2+0x410>)
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	2302      	movs	r3, #2
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	4622      	mov	r2, r4
 800b568:	465b      	mov	r3, fp
 800b56a:	4651      	mov	r1, sl
 800b56c:	4648      	mov	r0, r9
 800b56e:	f000 f993 	bl	800b898 <__kernel_rem_pio2>
 800b572:	9b02      	ldr	r3, [sp, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	4683      	mov	fp, r0
 800b578:	f6bf ae46 	bge.w	800b208 <__ieee754_rem_pio2+0x80>
 800b57c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b580:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b584:	f8ca 3004 	str.w	r3, [sl, #4]
 800b588:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b58c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b590:	e73a      	b.n	800b408 <__ieee754_rem_pio2+0x280>
 800b592:	bf00      	nop
 800b594:	41700000 	.word	0x41700000
 800b598:	0800c888 	.word	0x0800c888

0800b59c <__ieee754_sqrt>:
 800b59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a0:	ec55 4b10 	vmov	r4, r5, d0
 800b5a4:	4e56      	ldr	r6, [pc, #344]	; (800b700 <__ieee754_sqrt+0x164>)
 800b5a6:	43ae      	bics	r6, r5
 800b5a8:	ee10 0a10 	vmov	r0, s0
 800b5ac:	ee10 3a10 	vmov	r3, s0
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	d110      	bne.n	800b5d8 <__ieee754_sqrt+0x3c>
 800b5b6:	ee10 2a10 	vmov	r2, s0
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	f7f4 ffc0 	bl	8000540 <__aeabi_dmul>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	f7f4 fe04 	bl	80001d4 <__adddf3>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	460d      	mov	r5, r1
 800b5d0:	ec45 4b10 	vmov	d0, r4, r5
 800b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	dc10      	bgt.n	800b5fe <__ieee754_sqrt+0x62>
 800b5dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5e0:	4330      	orrs	r0, r6
 800b5e2:	d0f5      	beq.n	800b5d0 <__ieee754_sqrt+0x34>
 800b5e4:	b15d      	cbz	r5, 800b5fe <__ieee754_sqrt+0x62>
 800b5e6:	ee10 2a10 	vmov	r2, s0
 800b5ea:	462b      	mov	r3, r5
 800b5ec:	ee10 0a10 	vmov	r0, s0
 800b5f0:	f7f4 fdee 	bl	80001d0 <__aeabi_dsub>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	f7f5 f8cc 	bl	8000794 <__aeabi_ddiv>
 800b5fc:	e7e6      	b.n	800b5cc <__ieee754_sqrt+0x30>
 800b5fe:	1509      	asrs	r1, r1, #20
 800b600:	d076      	beq.n	800b6f0 <__ieee754_sqrt+0x154>
 800b602:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b606:	07ce      	lsls	r6, r1, #31
 800b608:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b60c:	bf5e      	ittt	pl
 800b60e:	0fda      	lsrpl	r2, r3, #31
 800b610:	005b      	lslpl	r3, r3, #1
 800b612:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b616:	0fda      	lsrs	r2, r3, #31
 800b618:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b61c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b620:	2000      	movs	r0, #0
 800b622:	106d      	asrs	r5, r5, #1
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	f04f 0e16 	mov.w	lr, #22
 800b62a:	4684      	mov	ip, r0
 800b62c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b630:	eb0c 0401 	add.w	r4, ip, r1
 800b634:	4294      	cmp	r4, r2
 800b636:	bfde      	ittt	le
 800b638:	1b12      	suble	r2, r2, r4
 800b63a:	eb04 0c01 	addle.w	ip, r4, r1
 800b63e:	1840      	addle	r0, r0, r1
 800b640:	0052      	lsls	r2, r2, #1
 800b642:	f1be 0e01 	subs.w	lr, lr, #1
 800b646:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b64a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b64e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b652:	d1ed      	bne.n	800b630 <__ieee754_sqrt+0x94>
 800b654:	4671      	mov	r1, lr
 800b656:	2720      	movs	r7, #32
 800b658:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b65c:	4562      	cmp	r2, ip
 800b65e:	eb04 060e 	add.w	r6, r4, lr
 800b662:	dc02      	bgt.n	800b66a <__ieee754_sqrt+0xce>
 800b664:	d113      	bne.n	800b68e <__ieee754_sqrt+0xf2>
 800b666:	429e      	cmp	r6, r3
 800b668:	d811      	bhi.n	800b68e <__ieee754_sqrt+0xf2>
 800b66a:	2e00      	cmp	r6, #0
 800b66c:	eb06 0e04 	add.w	lr, r6, r4
 800b670:	da43      	bge.n	800b6fa <__ieee754_sqrt+0x15e>
 800b672:	f1be 0f00 	cmp.w	lr, #0
 800b676:	db40      	blt.n	800b6fa <__ieee754_sqrt+0x15e>
 800b678:	f10c 0801 	add.w	r8, ip, #1
 800b67c:	eba2 020c 	sub.w	r2, r2, ip
 800b680:	429e      	cmp	r6, r3
 800b682:	bf88      	it	hi
 800b684:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b688:	1b9b      	subs	r3, r3, r6
 800b68a:	4421      	add	r1, r4
 800b68c:	46c4      	mov	ip, r8
 800b68e:	0052      	lsls	r2, r2, #1
 800b690:	3f01      	subs	r7, #1
 800b692:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b696:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b69a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b69e:	d1dd      	bne.n	800b65c <__ieee754_sqrt+0xc0>
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	d006      	beq.n	800b6b2 <__ieee754_sqrt+0x116>
 800b6a4:	1c4c      	adds	r4, r1, #1
 800b6a6:	bf13      	iteet	ne
 800b6a8:	3101      	addne	r1, #1
 800b6aa:	3001      	addeq	r0, #1
 800b6ac:	4639      	moveq	r1, r7
 800b6ae:	f021 0101 	bicne.w	r1, r1, #1
 800b6b2:	1043      	asrs	r3, r0, #1
 800b6b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b6b8:	0849      	lsrs	r1, r1, #1
 800b6ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b6be:	07c2      	lsls	r2, r0, #31
 800b6c0:	bf48      	it	mi
 800b6c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b6c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	463d      	mov	r5, r7
 800b6ce:	e77f      	b.n	800b5d0 <__ieee754_sqrt+0x34>
 800b6d0:	0ada      	lsrs	r2, r3, #11
 800b6d2:	3815      	subs	r0, #21
 800b6d4:	055b      	lsls	r3, r3, #21
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	d0fa      	beq.n	800b6d0 <__ieee754_sqrt+0x134>
 800b6da:	02d7      	lsls	r7, r2, #11
 800b6dc:	d50a      	bpl.n	800b6f4 <__ieee754_sqrt+0x158>
 800b6de:	f1c1 0420 	rsb	r4, r1, #32
 800b6e2:	fa23 f404 	lsr.w	r4, r3, r4
 800b6e6:	1e4d      	subs	r5, r1, #1
 800b6e8:	408b      	lsls	r3, r1
 800b6ea:	4322      	orrs	r2, r4
 800b6ec:	1b41      	subs	r1, r0, r5
 800b6ee:	e788      	b.n	800b602 <__ieee754_sqrt+0x66>
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	e7f0      	b.n	800b6d6 <__ieee754_sqrt+0x13a>
 800b6f4:	0052      	lsls	r2, r2, #1
 800b6f6:	3101      	adds	r1, #1
 800b6f8:	e7ef      	b.n	800b6da <__ieee754_sqrt+0x13e>
 800b6fa:	46e0      	mov	r8, ip
 800b6fc:	e7be      	b.n	800b67c <__ieee754_sqrt+0xe0>
 800b6fe:	bf00      	nop
 800b700:	7ff00000 	.word	0x7ff00000
 800b704:	00000000 	.word	0x00000000

0800b708 <__kernel_cos>:
 800b708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	ec57 6b10 	vmov	r6, r7, d0
 800b710:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b714:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b718:	ed8d 1b00 	vstr	d1, [sp]
 800b71c:	da07      	bge.n	800b72e <__kernel_cos+0x26>
 800b71e:	ee10 0a10 	vmov	r0, s0
 800b722:	4639      	mov	r1, r7
 800b724:	f7f5 f9bc 	bl	8000aa0 <__aeabi_d2iz>
 800b728:	2800      	cmp	r0, #0
 800b72a:	f000 8088 	beq.w	800b83e <__kernel_cos+0x136>
 800b72e:	4632      	mov	r2, r6
 800b730:	463b      	mov	r3, r7
 800b732:	4630      	mov	r0, r6
 800b734:	4639      	mov	r1, r7
 800b736:	f7f4 ff03 	bl	8000540 <__aeabi_dmul>
 800b73a:	4b51      	ldr	r3, [pc, #324]	; (800b880 <__kernel_cos+0x178>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	460d      	mov	r5, r1
 800b742:	f7f4 fefd 	bl	8000540 <__aeabi_dmul>
 800b746:	a340      	add	r3, pc, #256	; (adr r3, 800b848 <__kernel_cos+0x140>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	4682      	mov	sl, r0
 800b74e:	468b      	mov	fp, r1
 800b750:	4620      	mov	r0, r4
 800b752:	4629      	mov	r1, r5
 800b754:	f7f4 fef4 	bl	8000540 <__aeabi_dmul>
 800b758:	a33d      	add	r3, pc, #244	; (adr r3, 800b850 <__kernel_cos+0x148>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f7f4 fd39 	bl	80001d4 <__adddf3>
 800b762:	4622      	mov	r2, r4
 800b764:	462b      	mov	r3, r5
 800b766:	f7f4 feeb 	bl	8000540 <__aeabi_dmul>
 800b76a:	a33b      	add	r3, pc, #236	; (adr r3, 800b858 <__kernel_cos+0x150>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f7f4 fd2e 	bl	80001d0 <__aeabi_dsub>
 800b774:	4622      	mov	r2, r4
 800b776:	462b      	mov	r3, r5
 800b778:	f7f4 fee2 	bl	8000540 <__aeabi_dmul>
 800b77c:	a338      	add	r3, pc, #224	; (adr r3, 800b860 <__kernel_cos+0x158>)
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f7f4 fd27 	bl	80001d4 <__adddf3>
 800b786:	4622      	mov	r2, r4
 800b788:	462b      	mov	r3, r5
 800b78a:	f7f4 fed9 	bl	8000540 <__aeabi_dmul>
 800b78e:	a336      	add	r3, pc, #216	; (adr r3, 800b868 <__kernel_cos+0x160>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f7f4 fd1c 	bl	80001d0 <__aeabi_dsub>
 800b798:	4622      	mov	r2, r4
 800b79a:	462b      	mov	r3, r5
 800b79c:	f7f4 fed0 	bl	8000540 <__aeabi_dmul>
 800b7a0:	a333      	add	r3, pc, #204	; (adr r3, 800b870 <__kernel_cos+0x168>)
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f7f4 fd15 	bl	80001d4 <__adddf3>
 800b7aa:	4622      	mov	r2, r4
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	f7f4 fec7 	bl	8000540 <__aeabi_dmul>
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	f7f4 fec3 	bl	8000540 <__aeabi_dmul>
 800b7ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7be:	4604      	mov	r4, r0
 800b7c0:	460d      	mov	r5, r1
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	f7f4 febb 	bl	8000540 <__aeabi_dmul>
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f7f4 fcfd 	bl	80001d0 <__aeabi_dsub>
 800b7d6:	4b2b      	ldr	r3, [pc, #172]	; (800b884 <__kernel_cos+0x17c>)
 800b7d8:	4598      	cmp	r8, r3
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460f      	mov	r7, r1
 800b7de:	dc10      	bgt.n	800b802 <__kernel_cos+0xfa>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4650      	mov	r0, sl
 800b7e6:	4659      	mov	r1, fp
 800b7e8:	f7f4 fcf2 	bl	80001d0 <__aeabi_dsub>
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	4926      	ldr	r1, [pc, #152]	; (800b888 <__kernel_cos+0x180>)
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	f7f4 fcec 	bl	80001d0 <__aeabi_dsub>
 800b7f8:	ec41 0b10 	vmov	d0, r0, r1
 800b7fc:	b003      	add	sp, #12
 800b7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b802:	4b22      	ldr	r3, [pc, #136]	; (800b88c <__kernel_cos+0x184>)
 800b804:	4920      	ldr	r1, [pc, #128]	; (800b888 <__kernel_cos+0x180>)
 800b806:	4598      	cmp	r8, r3
 800b808:	bfcc      	ite	gt
 800b80a:	4d21      	ldrgt	r5, [pc, #132]	; (800b890 <__kernel_cos+0x188>)
 800b80c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b810:	2400      	movs	r4, #0
 800b812:	4622      	mov	r2, r4
 800b814:	462b      	mov	r3, r5
 800b816:	2000      	movs	r0, #0
 800b818:	f7f4 fcda 	bl	80001d0 <__aeabi_dsub>
 800b81c:	4622      	mov	r2, r4
 800b81e:	4680      	mov	r8, r0
 800b820:	4689      	mov	r9, r1
 800b822:	462b      	mov	r3, r5
 800b824:	4650      	mov	r0, sl
 800b826:	4659      	mov	r1, fp
 800b828:	f7f4 fcd2 	bl	80001d0 <__aeabi_dsub>
 800b82c:	4632      	mov	r2, r6
 800b82e:	463b      	mov	r3, r7
 800b830:	f7f4 fcce 	bl	80001d0 <__aeabi_dsub>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4640      	mov	r0, r8
 800b83a:	4649      	mov	r1, r9
 800b83c:	e7da      	b.n	800b7f4 <__kernel_cos+0xec>
 800b83e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b878 <__kernel_cos+0x170>
 800b842:	e7db      	b.n	800b7fc <__kernel_cos+0xf4>
 800b844:	f3af 8000 	nop.w
 800b848:	be8838d4 	.word	0xbe8838d4
 800b84c:	bda8fae9 	.word	0xbda8fae9
 800b850:	bdb4b1c4 	.word	0xbdb4b1c4
 800b854:	3e21ee9e 	.word	0x3e21ee9e
 800b858:	809c52ad 	.word	0x809c52ad
 800b85c:	3e927e4f 	.word	0x3e927e4f
 800b860:	19cb1590 	.word	0x19cb1590
 800b864:	3efa01a0 	.word	0x3efa01a0
 800b868:	16c15177 	.word	0x16c15177
 800b86c:	3f56c16c 	.word	0x3f56c16c
 800b870:	5555554c 	.word	0x5555554c
 800b874:	3fa55555 	.word	0x3fa55555
 800b878:	00000000 	.word	0x00000000
 800b87c:	3ff00000 	.word	0x3ff00000
 800b880:	3fe00000 	.word	0x3fe00000
 800b884:	3fd33332 	.word	0x3fd33332
 800b888:	3ff00000 	.word	0x3ff00000
 800b88c:	3fe90000 	.word	0x3fe90000
 800b890:	3fd20000 	.word	0x3fd20000
 800b894:	00000000 	.word	0x00000000

0800b898 <__kernel_rem_pio2>:
 800b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89c:	ed2d 8b02 	vpush	{d8}
 800b8a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b8a4:	f112 0f14 	cmn.w	r2, #20
 800b8a8:	9308      	str	r3, [sp, #32]
 800b8aa:	9101      	str	r1, [sp, #4]
 800b8ac:	4bc6      	ldr	r3, [pc, #792]	; (800bbc8 <__kernel_rem_pio2+0x330>)
 800b8ae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b8b0:	9009      	str	r0, [sp, #36]	; 0x24
 800b8b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8b6:	9304      	str	r3, [sp, #16]
 800b8b8:	9b08      	ldr	r3, [sp, #32]
 800b8ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8be:	bfa8      	it	ge
 800b8c0:	1ed4      	subge	r4, r2, #3
 800b8c2:	9306      	str	r3, [sp, #24]
 800b8c4:	bfb2      	itee	lt
 800b8c6:	2400      	movlt	r4, #0
 800b8c8:	2318      	movge	r3, #24
 800b8ca:	fb94 f4f3 	sdivge	r4, r4, r3
 800b8ce:	f06f 0317 	mvn.w	r3, #23
 800b8d2:	fb04 3303 	mla	r3, r4, r3, r3
 800b8d6:	eb03 0a02 	add.w	sl, r3, r2
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	9a06      	ldr	r2, [sp, #24]
 800b8de:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bbb8 <__kernel_rem_pio2+0x320>
 800b8e2:	eb03 0802 	add.w	r8, r3, r2
 800b8e6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b8e8:	1aa7      	subs	r7, r4, r2
 800b8ea:	ae20      	add	r6, sp, #128	; 0x80
 800b8ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b8f0:	2500      	movs	r5, #0
 800b8f2:	4545      	cmp	r5, r8
 800b8f4:	dd18      	ble.n	800b928 <__kernel_rem_pio2+0x90>
 800b8f6:	9b08      	ldr	r3, [sp, #32]
 800b8f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b8fc:	aa20      	add	r2, sp, #128	; 0x80
 800b8fe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800bbb8 <__kernel_rem_pio2+0x320>
 800b902:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b906:	f1c3 0301 	rsb	r3, r3, #1
 800b90a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b90e:	9307      	str	r3, [sp, #28]
 800b910:	9b07      	ldr	r3, [sp, #28]
 800b912:	9a04      	ldr	r2, [sp, #16]
 800b914:	4443      	add	r3, r8
 800b916:	429a      	cmp	r2, r3
 800b918:	db2f      	blt.n	800b97a <__kernel_rem_pio2+0xe2>
 800b91a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b91e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b922:	462f      	mov	r7, r5
 800b924:	2600      	movs	r6, #0
 800b926:	e01b      	b.n	800b960 <__kernel_rem_pio2+0xc8>
 800b928:	42ef      	cmn	r7, r5
 800b92a:	d407      	bmi.n	800b93c <__kernel_rem_pio2+0xa4>
 800b92c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b930:	f7f4 fd9c 	bl	800046c <__aeabi_i2d>
 800b934:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b938:	3501      	adds	r5, #1
 800b93a:	e7da      	b.n	800b8f2 <__kernel_rem_pio2+0x5a>
 800b93c:	ec51 0b18 	vmov	r0, r1, d8
 800b940:	e7f8      	b.n	800b934 <__kernel_rem_pio2+0x9c>
 800b942:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b946:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b94a:	f7f4 fdf9 	bl	8000540 <__aeabi_dmul>
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b956:	f7f4 fc3d 	bl	80001d4 <__adddf3>
 800b95a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b95e:	3601      	adds	r6, #1
 800b960:	9b06      	ldr	r3, [sp, #24]
 800b962:	429e      	cmp	r6, r3
 800b964:	f1a7 0708 	sub.w	r7, r7, #8
 800b968:	ddeb      	ble.n	800b942 <__kernel_rem_pio2+0xaa>
 800b96a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b96e:	3508      	adds	r5, #8
 800b970:	ecab 7b02 	vstmia	fp!, {d7}
 800b974:	f108 0801 	add.w	r8, r8, #1
 800b978:	e7ca      	b.n	800b910 <__kernel_rem_pio2+0x78>
 800b97a:	9b04      	ldr	r3, [sp, #16]
 800b97c:	aa0c      	add	r2, sp, #48	; 0x30
 800b97e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b982:	930b      	str	r3, [sp, #44]	; 0x2c
 800b984:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b986:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b98a:	9c04      	ldr	r4, [sp, #16]
 800b98c:	930a      	str	r3, [sp, #40]	; 0x28
 800b98e:	ab98      	add	r3, sp, #608	; 0x260
 800b990:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b994:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b998:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b99c:	f8cd b008 	str.w	fp, [sp, #8]
 800b9a0:	4625      	mov	r5, r4
 800b9a2:	2d00      	cmp	r5, #0
 800b9a4:	dc78      	bgt.n	800ba98 <__kernel_rem_pio2+0x200>
 800b9a6:	ec47 6b10 	vmov	d0, r6, r7
 800b9aa:	4650      	mov	r0, sl
 800b9ac:	f000 fda0 	bl	800c4f0 <scalbn>
 800b9b0:	ec57 6b10 	vmov	r6, r7, d0
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b9ba:	ee10 0a10 	vmov	r0, s0
 800b9be:	4639      	mov	r1, r7
 800b9c0:	f7f4 fdbe 	bl	8000540 <__aeabi_dmul>
 800b9c4:	ec41 0b10 	vmov	d0, r0, r1
 800b9c8:	f000 fd12 	bl	800c3f0 <floor>
 800b9cc:	4b7f      	ldr	r3, [pc, #508]	; (800bbcc <__kernel_rem_pio2+0x334>)
 800b9ce:	ec51 0b10 	vmov	r0, r1, d0
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f7f4 fdb4 	bl	8000540 <__aeabi_dmul>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4630      	mov	r0, r6
 800b9de:	4639      	mov	r1, r7
 800b9e0:	f7f4 fbf6 	bl	80001d0 <__aeabi_dsub>
 800b9e4:	460f      	mov	r7, r1
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	f7f5 f85a 	bl	8000aa0 <__aeabi_d2iz>
 800b9ec:	9007      	str	r0, [sp, #28]
 800b9ee:	f7f4 fd3d 	bl	800046c <__aeabi_i2d>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f4 fbe9 	bl	80001d0 <__aeabi_dsub>
 800b9fe:	f1ba 0f00 	cmp.w	sl, #0
 800ba02:	4606      	mov	r6, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	dd70      	ble.n	800baea <__kernel_rem_pio2+0x252>
 800ba08:	1e62      	subs	r2, r4, #1
 800ba0a:	ab0c      	add	r3, sp, #48	; 0x30
 800ba0c:	9d07      	ldr	r5, [sp, #28]
 800ba0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ba12:	f1ca 0118 	rsb	r1, sl, #24
 800ba16:	fa40 f301 	asr.w	r3, r0, r1
 800ba1a:	441d      	add	r5, r3
 800ba1c:	408b      	lsls	r3, r1
 800ba1e:	1ac0      	subs	r0, r0, r3
 800ba20:	ab0c      	add	r3, sp, #48	; 0x30
 800ba22:	9507      	str	r5, [sp, #28]
 800ba24:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ba28:	f1ca 0317 	rsb	r3, sl, #23
 800ba2c:	fa40 f303 	asr.w	r3, r0, r3
 800ba30:	9302      	str	r3, [sp, #8]
 800ba32:	9b02      	ldr	r3, [sp, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	dd66      	ble.n	800bb06 <__kernel_rem_pio2+0x26e>
 800ba38:	9b07      	ldr	r3, [sp, #28]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	9307      	str	r3, [sp, #28]
 800ba40:	4615      	mov	r5, r2
 800ba42:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ba46:	4294      	cmp	r4, r2
 800ba48:	f300 8099 	bgt.w	800bb7e <__kernel_rem_pio2+0x2e6>
 800ba4c:	f1ba 0f00 	cmp.w	sl, #0
 800ba50:	dd07      	ble.n	800ba62 <__kernel_rem_pio2+0x1ca>
 800ba52:	f1ba 0f01 	cmp.w	sl, #1
 800ba56:	f000 80a5 	beq.w	800bba4 <__kernel_rem_pio2+0x30c>
 800ba5a:	f1ba 0f02 	cmp.w	sl, #2
 800ba5e:	f000 80c1 	beq.w	800bbe4 <__kernel_rem_pio2+0x34c>
 800ba62:	9b02      	ldr	r3, [sp, #8]
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d14e      	bne.n	800bb06 <__kernel_rem_pio2+0x26e>
 800ba68:	4632      	mov	r2, r6
 800ba6a:	463b      	mov	r3, r7
 800ba6c:	4958      	ldr	r1, [pc, #352]	; (800bbd0 <__kernel_rem_pio2+0x338>)
 800ba6e:	2000      	movs	r0, #0
 800ba70:	f7f4 fbae 	bl	80001d0 <__aeabi_dsub>
 800ba74:	4606      	mov	r6, r0
 800ba76:	460f      	mov	r7, r1
 800ba78:	2d00      	cmp	r5, #0
 800ba7a:	d044      	beq.n	800bb06 <__kernel_rem_pio2+0x26e>
 800ba7c:	4650      	mov	r0, sl
 800ba7e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bbc0 <__kernel_rem_pio2+0x328>
 800ba82:	f000 fd35 	bl	800c4f0 <scalbn>
 800ba86:	4630      	mov	r0, r6
 800ba88:	4639      	mov	r1, r7
 800ba8a:	ec53 2b10 	vmov	r2, r3, d0
 800ba8e:	f7f4 fb9f 	bl	80001d0 <__aeabi_dsub>
 800ba92:	4606      	mov	r6, r0
 800ba94:	460f      	mov	r7, r1
 800ba96:	e036      	b.n	800bb06 <__kernel_rem_pio2+0x26e>
 800ba98:	4b4e      	ldr	r3, [pc, #312]	; (800bbd4 <__kernel_rem_pio2+0x33c>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	4639      	mov	r1, r7
 800baa0:	f7f4 fd4e 	bl	8000540 <__aeabi_dmul>
 800baa4:	f7f4 fffc 	bl	8000aa0 <__aeabi_d2iz>
 800baa8:	f7f4 fce0 	bl	800046c <__aeabi_i2d>
 800baac:	4b4a      	ldr	r3, [pc, #296]	; (800bbd8 <__kernel_rem_pio2+0x340>)
 800baae:	2200      	movs	r2, #0
 800bab0:	4680      	mov	r8, r0
 800bab2:	4689      	mov	r9, r1
 800bab4:	f7f4 fd44 	bl	8000540 <__aeabi_dmul>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	4630      	mov	r0, r6
 800babe:	4639      	mov	r1, r7
 800bac0:	f7f4 fb86 	bl	80001d0 <__aeabi_dsub>
 800bac4:	f7f4 ffec 	bl	8000aa0 <__aeabi_d2iz>
 800bac8:	9b02      	ldr	r3, [sp, #8]
 800baca:	f843 0b04 	str.w	r0, [r3], #4
 800bace:	3d01      	subs	r5, #1
 800bad0:	9302      	str	r3, [sp, #8]
 800bad2:	ab70      	add	r3, sp, #448	; 0x1c0
 800bad4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	4640      	mov	r0, r8
 800bade:	4649      	mov	r1, r9
 800bae0:	f7f4 fb78 	bl	80001d4 <__adddf3>
 800bae4:	4606      	mov	r6, r0
 800bae6:	460f      	mov	r7, r1
 800bae8:	e75b      	b.n	800b9a2 <__kernel_rem_pio2+0x10a>
 800baea:	d105      	bne.n	800baf8 <__kernel_rem_pio2+0x260>
 800baec:	1e63      	subs	r3, r4, #1
 800baee:	aa0c      	add	r2, sp, #48	; 0x30
 800baf0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800baf4:	15c3      	asrs	r3, r0, #23
 800baf6:	e79b      	b.n	800ba30 <__kernel_rem_pio2+0x198>
 800baf8:	4b38      	ldr	r3, [pc, #224]	; (800bbdc <__kernel_rem_pio2+0x344>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	f7f4 ffa6 	bl	8000a4c <__aeabi_dcmpge>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d139      	bne.n	800bb78 <__kernel_rem_pio2+0x2e0>
 800bb04:	9002      	str	r0, [sp, #8]
 800bb06:	2200      	movs	r2, #0
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	f7f4 ff7f 	bl	8000a10 <__aeabi_dcmpeq>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f000 80b4 	beq.w	800bc80 <__kernel_rem_pio2+0x3e8>
 800bb18:	f104 3bff 	add.w	fp, r4, #4294967295
 800bb1c:	465b      	mov	r3, fp
 800bb1e:	2200      	movs	r2, #0
 800bb20:	9904      	ldr	r1, [sp, #16]
 800bb22:	428b      	cmp	r3, r1
 800bb24:	da65      	bge.n	800bbf2 <__kernel_rem_pio2+0x35a>
 800bb26:	2a00      	cmp	r2, #0
 800bb28:	d07b      	beq.n	800bc22 <__kernel_rem_pio2+0x38a>
 800bb2a:	ab0c      	add	r3, sp, #48	; 0x30
 800bb2c:	f1aa 0a18 	sub.w	sl, sl, #24
 800bb30:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 80a0 	beq.w	800bc7a <__kernel_rem_pio2+0x3e2>
 800bb3a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800bbc0 <__kernel_rem_pio2+0x328>
 800bb3e:	4650      	mov	r0, sl
 800bb40:	f000 fcd6 	bl	800c4f0 <scalbn>
 800bb44:	4f23      	ldr	r7, [pc, #140]	; (800bbd4 <__kernel_rem_pio2+0x33c>)
 800bb46:	ec55 4b10 	vmov	r4, r5, d0
 800bb4a:	46d8      	mov	r8, fp
 800bb4c:	2600      	movs	r6, #0
 800bb4e:	f1b8 0f00 	cmp.w	r8, #0
 800bb52:	f280 80cf 	bge.w	800bcf4 <__kernel_rem_pio2+0x45c>
 800bb56:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800bbb8 <__kernel_rem_pio2+0x320>
 800bb5a:	465f      	mov	r7, fp
 800bb5c:	f04f 0800 	mov.w	r8, #0
 800bb60:	2f00      	cmp	r7, #0
 800bb62:	f2c0 80fd 	blt.w	800bd60 <__kernel_rem_pio2+0x4c8>
 800bb66:	ab70      	add	r3, sp, #448	; 0x1c0
 800bb68:	f8df a074 	ldr.w	sl, [pc, #116]	; 800bbe0 <__kernel_rem_pio2+0x348>
 800bb6c:	ec55 4b18 	vmov	r4, r5, d8
 800bb70:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800bb74:	2600      	movs	r6, #0
 800bb76:	e0e5      	b.n	800bd44 <__kernel_rem_pio2+0x4ac>
 800bb78:	2302      	movs	r3, #2
 800bb7a:	9302      	str	r3, [sp, #8]
 800bb7c:	e75c      	b.n	800ba38 <__kernel_rem_pio2+0x1a0>
 800bb7e:	f8db 3000 	ldr.w	r3, [fp]
 800bb82:	b955      	cbnz	r5, 800bb9a <__kernel_rem_pio2+0x302>
 800bb84:	b123      	cbz	r3, 800bb90 <__kernel_rem_pio2+0x2f8>
 800bb86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bb8a:	f8cb 3000 	str.w	r3, [fp]
 800bb8e:	2301      	movs	r3, #1
 800bb90:	3201      	adds	r2, #1
 800bb92:	f10b 0b04 	add.w	fp, fp, #4
 800bb96:	461d      	mov	r5, r3
 800bb98:	e755      	b.n	800ba46 <__kernel_rem_pio2+0x1ae>
 800bb9a:	1acb      	subs	r3, r1, r3
 800bb9c:	f8cb 3000 	str.w	r3, [fp]
 800bba0:	462b      	mov	r3, r5
 800bba2:	e7f5      	b.n	800bb90 <__kernel_rem_pio2+0x2f8>
 800bba4:	1e62      	subs	r2, r4, #1
 800bba6:	ab0c      	add	r3, sp, #48	; 0x30
 800bba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bbb0:	a90c      	add	r1, sp, #48	; 0x30
 800bbb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bbb6:	e754      	b.n	800ba62 <__kernel_rem_pio2+0x1ca>
	...
 800bbc4:	3ff00000 	.word	0x3ff00000
 800bbc8:	0800c9d0 	.word	0x0800c9d0
 800bbcc:	40200000 	.word	0x40200000
 800bbd0:	3ff00000 	.word	0x3ff00000
 800bbd4:	3e700000 	.word	0x3e700000
 800bbd8:	41700000 	.word	0x41700000
 800bbdc:	3fe00000 	.word	0x3fe00000
 800bbe0:	0800c990 	.word	0x0800c990
 800bbe4:	1e62      	subs	r2, r4, #1
 800bbe6:	ab0c      	add	r3, sp, #48	; 0x30
 800bbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bbf0:	e7de      	b.n	800bbb0 <__kernel_rem_pio2+0x318>
 800bbf2:	a90c      	add	r1, sp, #48	; 0x30
 800bbf4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	e790      	b.n	800bb20 <__kernel_rem_pio2+0x288>
 800bbfe:	3301      	adds	r3, #1
 800bc00:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bc04:	2900      	cmp	r1, #0
 800bc06:	d0fa      	beq.n	800bbfe <__kernel_rem_pio2+0x366>
 800bc08:	9a08      	ldr	r2, [sp, #32]
 800bc0a:	18e3      	adds	r3, r4, r3
 800bc0c:	18a6      	adds	r6, r4, r2
 800bc0e:	aa20      	add	r2, sp, #128	; 0x80
 800bc10:	1c65      	adds	r5, r4, #1
 800bc12:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800bc16:	9302      	str	r3, [sp, #8]
 800bc18:	9b02      	ldr	r3, [sp, #8]
 800bc1a:	42ab      	cmp	r3, r5
 800bc1c:	da04      	bge.n	800bc28 <__kernel_rem_pio2+0x390>
 800bc1e:	461c      	mov	r4, r3
 800bc20:	e6b5      	b.n	800b98e <__kernel_rem_pio2+0xf6>
 800bc22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc24:	2301      	movs	r3, #1
 800bc26:	e7eb      	b.n	800bc00 <__kernel_rem_pio2+0x368>
 800bc28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc2e:	f7f4 fc1d 	bl	800046c <__aeabi_i2d>
 800bc32:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc38:	46b3      	mov	fp, r6
 800bc3a:	461c      	mov	r4, r3
 800bc3c:	2700      	movs	r7, #0
 800bc3e:	f04f 0800 	mov.w	r8, #0
 800bc42:	f04f 0900 	mov.w	r9, #0
 800bc46:	9b06      	ldr	r3, [sp, #24]
 800bc48:	429f      	cmp	r7, r3
 800bc4a:	dd06      	ble.n	800bc5a <__kernel_rem_pio2+0x3c2>
 800bc4c:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc4e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc52:	e9c3 8900 	strd	r8, r9, [r3]
 800bc56:	3501      	adds	r5, #1
 800bc58:	e7de      	b.n	800bc18 <__kernel_rem_pio2+0x380>
 800bc5a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bc5e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bc62:	f7f4 fc6d 	bl	8000540 <__aeabi_dmul>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	f7f4 fab1 	bl	80001d4 <__adddf3>
 800bc72:	3701      	adds	r7, #1
 800bc74:	4680      	mov	r8, r0
 800bc76:	4689      	mov	r9, r1
 800bc78:	e7e5      	b.n	800bc46 <__kernel_rem_pio2+0x3ae>
 800bc7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc7e:	e754      	b.n	800bb2a <__kernel_rem_pio2+0x292>
 800bc80:	ec47 6b10 	vmov	d0, r6, r7
 800bc84:	f1ca 0000 	rsb	r0, sl, #0
 800bc88:	f000 fc32 	bl	800c4f0 <scalbn>
 800bc8c:	ec57 6b10 	vmov	r6, r7, d0
 800bc90:	4b9f      	ldr	r3, [pc, #636]	; (800bf10 <__kernel_rem_pio2+0x678>)
 800bc92:	ee10 0a10 	vmov	r0, s0
 800bc96:	2200      	movs	r2, #0
 800bc98:	4639      	mov	r1, r7
 800bc9a:	f7f4 fed7 	bl	8000a4c <__aeabi_dcmpge>
 800bc9e:	b300      	cbz	r0, 800bce2 <__kernel_rem_pio2+0x44a>
 800bca0:	4b9c      	ldr	r3, [pc, #624]	; (800bf14 <__kernel_rem_pio2+0x67c>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	4630      	mov	r0, r6
 800bca6:	4639      	mov	r1, r7
 800bca8:	f7f4 fc4a 	bl	8000540 <__aeabi_dmul>
 800bcac:	f7f4 fef8 	bl	8000aa0 <__aeabi_d2iz>
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	f7f4 fbdb 	bl	800046c <__aeabi_i2d>
 800bcb6:	4b96      	ldr	r3, [pc, #600]	; (800bf10 <__kernel_rem_pio2+0x678>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f7f4 fc41 	bl	8000540 <__aeabi_dmul>
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7f4 fa83 	bl	80001d0 <__aeabi_dsub>
 800bcca:	f7f4 fee9 	bl	8000aa0 <__aeabi_d2iz>
 800bcce:	f104 0b01 	add.w	fp, r4, #1
 800bcd2:	ab0c      	add	r3, sp, #48	; 0x30
 800bcd4:	f10a 0a18 	add.w	sl, sl, #24
 800bcd8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bcdc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800bce0:	e72b      	b.n	800bb3a <__kernel_rem_pio2+0x2a2>
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	f7f4 fedb 	bl	8000aa0 <__aeabi_d2iz>
 800bcea:	ab0c      	add	r3, sp, #48	; 0x30
 800bcec:	46a3      	mov	fp, r4
 800bcee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bcf2:	e722      	b.n	800bb3a <__kernel_rem_pio2+0x2a2>
 800bcf4:	ab70      	add	r3, sp, #448	; 0x1c0
 800bcf6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800bcfa:	ab0c      	add	r3, sp, #48	; 0x30
 800bcfc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bd00:	f7f4 fbb4 	bl	800046c <__aeabi_i2d>
 800bd04:	4622      	mov	r2, r4
 800bd06:	462b      	mov	r3, r5
 800bd08:	f7f4 fc1a 	bl	8000540 <__aeabi_dmul>
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	e9c9 0100 	strd	r0, r1, [r9]
 800bd12:	463b      	mov	r3, r7
 800bd14:	4620      	mov	r0, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	f7f4 fc12 	bl	8000540 <__aeabi_dmul>
 800bd1c:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd20:	4604      	mov	r4, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	e713      	b.n	800bb4e <__kernel_rem_pio2+0x2b6>
 800bd26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bd2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bd2e:	f7f4 fc07 	bl	8000540 <__aeabi_dmul>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f7f4 fa4b 	bl	80001d4 <__adddf3>
 800bd3e:	3601      	adds	r6, #1
 800bd40:	4604      	mov	r4, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	9b04      	ldr	r3, [sp, #16]
 800bd46:	429e      	cmp	r6, r3
 800bd48:	dc01      	bgt.n	800bd4e <__kernel_rem_pio2+0x4b6>
 800bd4a:	45b0      	cmp	r8, r6
 800bd4c:	daeb      	bge.n	800bd26 <__kernel_rem_pio2+0x48e>
 800bd4e:	ab48      	add	r3, sp, #288	; 0x120
 800bd50:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bd54:	e9c3 4500 	strd	r4, r5, [r3]
 800bd58:	3f01      	subs	r7, #1
 800bd5a:	f108 0801 	add.w	r8, r8, #1
 800bd5e:	e6ff      	b.n	800bb60 <__kernel_rem_pio2+0x2c8>
 800bd60:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	dc0b      	bgt.n	800bd7e <__kernel_rem_pio2+0x4e6>
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dc6e      	bgt.n	800be48 <__kernel_rem_pio2+0x5b0>
 800bd6a:	d045      	beq.n	800bdf8 <__kernel_rem_pio2+0x560>
 800bd6c:	9b07      	ldr	r3, [sp, #28]
 800bd6e:	f003 0007 	and.w	r0, r3, #7
 800bd72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bd76:	ecbd 8b02 	vpop	{d8}
 800bd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d1f3      	bne.n	800bd6c <__kernel_rem_pio2+0x4d4>
 800bd84:	ab48      	add	r3, sp, #288	; 0x120
 800bd86:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800bd8a:	46d0      	mov	r8, sl
 800bd8c:	46d9      	mov	r9, fp
 800bd8e:	f1b9 0f00 	cmp.w	r9, #0
 800bd92:	f1a8 0808 	sub.w	r8, r8, #8
 800bd96:	dc64      	bgt.n	800be62 <__kernel_rem_pio2+0x5ca>
 800bd98:	465c      	mov	r4, fp
 800bd9a:	2c01      	cmp	r4, #1
 800bd9c:	f1aa 0a08 	sub.w	sl, sl, #8
 800bda0:	dc7e      	bgt.n	800bea0 <__kernel_rem_pio2+0x608>
 800bda2:	2000      	movs	r0, #0
 800bda4:	2100      	movs	r1, #0
 800bda6:	f1bb 0f01 	cmp.w	fp, #1
 800bdaa:	f300 8097 	bgt.w	800bedc <__kernel_rem_pio2+0x644>
 800bdae:	9b02      	ldr	r3, [sp, #8]
 800bdb0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800bdb4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f040 8099 	bne.w	800bef0 <__kernel_rem_pio2+0x658>
 800bdbe:	9b01      	ldr	r3, [sp, #4]
 800bdc0:	e9c3 5600 	strd	r5, r6, [r3]
 800bdc4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bdc8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bdcc:	e7ce      	b.n	800bd6c <__kernel_rem_pio2+0x4d4>
 800bdce:	ab48      	add	r3, sp, #288	; 0x120
 800bdd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 f9fc 	bl	80001d4 <__adddf3>
 800bddc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bde0:	f1bb 0f00 	cmp.w	fp, #0
 800bde4:	daf3      	bge.n	800bdce <__kernel_rem_pio2+0x536>
 800bde6:	9b02      	ldr	r3, [sp, #8]
 800bde8:	b113      	cbz	r3, 800bdf0 <__kernel_rem_pio2+0x558>
 800bdea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdee:	4619      	mov	r1, r3
 800bdf0:	9b01      	ldr	r3, [sp, #4]
 800bdf2:	e9c3 0100 	strd	r0, r1, [r3]
 800bdf6:	e7b9      	b.n	800bd6c <__kernel_rem_pio2+0x4d4>
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	e7f0      	b.n	800bde0 <__kernel_rem_pio2+0x548>
 800bdfe:	ab48      	add	r3, sp, #288	; 0x120
 800be00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f7f4 f9e4 	bl	80001d4 <__adddf3>
 800be0c:	3c01      	subs	r4, #1
 800be0e:	2c00      	cmp	r4, #0
 800be10:	daf5      	bge.n	800bdfe <__kernel_rem_pio2+0x566>
 800be12:	9b02      	ldr	r3, [sp, #8]
 800be14:	b1e3      	cbz	r3, 800be50 <__kernel_rem_pio2+0x5b8>
 800be16:	4602      	mov	r2, r0
 800be18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be1c:	9c01      	ldr	r4, [sp, #4]
 800be1e:	e9c4 2300 	strd	r2, r3, [r4]
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800be2a:	f7f4 f9d1 	bl	80001d0 <__aeabi_dsub>
 800be2e:	ad4a      	add	r5, sp, #296	; 0x128
 800be30:	2401      	movs	r4, #1
 800be32:	45a3      	cmp	fp, r4
 800be34:	da0f      	bge.n	800be56 <__kernel_rem_pio2+0x5be>
 800be36:	9b02      	ldr	r3, [sp, #8]
 800be38:	b113      	cbz	r3, 800be40 <__kernel_rem_pio2+0x5a8>
 800be3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be3e:	4619      	mov	r1, r3
 800be40:	9b01      	ldr	r3, [sp, #4]
 800be42:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800be46:	e791      	b.n	800bd6c <__kernel_rem_pio2+0x4d4>
 800be48:	465c      	mov	r4, fp
 800be4a:	2000      	movs	r0, #0
 800be4c:	2100      	movs	r1, #0
 800be4e:	e7de      	b.n	800be0e <__kernel_rem_pio2+0x576>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	e7e2      	b.n	800be1c <__kernel_rem_pio2+0x584>
 800be56:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800be5a:	f7f4 f9bb 	bl	80001d4 <__adddf3>
 800be5e:	3401      	adds	r4, #1
 800be60:	e7e7      	b.n	800be32 <__kernel_rem_pio2+0x59a>
 800be62:	e9d8 4500 	ldrd	r4, r5, [r8]
 800be66:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800be6a:	4620      	mov	r0, r4
 800be6c:	4632      	mov	r2, r6
 800be6e:	463b      	mov	r3, r7
 800be70:	4629      	mov	r1, r5
 800be72:	f7f4 f9af 	bl	80001d4 <__adddf3>
 800be76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	4620      	mov	r0, r4
 800be80:	4629      	mov	r1, r5
 800be82:	f7f4 f9a5 	bl	80001d0 <__aeabi_dsub>
 800be86:	4632      	mov	r2, r6
 800be88:	463b      	mov	r3, r7
 800be8a:	f7f4 f9a3 	bl	80001d4 <__adddf3>
 800be8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800be92:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800be96:	ed88 7b00 	vstr	d7, [r8]
 800be9a:	f109 39ff 	add.w	r9, r9, #4294967295
 800be9e:	e776      	b.n	800bd8e <__kernel_rem_pio2+0x4f6>
 800bea0:	e9da 8900 	ldrd	r8, r9, [sl]
 800bea4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bea8:	4640      	mov	r0, r8
 800beaa:	4632      	mov	r2, r6
 800beac:	463b      	mov	r3, r7
 800beae:	4649      	mov	r1, r9
 800beb0:	f7f4 f990 	bl	80001d4 <__adddf3>
 800beb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beb8:	4602      	mov	r2, r0
 800beba:	460b      	mov	r3, r1
 800bebc:	4640      	mov	r0, r8
 800bebe:	4649      	mov	r1, r9
 800bec0:	f7f4 f986 	bl	80001d0 <__aeabi_dsub>
 800bec4:	4632      	mov	r2, r6
 800bec6:	463b      	mov	r3, r7
 800bec8:	f7f4 f984 	bl	80001d4 <__adddf3>
 800becc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bed0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bed4:	ed8a 7b00 	vstr	d7, [sl]
 800bed8:	3c01      	subs	r4, #1
 800beda:	e75e      	b.n	800bd9a <__kernel_rem_pio2+0x502>
 800bedc:	ab48      	add	r3, sp, #288	; 0x120
 800bede:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	f7f4 f975 	bl	80001d4 <__adddf3>
 800beea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800beee:	e75a      	b.n	800bda6 <__kernel_rem_pio2+0x50e>
 800bef0:	9b01      	ldr	r3, [sp, #4]
 800bef2:	9a01      	ldr	r2, [sp, #4]
 800bef4:	601d      	str	r5, [r3, #0]
 800bef6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800befa:	605c      	str	r4, [r3, #4]
 800befc:	609f      	str	r7, [r3, #8]
 800befe:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bf02:	60d3      	str	r3, [r2, #12]
 800bf04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf08:	6110      	str	r0, [r2, #16]
 800bf0a:	6153      	str	r3, [r2, #20]
 800bf0c:	e72e      	b.n	800bd6c <__kernel_rem_pio2+0x4d4>
 800bf0e:	bf00      	nop
 800bf10:	41700000 	.word	0x41700000
 800bf14:	3e700000 	.word	0x3e700000

0800bf18 <__kernel_sin>:
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	ed2d 8b04 	vpush	{d8-d9}
 800bf20:	eeb0 8a41 	vmov.f32	s16, s2
 800bf24:	eef0 8a61 	vmov.f32	s17, s3
 800bf28:	ec55 4b10 	vmov	r4, r5, d0
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bf36:	9001      	str	r0, [sp, #4]
 800bf38:	da06      	bge.n	800bf48 <__kernel_sin+0x30>
 800bf3a:	ee10 0a10 	vmov	r0, s0
 800bf3e:	4629      	mov	r1, r5
 800bf40:	f7f4 fdae 	bl	8000aa0 <__aeabi_d2iz>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d051      	beq.n	800bfec <__kernel_sin+0xd4>
 800bf48:	4622      	mov	r2, r4
 800bf4a:	462b      	mov	r3, r5
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	4629      	mov	r1, r5
 800bf50:	f7f4 faf6 	bl	8000540 <__aeabi_dmul>
 800bf54:	4682      	mov	sl, r0
 800bf56:	468b      	mov	fp, r1
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 faee 	bl	8000540 <__aeabi_dmul>
 800bf64:	a341      	add	r3, pc, #260	; (adr r3, 800c06c <__kernel_sin+0x154>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	4680      	mov	r8, r0
 800bf6c:	4689      	mov	r9, r1
 800bf6e:	4650      	mov	r0, sl
 800bf70:	4659      	mov	r1, fp
 800bf72:	f7f4 fae5 	bl	8000540 <__aeabi_dmul>
 800bf76:	a33f      	add	r3, pc, #252	; (adr r3, 800c074 <__kernel_sin+0x15c>)
 800bf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7c:	f7f4 f928 	bl	80001d0 <__aeabi_dsub>
 800bf80:	4652      	mov	r2, sl
 800bf82:	465b      	mov	r3, fp
 800bf84:	f7f4 fadc 	bl	8000540 <__aeabi_dmul>
 800bf88:	a33c      	add	r3, pc, #240	; (adr r3, 800c07c <__kernel_sin+0x164>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	f7f4 f921 	bl	80001d4 <__adddf3>
 800bf92:	4652      	mov	r2, sl
 800bf94:	465b      	mov	r3, fp
 800bf96:	f7f4 fad3 	bl	8000540 <__aeabi_dmul>
 800bf9a:	a33a      	add	r3, pc, #232	; (adr r3, 800c084 <__kernel_sin+0x16c>)
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	f7f4 f916 	bl	80001d0 <__aeabi_dsub>
 800bfa4:	4652      	mov	r2, sl
 800bfa6:	465b      	mov	r3, fp
 800bfa8:	f7f4 faca 	bl	8000540 <__aeabi_dmul>
 800bfac:	a337      	add	r3, pc, #220	; (adr r3, 800c08c <__kernel_sin+0x174>)
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	f7f4 f90f 	bl	80001d4 <__adddf3>
 800bfb6:	9b01      	ldr	r3, [sp, #4]
 800bfb8:	4606      	mov	r6, r0
 800bfba:	460f      	mov	r7, r1
 800bfbc:	b9eb      	cbnz	r3, 800bffa <__kernel_sin+0xe2>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	4659      	mov	r1, fp
 800bfc6:	f7f4 fabb 	bl	8000540 <__aeabi_dmul>
 800bfca:	a325      	add	r3, pc, #148	; (adr r3, 800c060 <__kernel_sin+0x148>)
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	f7f4 f8fe 	bl	80001d0 <__aeabi_dsub>
 800bfd4:	4642      	mov	r2, r8
 800bfd6:	464b      	mov	r3, r9
 800bfd8:	f7f4 fab2 	bl	8000540 <__aeabi_dmul>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	f7f4 f8f6 	bl	80001d4 <__adddf3>
 800bfe8:	4604      	mov	r4, r0
 800bfea:	460d      	mov	r5, r1
 800bfec:	ec45 4b10 	vmov	d0, r4, r5
 800bff0:	b003      	add	sp, #12
 800bff2:	ecbd 8b04 	vpop	{d8-d9}
 800bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffa:	4b1b      	ldr	r3, [pc, #108]	; (800c068 <__kernel_sin+0x150>)
 800bffc:	ec51 0b18 	vmov	r0, r1, d8
 800c000:	2200      	movs	r2, #0
 800c002:	f7f4 fa9d 	bl	8000540 <__aeabi_dmul>
 800c006:	4632      	mov	r2, r6
 800c008:	ec41 0b19 	vmov	d9, r0, r1
 800c00c:	463b      	mov	r3, r7
 800c00e:	4640      	mov	r0, r8
 800c010:	4649      	mov	r1, r9
 800c012:	f7f4 fa95 	bl	8000540 <__aeabi_dmul>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	ec51 0b19 	vmov	r0, r1, d9
 800c01e:	f7f4 f8d7 	bl	80001d0 <__aeabi_dsub>
 800c022:	4652      	mov	r2, sl
 800c024:	465b      	mov	r3, fp
 800c026:	f7f4 fa8b 	bl	8000540 <__aeabi_dmul>
 800c02a:	ec53 2b18 	vmov	r2, r3, d8
 800c02e:	f7f4 f8cf 	bl	80001d0 <__aeabi_dsub>
 800c032:	a30b      	add	r3, pc, #44	; (adr r3, 800c060 <__kernel_sin+0x148>)
 800c034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c038:	4606      	mov	r6, r0
 800c03a:	460f      	mov	r7, r1
 800c03c:	4640      	mov	r0, r8
 800c03e:	4649      	mov	r1, r9
 800c040:	f7f4 fa7e 	bl	8000540 <__aeabi_dmul>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4630      	mov	r0, r6
 800c04a:	4639      	mov	r1, r7
 800c04c:	f7f4 f8c2 	bl	80001d4 <__adddf3>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	4620      	mov	r0, r4
 800c056:	4629      	mov	r1, r5
 800c058:	f7f4 f8ba 	bl	80001d0 <__aeabi_dsub>
 800c05c:	e7c4      	b.n	800bfe8 <__kernel_sin+0xd0>
 800c05e:	bf00      	nop
 800c060:	55555549 	.word	0x55555549
 800c064:	3fc55555 	.word	0x3fc55555
 800c068:	3fe00000 	.word	0x3fe00000
 800c06c:	5acfd57c 	.word	0x5acfd57c
 800c070:	3de5d93a 	.word	0x3de5d93a
 800c074:	8a2b9ceb 	.word	0x8a2b9ceb
 800c078:	3e5ae5e6 	.word	0x3e5ae5e6
 800c07c:	57b1fe7d 	.word	0x57b1fe7d
 800c080:	3ec71de3 	.word	0x3ec71de3
 800c084:	19c161d5 	.word	0x19c161d5
 800c088:	3f2a01a0 	.word	0x3f2a01a0
 800c08c:	1110f8a6 	.word	0x1110f8a6
 800c090:	3f811111 	.word	0x3f811111
 800c094:	00000000 	.word	0x00000000

0800c098 <atan>:
 800c098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	ec55 4b10 	vmov	r4, r5, d0
 800c0a0:	4bc3      	ldr	r3, [pc, #780]	; (800c3b0 <atan+0x318>)
 800c0a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0a6:	429e      	cmp	r6, r3
 800c0a8:	46ab      	mov	fp, r5
 800c0aa:	dd18      	ble.n	800c0de <atan+0x46>
 800c0ac:	4bc1      	ldr	r3, [pc, #772]	; (800c3b4 <atan+0x31c>)
 800c0ae:	429e      	cmp	r6, r3
 800c0b0:	dc01      	bgt.n	800c0b6 <atan+0x1e>
 800c0b2:	d109      	bne.n	800c0c8 <atan+0x30>
 800c0b4:	b144      	cbz	r4, 800c0c8 <atan+0x30>
 800c0b6:	4622      	mov	r2, r4
 800c0b8:	462b      	mov	r3, r5
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	f7f4 f889 	bl	80001d4 <__adddf3>
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	460d      	mov	r5, r1
 800c0c6:	e006      	b.n	800c0d6 <atan+0x3e>
 800c0c8:	f1bb 0f00 	cmp.w	fp, #0
 800c0cc:	f300 8131 	bgt.w	800c332 <atan+0x29a>
 800c0d0:	a59b      	add	r5, pc, #620	; (adr r5, 800c340 <atan+0x2a8>)
 800c0d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0d6:	ec45 4b10 	vmov	d0, r4, r5
 800c0da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0de:	4bb6      	ldr	r3, [pc, #728]	; (800c3b8 <atan+0x320>)
 800c0e0:	429e      	cmp	r6, r3
 800c0e2:	dc14      	bgt.n	800c10e <atan+0x76>
 800c0e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c0e8:	429e      	cmp	r6, r3
 800c0ea:	dc0d      	bgt.n	800c108 <atan+0x70>
 800c0ec:	a396      	add	r3, pc, #600	; (adr r3, 800c348 <atan+0x2b0>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	ee10 0a10 	vmov	r0, s0
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	f7f4 f86c 	bl	80001d4 <__adddf3>
 800c0fc:	4baf      	ldr	r3, [pc, #700]	; (800c3bc <atan+0x324>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	f7f4 fcae 	bl	8000a60 <__aeabi_dcmpgt>
 800c104:	2800      	cmp	r0, #0
 800c106:	d1e6      	bne.n	800c0d6 <atan+0x3e>
 800c108:	f04f 3aff 	mov.w	sl, #4294967295
 800c10c:	e02b      	b.n	800c166 <atan+0xce>
 800c10e:	f000 f963 	bl	800c3d8 <fabs>
 800c112:	4bab      	ldr	r3, [pc, #684]	; (800c3c0 <atan+0x328>)
 800c114:	429e      	cmp	r6, r3
 800c116:	ec55 4b10 	vmov	r4, r5, d0
 800c11a:	f300 80bf 	bgt.w	800c29c <atan+0x204>
 800c11e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c122:	429e      	cmp	r6, r3
 800c124:	f300 80a0 	bgt.w	800c268 <atan+0x1d0>
 800c128:	ee10 2a10 	vmov	r2, s0
 800c12c:	ee10 0a10 	vmov	r0, s0
 800c130:	462b      	mov	r3, r5
 800c132:	4629      	mov	r1, r5
 800c134:	f7f4 f84e 	bl	80001d4 <__adddf3>
 800c138:	4ba0      	ldr	r3, [pc, #640]	; (800c3bc <atan+0x324>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	f7f4 f848 	bl	80001d0 <__aeabi_dsub>
 800c140:	2200      	movs	r2, #0
 800c142:	4606      	mov	r6, r0
 800c144:	460f      	mov	r7, r1
 800c146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c14a:	4620      	mov	r0, r4
 800c14c:	4629      	mov	r1, r5
 800c14e:	f7f4 f841 	bl	80001d4 <__adddf3>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	4630      	mov	r0, r6
 800c158:	4639      	mov	r1, r7
 800c15a:	f7f4 fb1b 	bl	8000794 <__aeabi_ddiv>
 800c15e:	f04f 0a00 	mov.w	sl, #0
 800c162:	4604      	mov	r4, r0
 800c164:	460d      	mov	r5, r1
 800c166:	4622      	mov	r2, r4
 800c168:	462b      	mov	r3, r5
 800c16a:	4620      	mov	r0, r4
 800c16c:	4629      	mov	r1, r5
 800c16e:	f7f4 f9e7 	bl	8000540 <__aeabi_dmul>
 800c172:	4602      	mov	r2, r0
 800c174:	460b      	mov	r3, r1
 800c176:	4680      	mov	r8, r0
 800c178:	4689      	mov	r9, r1
 800c17a:	f7f4 f9e1 	bl	8000540 <__aeabi_dmul>
 800c17e:	a374      	add	r3, pc, #464	; (adr r3, 800c350 <atan+0x2b8>)
 800c180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c184:	4606      	mov	r6, r0
 800c186:	460f      	mov	r7, r1
 800c188:	f7f4 f9da 	bl	8000540 <__aeabi_dmul>
 800c18c:	a372      	add	r3, pc, #456	; (adr r3, 800c358 <atan+0x2c0>)
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	f7f4 f81f 	bl	80001d4 <__adddf3>
 800c196:	4632      	mov	r2, r6
 800c198:	463b      	mov	r3, r7
 800c19a:	f7f4 f9d1 	bl	8000540 <__aeabi_dmul>
 800c19e:	a370      	add	r3, pc, #448	; (adr r3, 800c360 <atan+0x2c8>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	f7f4 f816 	bl	80001d4 <__adddf3>
 800c1a8:	4632      	mov	r2, r6
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	f7f4 f9c8 	bl	8000540 <__aeabi_dmul>
 800c1b0:	a36d      	add	r3, pc, #436	; (adr r3, 800c368 <atan+0x2d0>)
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	f7f4 f80d 	bl	80001d4 <__adddf3>
 800c1ba:	4632      	mov	r2, r6
 800c1bc:	463b      	mov	r3, r7
 800c1be:	f7f4 f9bf 	bl	8000540 <__aeabi_dmul>
 800c1c2:	a36b      	add	r3, pc, #428	; (adr r3, 800c370 <atan+0x2d8>)
 800c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c8:	f7f4 f804 	bl	80001d4 <__adddf3>
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	463b      	mov	r3, r7
 800c1d0:	f7f4 f9b6 	bl	8000540 <__aeabi_dmul>
 800c1d4:	a368      	add	r3, pc, #416	; (adr r3, 800c378 <atan+0x2e0>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f7f3 fffb 	bl	80001d4 <__adddf3>
 800c1de:	4642      	mov	r2, r8
 800c1e0:	464b      	mov	r3, r9
 800c1e2:	f7f4 f9ad 	bl	8000540 <__aeabi_dmul>
 800c1e6:	a366      	add	r3, pc, #408	; (adr r3, 800c380 <atan+0x2e8>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	4689      	mov	r9, r1
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	f7f4 f9a4 	bl	8000540 <__aeabi_dmul>
 800c1f8:	a363      	add	r3, pc, #396	; (adr r3, 800c388 <atan+0x2f0>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	f7f3 ffe7 	bl	80001d0 <__aeabi_dsub>
 800c202:	4632      	mov	r2, r6
 800c204:	463b      	mov	r3, r7
 800c206:	f7f4 f99b 	bl	8000540 <__aeabi_dmul>
 800c20a:	a361      	add	r3, pc, #388	; (adr r3, 800c390 <atan+0x2f8>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f3 ffde 	bl	80001d0 <__aeabi_dsub>
 800c214:	4632      	mov	r2, r6
 800c216:	463b      	mov	r3, r7
 800c218:	f7f4 f992 	bl	8000540 <__aeabi_dmul>
 800c21c:	a35e      	add	r3, pc, #376	; (adr r3, 800c398 <atan+0x300>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f7f3 ffd5 	bl	80001d0 <__aeabi_dsub>
 800c226:	4632      	mov	r2, r6
 800c228:	463b      	mov	r3, r7
 800c22a:	f7f4 f989 	bl	8000540 <__aeabi_dmul>
 800c22e:	a35c      	add	r3, pc, #368	; (adr r3, 800c3a0 <atan+0x308>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	f7f3 ffcc 	bl	80001d0 <__aeabi_dsub>
 800c238:	4632      	mov	r2, r6
 800c23a:	463b      	mov	r3, r7
 800c23c:	f7f4 f980 	bl	8000540 <__aeabi_dmul>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4640      	mov	r0, r8
 800c246:	4649      	mov	r1, r9
 800c248:	f7f3 ffc4 	bl	80001d4 <__adddf3>
 800c24c:	4622      	mov	r2, r4
 800c24e:	462b      	mov	r3, r5
 800c250:	f7f4 f976 	bl	8000540 <__aeabi_dmul>
 800c254:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	d14b      	bne.n	800c2f6 <atan+0x25e>
 800c25e:	4620      	mov	r0, r4
 800c260:	4629      	mov	r1, r5
 800c262:	f7f3 ffb5 	bl	80001d0 <__aeabi_dsub>
 800c266:	e72c      	b.n	800c0c2 <atan+0x2a>
 800c268:	ee10 0a10 	vmov	r0, s0
 800c26c:	4b53      	ldr	r3, [pc, #332]	; (800c3bc <atan+0x324>)
 800c26e:	2200      	movs	r2, #0
 800c270:	4629      	mov	r1, r5
 800c272:	f7f3 ffad 	bl	80001d0 <__aeabi_dsub>
 800c276:	4b51      	ldr	r3, [pc, #324]	; (800c3bc <atan+0x324>)
 800c278:	4606      	mov	r6, r0
 800c27a:	460f      	mov	r7, r1
 800c27c:	2200      	movs	r2, #0
 800c27e:	4620      	mov	r0, r4
 800c280:	4629      	mov	r1, r5
 800c282:	f7f3 ffa7 	bl	80001d4 <__adddf3>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	4630      	mov	r0, r6
 800c28c:	4639      	mov	r1, r7
 800c28e:	f7f4 fa81 	bl	8000794 <__aeabi_ddiv>
 800c292:	f04f 0a01 	mov.w	sl, #1
 800c296:	4604      	mov	r4, r0
 800c298:	460d      	mov	r5, r1
 800c29a:	e764      	b.n	800c166 <atan+0xce>
 800c29c:	4b49      	ldr	r3, [pc, #292]	; (800c3c4 <atan+0x32c>)
 800c29e:	429e      	cmp	r6, r3
 800c2a0:	da1d      	bge.n	800c2de <atan+0x246>
 800c2a2:	ee10 0a10 	vmov	r0, s0
 800c2a6:	4b48      	ldr	r3, [pc, #288]	; (800c3c8 <atan+0x330>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	f7f3 ff90 	bl	80001d0 <__aeabi_dsub>
 800c2b0:	4b45      	ldr	r3, [pc, #276]	; (800c3c8 <atan+0x330>)
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	460f      	mov	r7, r1
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	f7f4 f940 	bl	8000540 <__aeabi_dmul>
 800c2c0:	4b3e      	ldr	r3, [pc, #248]	; (800c3bc <atan+0x324>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f7f3 ff86 	bl	80001d4 <__adddf3>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	f7f4 fa60 	bl	8000794 <__aeabi_ddiv>
 800c2d4:	f04f 0a02 	mov.w	sl, #2
 800c2d8:	4604      	mov	r4, r0
 800c2da:	460d      	mov	r5, r1
 800c2dc:	e743      	b.n	800c166 <atan+0xce>
 800c2de:	462b      	mov	r3, r5
 800c2e0:	ee10 2a10 	vmov	r2, s0
 800c2e4:	4939      	ldr	r1, [pc, #228]	; (800c3cc <atan+0x334>)
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	f7f4 fa54 	bl	8000794 <__aeabi_ddiv>
 800c2ec:	f04f 0a03 	mov.w	sl, #3
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	460d      	mov	r5, r1
 800c2f4:	e737      	b.n	800c166 <atan+0xce>
 800c2f6:	4b36      	ldr	r3, [pc, #216]	; (800c3d0 <atan+0x338>)
 800c2f8:	4e36      	ldr	r6, [pc, #216]	; (800c3d4 <atan+0x33c>)
 800c2fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c2fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c302:	e9da 2300 	ldrd	r2, r3, [sl]
 800c306:	f7f3 ff63 	bl	80001d0 <__aeabi_dsub>
 800c30a:	4622      	mov	r2, r4
 800c30c:	462b      	mov	r3, r5
 800c30e:	f7f3 ff5f 	bl	80001d0 <__aeabi_dsub>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c31a:	f7f3 ff59 	bl	80001d0 <__aeabi_dsub>
 800c31e:	f1bb 0f00 	cmp.w	fp, #0
 800c322:	4604      	mov	r4, r0
 800c324:	460d      	mov	r5, r1
 800c326:	f6bf aed6 	bge.w	800c0d6 <atan+0x3e>
 800c32a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c32e:	461d      	mov	r5, r3
 800c330:	e6d1      	b.n	800c0d6 <atan+0x3e>
 800c332:	a51d      	add	r5, pc, #116	; (adr r5, 800c3a8 <atan+0x310>)
 800c334:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c338:	e6cd      	b.n	800c0d6 <atan+0x3e>
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w
 800c340:	54442d18 	.word	0x54442d18
 800c344:	bff921fb 	.word	0xbff921fb
 800c348:	8800759c 	.word	0x8800759c
 800c34c:	7e37e43c 	.word	0x7e37e43c
 800c350:	e322da11 	.word	0xe322da11
 800c354:	3f90ad3a 	.word	0x3f90ad3a
 800c358:	24760deb 	.word	0x24760deb
 800c35c:	3fa97b4b 	.word	0x3fa97b4b
 800c360:	a0d03d51 	.word	0xa0d03d51
 800c364:	3fb10d66 	.word	0x3fb10d66
 800c368:	c54c206e 	.word	0xc54c206e
 800c36c:	3fb745cd 	.word	0x3fb745cd
 800c370:	920083ff 	.word	0x920083ff
 800c374:	3fc24924 	.word	0x3fc24924
 800c378:	5555550d 	.word	0x5555550d
 800c37c:	3fd55555 	.word	0x3fd55555
 800c380:	2c6a6c2f 	.word	0x2c6a6c2f
 800c384:	bfa2b444 	.word	0xbfa2b444
 800c388:	52defd9a 	.word	0x52defd9a
 800c38c:	3fadde2d 	.word	0x3fadde2d
 800c390:	af749a6d 	.word	0xaf749a6d
 800c394:	3fb3b0f2 	.word	0x3fb3b0f2
 800c398:	fe231671 	.word	0xfe231671
 800c39c:	3fbc71c6 	.word	0x3fbc71c6
 800c3a0:	9998ebc4 	.word	0x9998ebc4
 800c3a4:	3fc99999 	.word	0x3fc99999
 800c3a8:	54442d18 	.word	0x54442d18
 800c3ac:	3ff921fb 	.word	0x3ff921fb
 800c3b0:	440fffff 	.word	0x440fffff
 800c3b4:	7ff00000 	.word	0x7ff00000
 800c3b8:	3fdbffff 	.word	0x3fdbffff
 800c3bc:	3ff00000 	.word	0x3ff00000
 800c3c0:	3ff2ffff 	.word	0x3ff2ffff
 800c3c4:	40038000 	.word	0x40038000
 800c3c8:	3ff80000 	.word	0x3ff80000
 800c3cc:	bff00000 	.word	0xbff00000
 800c3d0:	0800ca00 	.word	0x0800ca00
 800c3d4:	0800c9e0 	.word	0x0800c9e0

0800c3d8 <fabs>:
 800c3d8:	ec51 0b10 	vmov	r0, r1, d0
 800c3dc:	ee10 2a10 	vmov	r2, s0
 800c3e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3e4:	ec43 2b10 	vmov	d0, r2, r3
 800c3e8:	4770      	bx	lr
 800c3ea:	0000      	movs	r0, r0
 800c3ec:	0000      	movs	r0, r0
	...

0800c3f0 <floor>:
 800c3f0:	ec51 0b10 	vmov	r0, r1, d0
 800c3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c3fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c400:	2e13      	cmp	r6, #19
 800c402:	ee10 5a10 	vmov	r5, s0
 800c406:	ee10 8a10 	vmov	r8, s0
 800c40a:	460c      	mov	r4, r1
 800c40c:	dc32      	bgt.n	800c474 <floor+0x84>
 800c40e:	2e00      	cmp	r6, #0
 800c410:	da14      	bge.n	800c43c <floor+0x4c>
 800c412:	a333      	add	r3, pc, #204	; (adr r3, 800c4e0 <floor+0xf0>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	f7f3 fedc 	bl	80001d4 <__adddf3>
 800c41c:	2200      	movs	r2, #0
 800c41e:	2300      	movs	r3, #0
 800c420:	f7f4 fb1e 	bl	8000a60 <__aeabi_dcmpgt>
 800c424:	b138      	cbz	r0, 800c436 <floor+0x46>
 800c426:	2c00      	cmp	r4, #0
 800c428:	da57      	bge.n	800c4da <floor+0xea>
 800c42a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c42e:	431d      	orrs	r5, r3
 800c430:	d001      	beq.n	800c436 <floor+0x46>
 800c432:	4c2d      	ldr	r4, [pc, #180]	; (800c4e8 <floor+0xf8>)
 800c434:	2500      	movs	r5, #0
 800c436:	4621      	mov	r1, r4
 800c438:	4628      	mov	r0, r5
 800c43a:	e025      	b.n	800c488 <floor+0x98>
 800c43c:	4f2b      	ldr	r7, [pc, #172]	; (800c4ec <floor+0xfc>)
 800c43e:	4137      	asrs	r7, r6
 800c440:	ea01 0307 	and.w	r3, r1, r7
 800c444:	4303      	orrs	r3, r0
 800c446:	d01f      	beq.n	800c488 <floor+0x98>
 800c448:	a325      	add	r3, pc, #148	; (adr r3, 800c4e0 <floor+0xf0>)
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	f7f3 fec1 	bl	80001d4 <__adddf3>
 800c452:	2200      	movs	r2, #0
 800c454:	2300      	movs	r3, #0
 800c456:	f7f4 fb03 	bl	8000a60 <__aeabi_dcmpgt>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d0eb      	beq.n	800c436 <floor+0x46>
 800c45e:	2c00      	cmp	r4, #0
 800c460:	bfbe      	ittt	lt
 800c462:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c466:	fa43 f606 	asrlt.w	r6, r3, r6
 800c46a:	19a4      	addlt	r4, r4, r6
 800c46c:	ea24 0407 	bic.w	r4, r4, r7
 800c470:	2500      	movs	r5, #0
 800c472:	e7e0      	b.n	800c436 <floor+0x46>
 800c474:	2e33      	cmp	r6, #51	; 0x33
 800c476:	dd0b      	ble.n	800c490 <floor+0xa0>
 800c478:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c47c:	d104      	bne.n	800c488 <floor+0x98>
 800c47e:	ee10 2a10 	vmov	r2, s0
 800c482:	460b      	mov	r3, r1
 800c484:	f7f3 fea6 	bl	80001d4 <__adddf3>
 800c488:	ec41 0b10 	vmov	d0, r0, r1
 800c48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c490:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c494:	f04f 33ff 	mov.w	r3, #4294967295
 800c498:	fa23 f707 	lsr.w	r7, r3, r7
 800c49c:	4207      	tst	r7, r0
 800c49e:	d0f3      	beq.n	800c488 <floor+0x98>
 800c4a0:	a30f      	add	r3, pc, #60	; (adr r3, 800c4e0 <floor+0xf0>)
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f7f3 fe95 	bl	80001d4 <__adddf3>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f7f4 fad7 	bl	8000a60 <__aeabi_dcmpgt>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d0bf      	beq.n	800c436 <floor+0x46>
 800c4b6:	2c00      	cmp	r4, #0
 800c4b8:	da02      	bge.n	800c4c0 <floor+0xd0>
 800c4ba:	2e14      	cmp	r6, #20
 800c4bc:	d103      	bne.n	800c4c6 <floor+0xd6>
 800c4be:	3401      	adds	r4, #1
 800c4c0:	ea25 0507 	bic.w	r5, r5, r7
 800c4c4:	e7b7      	b.n	800c436 <floor+0x46>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c4cc:	fa03 f606 	lsl.w	r6, r3, r6
 800c4d0:	4435      	add	r5, r6
 800c4d2:	4545      	cmp	r5, r8
 800c4d4:	bf38      	it	cc
 800c4d6:	18e4      	addcc	r4, r4, r3
 800c4d8:	e7f2      	b.n	800c4c0 <floor+0xd0>
 800c4da:	2500      	movs	r5, #0
 800c4dc:	462c      	mov	r4, r5
 800c4de:	e7aa      	b.n	800c436 <floor+0x46>
 800c4e0:	8800759c 	.word	0x8800759c
 800c4e4:	7e37e43c 	.word	0x7e37e43c
 800c4e8:	bff00000 	.word	0xbff00000
 800c4ec:	000fffff 	.word	0x000fffff

0800c4f0 <scalbn>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	ec55 4b10 	vmov	r4, r5, d0
 800c4f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	462b      	mov	r3, r5
 800c4fe:	b99a      	cbnz	r2, 800c528 <scalbn+0x38>
 800c500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c504:	4323      	orrs	r3, r4
 800c506:	d036      	beq.n	800c576 <scalbn+0x86>
 800c508:	4b39      	ldr	r3, [pc, #228]	; (800c5f0 <scalbn+0x100>)
 800c50a:	4629      	mov	r1, r5
 800c50c:	ee10 0a10 	vmov	r0, s0
 800c510:	2200      	movs	r2, #0
 800c512:	f7f4 f815 	bl	8000540 <__aeabi_dmul>
 800c516:	4b37      	ldr	r3, [pc, #220]	; (800c5f4 <scalbn+0x104>)
 800c518:	429e      	cmp	r6, r3
 800c51a:	4604      	mov	r4, r0
 800c51c:	460d      	mov	r5, r1
 800c51e:	da10      	bge.n	800c542 <scalbn+0x52>
 800c520:	a32b      	add	r3, pc, #172	; (adr r3, 800c5d0 <scalbn+0xe0>)
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	e03a      	b.n	800c59e <scalbn+0xae>
 800c528:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c52c:	428a      	cmp	r2, r1
 800c52e:	d10c      	bne.n	800c54a <scalbn+0x5a>
 800c530:	ee10 2a10 	vmov	r2, s0
 800c534:	4620      	mov	r0, r4
 800c536:	4629      	mov	r1, r5
 800c538:	f7f3 fe4c 	bl	80001d4 <__adddf3>
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	e019      	b.n	800c576 <scalbn+0x86>
 800c542:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c546:	460b      	mov	r3, r1
 800c548:	3a36      	subs	r2, #54	; 0x36
 800c54a:	4432      	add	r2, r6
 800c54c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c550:	428a      	cmp	r2, r1
 800c552:	dd08      	ble.n	800c566 <scalbn+0x76>
 800c554:	2d00      	cmp	r5, #0
 800c556:	a120      	add	r1, pc, #128	; (adr r1, 800c5d8 <scalbn+0xe8>)
 800c558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c55c:	da1c      	bge.n	800c598 <scalbn+0xa8>
 800c55e:	a120      	add	r1, pc, #128	; (adr r1, 800c5e0 <scalbn+0xf0>)
 800c560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c564:	e018      	b.n	800c598 <scalbn+0xa8>
 800c566:	2a00      	cmp	r2, #0
 800c568:	dd08      	ble.n	800c57c <scalbn+0x8c>
 800c56a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c56e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c572:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c576:	ec45 4b10 	vmov	d0, r4, r5
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c580:	da19      	bge.n	800c5b6 <scalbn+0xc6>
 800c582:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c586:	429e      	cmp	r6, r3
 800c588:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c58c:	dd0a      	ble.n	800c5a4 <scalbn+0xb4>
 800c58e:	a112      	add	r1, pc, #72	; (adr r1, 800c5d8 <scalbn+0xe8>)
 800c590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1e2      	bne.n	800c55e <scalbn+0x6e>
 800c598:	a30f      	add	r3, pc, #60	; (adr r3, 800c5d8 <scalbn+0xe8>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f3 ffcf 	bl	8000540 <__aeabi_dmul>
 800c5a2:	e7cb      	b.n	800c53c <scalbn+0x4c>
 800c5a4:	a10a      	add	r1, pc, #40	; (adr r1, 800c5d0 <scalbn+0xe0>)
 800c5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d0b8      	beq.n	800c520 <scalbn+0x30>
 800c5ae:	a10e      	add	r1, pc, #56	; (adr r1, 800c5e8 <scalbn+0xf8>)
 800c5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5b4:	e7b4      	b.n	800c520 <scalbn+0x30>
 800c5b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5ba:	3236      	adds	r2, #54	; 0x36
 800c5bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <scalbn+0x108>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	e7e8      	b.n	800c59e <scalbn+0xae>
 800c5cc:	f3af 8000 	nop.w
 800c5d0:	c2f8f359 	.word	0xc2f8f359
 800c5d4:	01a56e1f 	.word	0x01a56e1f
 800c5d8:	8800759c 	.word	0x8800759c
 800c5dc:	7e37e43c 	.word	0x7e37e43c
 800c5e0:	8800759c 	.word	0x8800759c
 800c5e4:	fe37e43c 	.word	0xfe37e43c
 800c5e8:	c2f8f359 	.word	0xc2f8f359
 800c5ec:	81a56e1f 	.word	0x81a56e1f
 800c5f0:	43500000 	.word	0x43500000
 800c5f4:	ffff3cb0 	.word	0xffff3cb0
 800c5f8:	3c900000 	.word	0x3c900000

0800c5fc <atoi>:
 800c5fc:	220a      	movs	r2, #10
 800c5fe:	2100      	movs	r1, #0
 800c600:	f000 b8b6 	b.w	800c770 <strtol>

0800c604 <__errno>:
 800c604:	4b01      	ldr	r3, [pc, #4]	; (800c60c <__errno+0x8>)
 800c606:	6818      	ldr	r0, [r3, #0]
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	20000028 	.word	0x20000028

0800c610 <__libc_init_array>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	4d0d      	ldr	r5, [pc, #52]	; (800c648 <__libc_init_array+0x38>)
 800c614:	4c0d      	ldr	r4, [pc, #52]	; (800c64c <__libc_init_array+0x3c>)
 800c616:	1b64      	subs	r4, r4, r5
 800c618:	10a4      	asrs	r4, r4, #2
 800c61a:	2600      	movs	r6, #0
 800c61c:	42a6      	cmp	r6, r4
 800c61e:	d109      	bne.n	800c634 <__libc_init_array+0x24>
 800c620:	4d0b      	ldr	r5, [pc, #44]	; (800c650 <__libc_init_array+0x40>)
 800c622:	4c0c      	ldr	r4, [pc, #48]	; (800c654 <__libc_init_array+0x44>)
 800c624:	f000 f8ae 	bl	800c784 <_init>
 800c628:	1b64      	subs	r4, r4, r5
 800c62a:	10a4      	asrs	r4, r4, #2
 800c62c:	2600      	movs	r6, #0
 800c62e:	42a6      	cmp	r6, r4
 800c630:	d105      	bne.n	800c63e <__libc_init_array+0x2e>
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	f855 3b04 	ldr.w	r3, [r5], #4
 800c638:	4798      	blx	r3
 800c63a:	3601      	adds	r6, #1
 800c63c:	e7ee      	b.n	800c61c <__libc_init_array+0xc>
 800c63e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c642:	4798      	blx	r3
 800c644:	3601      	adds	r6, #1
 800c646:	e7f2      	b.n	800c62e <__libc_init_array+0x1e>
 800c648:	0800cb2c 	.word	0x0800cb2c
 800c64c:	0800cb2c 	.word	0x0800cb2c
 800c650:	0800cb2c 	.word	0x0800cb2c
 800c654:	0800cb30 	.word	0x0800cb30

0800c658 <memset>:
 800c658:	4402      	add	r2, r0
 800c65a:	4603      	mov	r3, r0
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d100      	bne.n	800c662 <memset+0xa>
 800c660:	4770      	bx	lr
 800c662:	f803 1b01 	strb.w	r1, [r3], #1
 800c666:	e7f9      	b.n	800c65c <memset+0x4>

0800c668 <_strtol_l.isra.0>:
 800c668:	2b01      	cmp	r3, #1
 800c66a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c66e:	d001      	beq.n	800c674 <_strtol_l.isra.0+0xc>
 800c670:	2b24      	cmp	r3, #36	; 0x24
 800c672:	d906      	bls.n	800c682 <_strtol_l.isra.0+0x1a>
 800c674:	f7ff ffc6 	bl	800c604 <__errno>
 800c678:	2316      	movs	r3, #22
 800c67a:	6003      	str	r3, [r0, #0]
 800c67c:	2000      	movs	r0, #0
 800c67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c682:	4f3a      	ldr	r7, [pc, #232]	; (800c76c <_strtol_l.isra.0+0x104>)
 800c684:	468e      	mov	lr, r1
 800c686:	4676      	mov	r6, lr
 800c688:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c68c:	5de5      	ldrb	r5, [r4, r7]
 800c68e:	f015 0508 	ands.w	r5, r5, #8
 800c692:	d1f8      	bne.n	800c686 <_strtol_l.isra.0+0x1e>
 800c694:	2c2d      	cmp	r4, #45	; 0x2d
 800c696:	d134      	bne.n	800c702 <_strtol_l.isra.0+0x9a>
 800c698:	f89e 4000 	ldrb.w	r4, [lr]
 800c69c:	f04f 0801 	mov.w	r8, #1
 800c6a0:	f106 0e02 	add.w	lr, r6, #2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d05c      	beq.n	800c762 <_strtol_l.isra.0+0xfa>
 800c6a8:	2b10      	cmp	r3, #16
 800c6aa:	d10c      	bne.n	800c6c6 <_strtol_l.isra.0+0x5e>
 800c6ac:	2c30      	cmp	r4, #48	; 0x30
 800c6ae:	d10a      	bne.n	800c6c6 <_strtol_l.isra.0+0x5e>
 800c6b0:	f89e 4000 	ldrb.w	r4, [lr]
 800c6b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c6b8:	2c58      	cmp	r4, #88	; 0x58
 800c6ba:	d14d      	bne.n	800c758 <_strtol_l.isra.0+0xf0>
 800c6bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c6c0:	2310      	movs	r3, #16
 800c6c2:	f10e 0e02 	add.w	lr, lr, #2
 800c6c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c6ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	fbbc f9f3 	udiv	r9, ip, r3
 800c6d4:	4635      	mov	r5, r6
 800c6d6:	fb03 ca19 	mls	sl, r3, r9, ip
 800c6da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c6de:	2f09      	cmp	r7, #9
 800c6e0:	d818      	bhi.n	800c714 <_strtol_l.isra.0+0xac>
 800c6e2:	463c      	mov	r4, r7
 800c6e4:	42a3      	cmp	r3, r4
 800c6e6:	dd24      	ble.n	800c732 <_strtol_l.isra.0+0xca>
 800c6e8:	2e00      	cmp	r6, #0
 800c6ea:	db1f      	blt.n	800c72c <_strtol_l.isra.0+0xc4>
 800c6ec:	45a9      	cmp	r9, r5
 800c6ee:	d31d      	bcc.n	800c72c <_strtol_l.isra.0+0xc4>
 800c6f0:	d101      	bne.n	800c6f6 <_strtol_l.isra.0+0x8e>
 800c6f2:	45a2      	cmp	sl, r4
 800c6f4:	db1a      	blt.n	800c72c <_strtol_l.isra.0+0xc4>
 800c6f6:	fb05 4503 	mla	r5, r5, r3, r4
 800c6fa:	2601      	movs	r6, #1
 800c6fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c700:	e7eb      	b.n	800c6da <_strtol_l.isra.0+0x72>
 800c702:	2c2b      	cmp	r4, #43	; 0x2b
 800c704:	bf08      	it	eq
 800c706:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c70a:	46a8      	mov	r8, r5
 800c70c:	bf08      	it	eq
 800c70e:	f106 0e02 	addeq.w	lr, r6, #2
 800c712:	e7c7      	b.n	800c6a4 <_strtol_l.isra.0+0x3c>
 800c714:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c718:	2f19      	cmp	r7, #25
 800c71a:	d801      	bhi.n	800c720 <_strtol_l.isra.0+0xb8>
 800c71c:	3c37      	subs	r4, #55	; 0x37
 800c71e:	e7e1      	b.n	800c6e4 <_strtol_l.isra.0+0x7c>
 800c720:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c724:	2f19      	cmp	r7, #25
 800c726:	d804      	bhi.n	800c732 <_strtol_l.isra.0+0xca>
 800c728:	3c57      	subs	r4, #87	; 0x57
 800c72a:	e7db      	b.n	800c6e4 <_strtol_l.isra.0+0x7c>
 800c72c:	f04f 36ff 	mov.w	r6, #4294967295
 800c730:	e7e4      	b.n	800c6fc <_strtol_l.isra.0+0x94>
 800c732:	2e00      	cmp	r6, #0
 800c734:	da05      	bge.n	800c742 <_strtol_l.isra.0+0xda>
 800c736:	2322      	movs	r3, #34	; 0x22
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	4665      	mov	r5, ip
 800c73c:	b942      	cbnz	r2, 800c750 <_strtol_l.isra.0+0xe8>
 800c73e:	4628      	mov	r0, r5
 800c740:	e79d      	b.n	800c67e <_strtol_l.isra.0+0x16>
 800c742:	f1b8 0f00 	cmp.w	r8, #0
 800c746:	d000      	beq.n	800c74a <_strtol_l.isra.0+0xe2>
 800c748:	426d      	negs	r5, r5
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	d0f7      	beq.n	800c73e <_strtol_l.isra.0+0xd6>
 800c74e:	b10e      	cbz	r6, 800c754 <_strtol_l.isra.0+0xec>
 800c750:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c754:	6011      	str	r1, [r2, #0]
 800c756:	e7f2      	b.n	800c73e <_strtol_l.isra.0+0xd6>
 800c758:	2430      	movs	r4, #48	; 0x30
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1b3      	bne.n	800c6c6 <_strtol_l.isra.0+0x5e>
 800c75e:	2308      	movs	r3, #8
 800c760:	e7b1      	b.n	800c6c6 <_strtol_l.isra.0+0x5e>
 800c762:	2c30      	cmp	r4, #48	; 0x30
 800c764:	d0a4      	beq.n	800c6b0 <_strtol_l.isra.0+0x48>
 800c766:	230a      	movs	r3, #10
 800c768:	e7ad      	b.n	800c6c6 <_strtol_l.isra.0+0x5e>
 800c76a:	bf00      	nop
 800c76c:	0800ca21 	.word	0x0800ca21

0800c770 <strtol>:
 800c770:	4613      	mov	r3, r2
 800c772:	460a      	mov	r2, r1
 800c774:	4601      	mov	r1, r0
 800c776:	4802      	ldr	r0, [pc, #8]	; (800c780 <strtol+0x10>)
 800c778:	6800      	ldr	r0, [r0, #0]
 800c77a:	f7ff bf75 	b.w	800c668 <_strtol_l.isra.0>
 800c77e:	bf00      	nop
 800c780:	20000028 	.word	0x20000028

0800c784 <_init>:
 800c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c786:	bf00      	nop
 800c788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c78a:	bc08      	pop	{r3}
 800c78c:	469e      	mov	lr, r3
 800c78e:	4770      	bx	lr

0800c790 <_fini>:
 800c790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c792:	bf00      	nop
 800c794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c796:	bc08      	pop	{r3}
 800c798:	469e      	mov	lr, r3
 800c79a:	4770      	bx	lr
